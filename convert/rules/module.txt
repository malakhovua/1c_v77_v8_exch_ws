////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

Перем мЧтениеXML;
Перем Параметры;
Перем мТаблицаПравилВыгрузки, мТаблицаПравилКонвертацииОбъектов;
Перем мИд, мНаименование, мДатаВремяСоздания, мКонфигурацияИсточник, мКонфигурацияПриемник, мВерсияФормата;
Перем ВерсияПлатформыПриемника;

Перем мКонвертацияПередВыгрузкойДанных;
Перем мКонвертацияПередВыгрузкойОбъекта;
Перем мКонвертацияПередКонвертациейОбъекта;
Перем мКонвертацияПослеВыгрузкиОбъекта;
Перем мКонвертацияПослеВыгрузкиДанных;
Перем мКонвертацияПослеЗагрузкиПравилОбмена;

Перем мКонвертацияПередЗагрузкойДанных;
Перем мКонвертацияПередЗагрузкойОбъекта;
Перем мКонвертацияПослеЗагрузкиОбъекта;
Перем мКонвертацияПослеЗагрузкиДанных;

Перем мПустоеЗначение;
Перем мСчетчикВыгруженныхОбъектов;
Перем мXMLАнализатор;
Перем DOMDocument, rootNode;
Перем мНачалоНовогоЭлемента, мИнструкцияОбработки, мКонецУровня, мКонецДокумента;

Перем ТаблицаПараметровДляЗагрузки;

Перем ТипыУсловийДляСтрок, ТипыУсловийДляЧисел, ТипыУсловийДляСправочников;
Перем ТипОбъектаДляНастройкиОтбора;
Перем ОбъектДляНастройкиОтбора;
Перем КодПВДДляНастройкиОтбора;
Перем ИмяПВДДляНастройкиОтбора;
Перем СписокОшибок;

Перем мИспользуемыеПравилаВыгрузки; // Список разделенных запятыми правил выгрузки данных, для которых необходимо включить пометку

Перем ЗначенияДляОтбора[100]; // массив для хранения значений, используется для настройки отбора данных

Перем ТаблицаРеквизитов; // таблица для хранения реквизитов, используется для настройки отбора данных

////////////////////////////////////////////////////////////////////////////////
// ПРЕДВАРИТЕЛЬНОЕ ОПИСАНИЕ ПРОЦЕДУР И ФУНКЦИЙ
////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО = "", УзелСсылки = "", ТолькоПолучитьУзелСсылки = 0, НомерПКО = 0) Далее
Процедура ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, УзелКоллекцииСвойств = 0, ОбъектКоллекции = 0, ПравилоРодитель = "", ИмяПредопределенногоЭлемента = "", Знач ВыгрузитьТолькоСсылку = 0) Далее
Функция НайтиПравило(Объект, ИмяПравила = "") Далее
Функция ПривестиНомерКДлине(Знач Стр, Длина) Далее
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Далее
Функция ПолучитьЗначение(Объект, Имя) Далее
Функция ПолучитьДатуV8(ЧастьДата, ЧастьВремя = "00:00:00") Далее    
Функция СоздатьЗапрос(ОбъектВыборки, ТабОтбор) Далее       
Процедура СохранитьНастройкиОтбора() Далее
Процедура ЗафиксироватьОшибку(ТекстОшибки) Далее
Процедура УстановитьЗначениеПараметраКонвертации(ИмяПараметра, ЗначениеПараметра) Далее

Процедура ЗагрузитьПравилаОбмена() Далее
Процедура Выгрузить() Далее

Функция СоздатьУзел(name) Далее
Процедура УстановитьАтрибут(element, name, value) Далее
Процедура ЗаписатьЭлемент(node, name, value = "") Далее
Процедура ДобавитьПодчиненный(parentNode, childNode) Далее

////////////////////////////////////////////////////////////////////////////////
// НАЧАЛО ОБРАБОТЧИКОВ
////////////////////////////////////////////////////////////////////////////////

Функция ПВД_ПередОбработкойПравила_Документ_БанковскаяВыписка(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Док = Документ.БанковскаяВыписка.ТекущийДокумент;
		|Группировка Док;
		|Условие(Док.ДатаДок>=ДатаНачала);
		|Условие(Док.ДатаДок<=ДатаОкончания);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если  Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда
			Пока Запрос.Группировка(1) = 1 Цикл
				Док = Запрос.Док;
				Док.ВыбратьСтроки();
				НомерСтр = 1;
				Пока  Док.ПолучитьСтроку() = 1 Цикл
					Данные = СоздатьОбъект("СписокЗначений");
					Контрагент = 0;
					Поступление = 0;
					
					Если Док.ВидДвижения = Перечисление.ВидыДвиженийПоРасчетномуСчету.Поступление Тогда
						Поступление = 1;
					КонецЕсли;
					
					Если Док.Субконто1.Вид() = "Контрагенты" Тогда
					Контрагент = 1;	
					КонецЕсли;
					
					Данные.Установить("Дата", Док.ДатаДок);
					Данные.Установить("Номер", Лев(Док.НомерДок,3) + Прав(Док.НомерДок,5) + "/"+ Формат(НомерСтр, "Ч(0)2.0"));
					Данные.Установить("ПометкаУдаления", Док.ПометкаУдаления());
					Данные.Установить("Проведен", Док.Проведен());
					Данные.Установить("Автор", Док.Автор);
					Данные.Установить("Комментарий", Док.Содержание);
					
					Если Контрагент = 1 Тогда
						Данные.Установить("Контрагент", Док.Субконто1);
					КонецЕсли;
					//поступление 
					Если (Контрагент = 1) И (Поступление = 1) Тогда
						Данные.Установить("ВидОперации", "ОтПокупателя");
						Данные.Установить("ХозяйственнаяОперация", "ОтПокупателя");
						Данные.Установить("Статья","ОплатаОтПокупателей");
					КонецЕсли;
					//расход 			
					Если (Контрагент = 1) И (Поступление = 0) Тогда
						Данные.Установить("ВидОперации", "Поставщику");
						Данные.Установить("ХозяйственнаяОперация", "Поставщику");
						Данные.Установить("Статья","ОплатаПоставщикам");
					КонецЕсли;	
					//прочие расходы
					Если (Контрагент = 0) И (Поступление = 0) Тогда
						Данные.Установить("ВидОперации", "НаРасходы");
						Данные.Установить("ХозяйственнаяОперация", "НаРасходы");
						Данные.Установить("Статья","Прочее");
					КонецЕсли;
					
					Данные.Установить("БанковскийСчет", Док.РСчет);
					Данные.Установить("Корреспонденция", Док.Счет);
					Данные.Установить("СуммаДокумента", Док.СуммаСНДС);
					Данные.Установить("СуммаУчета", Док.СуммаСНДС);
					Данные.Установить("ВалютаДенежныхСредств", Док.Валюта);
					Данные.Установить("ФиксироватьСхему", Док.ФлРучногоИзмСхемыРБ);
					Если Док.ФлРучногоИзмСхемыРБ = 1 Тогда
						Данные.Установить("СхемаРасчетаБонусов", Док.СхемаРБ);
					КонецЕсли;
					Данные.Установить("НазначениеПлатежа", Док.Содержание);
					
					РасшифровкаПлатежа = СоздатьОбъект("ТаблицаЗначений");
					РасшифровкаПлатежа.НоваяКолонка("СтавкаНДС");
					РасшифровкаПлатежа.НоваяКолонка("СуммаНДС");
					РасшифровкаПлатежа.НоваяКолонка("СуммаПлатежа");
					РасшифровкаПлатежа.НоваяКолонка("СуммаРасчетов");
					РасшифровкаПлатежа.НоваяСтрока();
					
					РасшифровкаПлатежа.СтавкаНДС = Док.ВидНДС;
					РасшифровкаПлатежа.СуммаНДС = Док.НДС;
					РасшифровкаПлатежа.СуммаПлатежа = Док.СуммаСНДС;
					РасшифровкаПлатежа.СуммаРасчетов= Док.СуммаСНДС;
						
					Данные.Установить("РасшифровкаПлатежа",РасшифровкаПлатежа);
					
					Если Док.ВидДвижения = Перечисление.ВидыДвиженийПоРасчетномуСчету.Поступление Тогда
						ВыгрузитьПоПравилу(Данные,,Данные,,"ПоступлениеНаСчет");
					Иначе
						ВыгрузитьПоПравилу(Данные,,Данные,,"РасходСоСчета");
					КонецЕсли;
					НомерСтр = НомерСтр + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_БанковскаяВыписка", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_БанковскаяВыписка" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Документ_БанковскаяВыписка()

Функция ПВД_ПередОбработкойПравила_Документ_ЗаказПокупателя(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(Параметры.Код) = 0  Тогда
			Отказ = 1;
			Документ = CreateObject("Документ.УМК_ЗаказКлиента");
			Если Документ.НайтиПоНомеру(Параметры.Код, ДатаОкончания)=1 Тогда
				ВыгрузитьПоПравилу(Документ.ТекущийДокумент(),,Документ.ТекущийДокумент(),,"ЗаказПокупателя");
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_ЗаказПокупателя", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_ЗаказПокупателя" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Документ_ЗаказПокупателя()

Функция ПВД_ПередВыгрузкойОбъекта_Документ_ИнвентаризацияЗапасов(
			ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(Параметры.Код) = 0  Тогда
			Отказ = 1;
			Документ = CreateObject("Документ.Инвентаризация");
			Если Документ.НайтиПоНомеру(Параметры.Код, ДатаОкончания)=1 Тогда
				ВыгрузитьПоПравилу(Документ.ТекущийДокумент(),,Документ.ТекущийДокумент(),,"ИнвентаризацияЗапасов");
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередВыгрузкойОбъекта_Документ_ИнвентаризацияЗапасов", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередВыгрузкойОбъекта_Документ_ИнвентаризацияЗапасов" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередВыгрузкойОбъекта_Документ_ИнвентаризацияЗапасов()

Функция ПВД_ПередОбработкойПравила_Документ_Касса(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Правила_ = СоздатьОбъект("СписокЗначений");
		Правила_.ДобавитьЗначение("ПриходныйКассовый");
		Правила_.ДобавитьЗначение("РасходныйКассовый");
		Правила_.ДобавитьЗначение("УМК_КассоваяВедомость");
		
		Для Инд = 1 По Правила_.РазмерСписка() Цикл
			
			Правило_ = Правила_.ПолучитьЗначение(Инд);
			
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = "
			|ОбрабатыватьДокументы все;
			|Док = Документ."+Правило_+".ТекущийДокумент;
			|Группировка Док;
			|Условие(Док.ДатаДок>=ДатаНачала);
			|Условие(Док.ДатаДок<=ДатаОкончания);
			|"//}}ЗАПРОС
			;
			
			//Если ошибка в запросе, то выход из процедуры
			Если  Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда
				Пока Запрос.Группировка(1) = 1 Цикл
					Если Запрос.Док.Счет.Код = "301" Тогда //перемещение ДС
						ВыгрузитьПоПравилу(Запрос.Док,,,,"ПеремещениеДС");	
					Иначе
						ВыгрузитьПоПравилу(Запрос.Док,,,,Правило_);
					КонецЕсли;
				КонецЦикла;  
			КонецЕсли;
			
		КонецЦикла;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_Касса", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_Касса" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Документ_Касса()

Функция ПВД_ПередОбработкойПравила_Справочник_Контрагенты(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(Параметры.Код) = 0  Тогда
			Отказ = 1;
			Справочник = CreateObject("Справочник.Контрагенты");
			Если Справочник.НайтиПоКоду(Параметры.Код)=1 Тогда
				ВыгрузитьПоПравилу(Справочник.ТекущийЭлемент(),,Справочник.ТекущийЭлемент(),,"Контрагенты");
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Справочник_Контрагенты", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Справочник_Контрагенты" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Справочник_Контрагенты()

Функция ПВД_ПередОбработкойПравила_Справочник_Номенклатура(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Отказ = 1;
		Справочник = CreateObject("Справочник.ТМЦ");
		
		Если Справочник.НайтиПоКоду(Параметры.Код)=1 Тогда
			СправочникСп = СоздатьОбъект("СписокЗначений");
			СправочникСп.ДобавитьЗначение(Справочник.ТекущийЭлемент());
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС()
			|Обрабатывать все;
			|ТекущийЭлемент = Справочник.ТМЦ.ТекущийЭлемент;
			|Группировка ТекущийЭлемент без групп;
			|Условие(ТекущийЭлемент В СправочникСп);
			|"//}}ЗАПРОС
			;
			Если Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда	
				Пока Запрос.Группировка(1) = 1 Цикл
					ВыгрузитьПоПравилу(Запрос.ТекущийЭлемент,,Запрос.ТекущийЭлемент,,"Номенклатура");
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Справочник_Номенклатура", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Справочник_Номенклатура" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Справочник_Номенклатура()

Функция ПВД_ПередОбработкойПравила_Остатки_ВводНачальныхОстатковТоваровВРознице(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		ПериодВыгрузки = Дата(Параметры.ПериодВыгрузки);
		
		СпрОрганизация = СоздатьОбъект("Справочник.Фирмы");
		СпрОрганизация.ВыбратьЭлементы();
		
		Пока СпрОрганизация.ПолучитьЭлемент() = 1 Цикл
			
			ТекОрганизация = СпрОрганизация.ТекущийЭлемент(); 
			
			ТабОстатки = СоздатьОбъект("ТаблицаЗначений");
			//Создание объекта типа Запрос
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(РозницаОстатки)
			|Период с ПериодВыгрузки по ПериодВыгрузки;
			|ОбрабатыватьДокументы все;
			|Организация = Регистр.Остатки.Фирма;
			|СтруктурнаяЕдиница = Регистр.Остатки.МестоХранения;
			|Номенклатура = Регистр.Остатки.ТМЦ;
			|ВидУпаковки = Регистр.Остатки.ВидУпаковки;
			|ЕдиницаИзмерения = Регистр.Остатки.ТМЦ.ЕдиницаПоУмолчанию;
			|Кол = Регистр.Остатки.ОстатокТовара;
			|Функция Количество = КонОст(Кол);
			|Группировка Организация;
			|Группировка СтруктурнаяЕдиница;
			|Группировка Номенклатура без групп;
			|Группировка ВидУпаковки;
			|Группировка ЕдиницаИзмерения;
			|Условие(СтруктурнаяЕдиница.ИспользуетсяВРознице = 1);
			|Условие(Организация = ТекОрганизация);
			|Условие(Кол > 0);
			|"//}}ЗАПРОС
			;
			
			// Если ошибка в запросе, то выход из процедуры
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос.Выгрузить(ТабОстатки,,0);
			
			////////////////////////////////////////
			
			ТабОстатки.НоваяКолонка("Характеристика");
			ТабОстатки.НоваяКолонка("Сумма");
			ТабОстатки.ВыбратьСтроки();
			
			МестоХранения = "";
			
			Пока ТабОстатки.ПолучитьСтроку() = 1 Цикл
				
				// Характеристика
				СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
				ЗначениеХаракеристики = СпрРВУ.ТекущийЭлемент();
				
				Если (ПустоеЗначение(ТабОстатки.ВидУпаковки) = 0) И (ТабОстатки.ВидУпаковки<> Перечисление.ВидыУпаковки.нет) Тогда
					СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
					СпрРВУ.ИспользоватьВладельца(ТабОстатки.Номенклатура);
					Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ТабОстатки.ВидУпаковки, 0) = 1 Тогда
						ЗначениеХаракеристики = СпрРВУ.ТекущийЭлемент();
					КонецЕсли;
				КонецЕсли;
				
				ТабОстатки.Характеристика =  ЗначениеХаракеристики;
				//Сумма
				ДатаЦен = ПериодВыгрузки;
				СтоимостьЕд = 0;
				
				Если ТабОстатки.Номенклатура.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
					СтоимостьЕд = глЦенаНоменклатурыСУпаковкой(ТабОстатки.Номенклатура, ТабОстатки.ВидУпаковки, ТабОстатки.ЕдиницаИзмерения, Константа.ОсновнаяКатегорияЦен, ДатаЦен);	
				Иначе // Берем стоимость остатка из регистра Партии
					
					ТбИтоги = ""; НС = "";
					
					ВремРегистры=СоздатьОбъект("Регистры");
					
					РегОстатки = ВремРегистры.Партии;
					
					//фильтр 
					РегОстатки.УстановитьЗначениеФильтра("ТМЦ",ТабОстатки.Номенклатура,1);
					РегОстатки.УстановитьЗначениеФильтра("Фирма",СпрОрганизация,1);
					
					
					РегОстатки.ВременныйРасчет();
					ВремРегистры.РассчитатьРегистрыНа(ПериодВыгрузки);
					
					РегОстатки.ВыгрузитьИтоги(ТбИтоги,1,1);
					
					Если ТбИтоги.НайтиЗначение(ТабОстатки.Номенклатура,НС,"ТМЦ") = 1 Тогда
						ТбИтоги.ПолучитьСтрокуПоНомеру(НС);
						СтоимостьЕд = ?(ТбИтоги.ОстатокТовара = 0, 0, ТбИтоги.Стоимость/ТбИтоги.ОстатокТовара);
					КонецЕсли;
					
				КонецЕсли;
				
				ТабОстатки.Сумма = СтоимостьЕд*ТабОстатки.Количество; // В ед. хранения остатка
				ТабОстатки.Количество = ТабОстатки.Количество/ТабОстатки.ЕдиницаИзмерения.Коэффициент;//В учетных единицах
				
				//Касса ККМ
				Если МестоХранения <> ТабОстатки.СтруктурнаяЕдиница Тогда
					МестоХранения = ТабОстатки.СтруктурнаяЕдиница;
					//Выгрузим место хранения в кассуККМ
					Данные = СоздатьОбъект("СписокЗначений");
					Данные.Установить("Владелец", ТекОрганизация);
					ВыгрузитьПоПравилу(МестоХранения,,Данные,,"КассыККМ");
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТабОстатки.КоличествоСтрок() <> 0 Тогда 
				
				ИсходящиеДанные = СоздатьОбъект("СписокЗначений");
				ИсходящиеДанные.Установить("Организация", ТекОрганизация);
				ИсходящиеДанные.Установить("Дата", ПериодВыгрузки);
				ИсходящиеДанные.Установить("Запасы",ТабОстатки);
				
				ВыгрузитьПоПравилу(,,ИсходящиеДанные,ИсходящиеДанные,"ВводНачальныхОстатковТоваровВРознице");
				
			КонецЕсли;
			
		КонецЦикла;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Остатки_ВводНачальныхОстатковТоваровВРознице", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Остатки_ВводНачальныхОстатковТоваровВРознице" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Остатки_ВводНачальныхОстатковТоваровВРознице()

Функция ПВД_ПередОбработкойПравила_Остатки_ВзаиморасчетовБонусы(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		
		ПериодВыгрузки = Дата(Параметры.ПериодВыгрузки);
		
		ТабОстатки = СоздатьОбъект("ТаблицаЗначений");
		//Создание объекта типа Запрос
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с ПериодВыгрузки по ПериодВыгрузки;
		|ОбрабатыватьДокументы все;
		|Организация = Регистр.ОстаткиВзаиморасчетовБонусы.Фирма;
		|Контрагент = Регистр.ОстаткиВзаиморасчетовБонусы.Контрагент;
		|Договор = Регистр.ОстаткиВзаиморасчетовБонусы.Договор;
		|Валюта = Регистр.ОстаткиВзаиморасчетовБонусы.Валюта;
		|ДолгТек = Регистр.ОстаткиВзаиморасчетовБонусы.Долг;
		|Функция Долг = КонОст(ДолгТек);
		|Группировка Организация;
		|Группировка Контрагент;
		|Группировка Договор;
		|Группировка Валюта;
		|Группировка ДолгТек;
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда
			
			Запрос.Выгрузить(ТабОстатки,,0);
			ИсходящиеДанные = СоздатьОбъект("СписокЗначений");
			ИсходящиеДанные.Установить("Период", ПериодВыгрузки);
			ИсходящиеДанные.Установить("НаборДанных",ТабОстатки);
			
			ВыгрузитьПоПравилу(,,ИсходящиеДанные,ИсходящиеДанные,"ОстаткиВзаиморасчетовБонусы");
						
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Остатки_ВзаиморасчетовБонусы", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Остатки_ВзаиморасчетовБонусы" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Остатки_ВзаиморасчетовБонусы()

Функция ПВД_ПередОбработкойПравила_Регистр_ПолучателиСкидокАкции(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Док = Документ.ПолучателиСкидки.ТекущийДокумент;
		|Группировка Док;
		|Условие(Док.ДатаДок>=ДатаНачала);
		|Условие(Док.ДатаДок<=ДатаОкончания);
		|Условие(Док.Проведен()=1);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если  Запрос.Выполнить(ТекстЗапроса) <> 0 Тогда
			Пока Запрос.Группировка(1) = 1 Цикл
				Док = Запрос.Док;
				Док.ВыбратьСтроки();
				НомерСтр = 1;
				Пока  Док.ПолучитьСтроку() = 1 Цикл
					Данные = СоздатьОбъект("СписокЗначений");
					Данные.Установить("ДокументУстановкиСкидок", Док.УстановкаСкидокТМЦ);
					Данные.Установить("Комментарий", Док.Примечание + "; " + Док.КомментарийСтр);
					Данные.Установить("НеЗакрыватьПриПродаже", Док.НеЗакрыватьВРН);
					Данные.Установить("Получатель", Док.Контрагент);
					Данные.Установить("ПолучательБонуса", Док.ПолучательБонуса);
		            
					ВыгрузитьПоПравилу(Данные,,Данные,,"ПолучателиСкидокАкции");
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ПолучателиСкидокАкции", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ПолучателиСкидокАкции" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_ПолучателиСкидокАкции()

Функция ПВД_ПередОбработкойПравила_Документ_ПриходнаяВедомость_в_РасходИзКассыРозница(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(Сформировать)
			|Период с ДатаНачала по ДатаОкончания;
			|ОбрабатыватьДокументы все;
			|Контрагент = Документ.УМК_КассоваяВедомость.Фирма;
			|Касса = Документ.УМК_КассоваяВедомость.РСчет;
			|Корреспонденция = Документ.УМК_КассоваяВедомость.Счет;
			|ОрганизацияПрихода = Документ.УМК_КассоваяВедомость.Контрагент;
			|Дата = Документ.УМК_КассоваяВедомость.ДатаДок;
			|Номер = Документ.УМК_КассоваяВедомость.НомерДок;
			|НомерСтроки_ = Документ.УМК_КассоваяВедомость.НомерСтроки;
			|СуммаДокумента = Документ.УМК_КассоваяВедомость.Сумма;
			|ПоДаннымПродавца = Документ.УМК_КассоваяВедомость.ПоДаннымПродавца;
			|ТекущийДокумент = Документ.УМК_КассоваяВедомость.ТекущийДокумент;
			|Код = Документ.УМК_КассоваяВедомость.РСчет.Код;
			|Автор = Документ.УМК_КассоваяВедомость.Автор;
			|Группировка ТекущийДокумент;
			|Группировка ОрганизацияПрихода;
			|Группировка Касса;
			|Группировка Корреспонденция;
			|Группировка Контрагент;
			|Группировка Дата;
			|Группировка Номер;
			|Группировка НомерСтроки_;
			|Группировка СуммаДокумента; 
			|Группировка ПоДаннымПродавца;
			|Группировка Автор;
			|Условие(Код = 9);
			|"//}}ЗАПРОС
			;
			
			Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
				
				ТЗ = СоздатьОбъект("ТаблицаЗначений");
				Запрос.Выгрузить(ТЗ,,0);
				ТЗ.НоваяКолонка("РасшифровкаПлатежа");
				ТЗ.НоваяКолонка("Комментарий");
				ТЗ.НоваяКолонка("ПометкаУдаления");
				ТЗ.НоваяКолонка("Проведен");
				ТЗ.НоваяКолонка("Организация");
						
				
				ТЗ.ВыбратьСтроки();
				
				Пока ТЗ.ПолучитьСтроку() = 1 Цикл
					
					ТЗ.Номер = Прав(ТЗ.Номер,7) +"/"+ Строка(ТЗ.НомерСтроки_);
					ТЗ.Комментарий = СокрЛП(СокрЛП(ТЗ.ТекущийДокумент.Примечание) + " " + СокрЛП(ТЗ.ТекущийДокумент.ПримечаниеСтрока));
					ТЗ.ПометкаУдаления = ТЗ.ТекущийДокумент.ПометкаУдаления();
					ТЗ.Проведен = ТЗ.ТекущийДокумент.Проведен();
					ТЗ.Организация = ТЗ.ОрганизацияПрихода.ФирмаПрихода.Получить(ТекущаяДата());
					
					РасшифровкаПлатежа = СоздатьОбъект("ТаблицаЗначений");
					РасшифровкаПлатежа.НоваяКолонка("СуммаПлатежа");
					РасшифровкаПлатежа.НоваяКолонка("СуммаРасчетов");
					РасшифровкаПлатежа.НоваяКолонка("СтавкаНДС");
		
		
					РасшифровкаПлатежа.НоваяСтрока();
					РасшифровкаПлатежа.СуммаПлатежа = ТЗ.СуммаДокумента;
					РасшифровкаПлатежа.СуммаРасчетов = ТЗ.СуммаДокумента;
					РасшифровкаПлатежа.СтавкаНДС = "БезНДС";
					
					ИсходящиеДанные = СоздатьОбъект("СписокЗначений");
					ИсходящиеДанные.Установить("РасшифровкаПлатежа", РасшифровкаПлатежа);
					ИсходящиеДанные.Установить("ПоДаннымПродавца",  ТЗ.ПоДаннымПродавца);
		
					ВыгрузитьПоПравилу(ТЗ,,ИсходящиеДанные,,"ПриходнаяВедомость_в_РасходИзКассыРозница");
		
					
				КонецЦикла;
				
				КонецЕсли;
				
				

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_ПриходнаяВедомость_в_РасходИзКассыРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_ПриходнаяВедомость_в_РасходИзКассыРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Документ_ПриходнаяВедомость_в_РасходИзКассыРозница()

Функция ПВД_ПередОбработкойПравила_Документ_РасходнаяНакладнаяВ_ПН_Розница(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(Параметры.Код) = 0  Тогда
			Отказ = 1;
			Документ = CreateObject("Документ.РасходнаяНакладная");
			Если Документ.НайтиПоНомеру(Параметры.Код, ДатаОкончания)=1 Тогда
				ВыгрузитьПоПравилу(Документ.ТекущийДокумент(),,Документ.ТекущийДокумент(),,"РасходнаяНакладнаяВПриходнаяНакладнаяРозница");
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_РасходнаяНакладнаяВ_ПН_Розница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Документ_РасходнаяНакладнаяВ_ПН_Розница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Документ_РасходнаяНакладнаяВ_ПН_Розница()

Функция ПВД_ПередВыгрузкойОбъекта_Документ_СпецификацияКДоговору(
			ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(Параметры.Код) = 0  Тогда
			Отказ = 1;
			Документ = CreateObject("Документ.УМК_Спецификация");
			Если Документ.НайтиПоНомеру(Параметры.Код, ДатаОкончания)=1 Тогда
				ВыгрузитьПоПравилу(Документ.ТекущийДокумент(),,Документ.ТекущийДокумент(),,"СпецификацияКДоговору");
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередВыгрузкойОбъекта_Документ_СпецификацияКДоговору", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередВыгрузкойОбъекта_Документ_СпецификацияКДоговору" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередВыгрузкойОбъекта_Документ_СпецификацияКДоговору()

Функция ПВД_ПередОбработкойПравила_Регистр_СхемыРасчетаЦенНоменклатуры(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


			
			Номенклатура = CreateObject("Справочник.ТМЦ");
			Номенклатура.ВыбратьЭлементы();
			
			Элементов = 0;
			
			Сообщить("Начало - " + Строка(ТекущееВремя()));
			
			Пока Номенклатура.ПолучитьЭлемент(1) = 1 Цикл 
				
				Цены = CreateObject("Справочник.Цены");
				Цены.ИспользоватьВладельца(Номенклатура.ТекущийЭлемент());
				Цены.ВыбратьЭлементы();
				
				Пока Цены.ПолучитьЭлемент(1) = 1 Цикл
					
					Если ПустоеЗначение(Цены.КатегорияЦены) = 1 Тогда
						Продолжить
					КонецЕсли;
					
					//Получим дату значения период реквизитов
					//Схема 					
					СписокСхем = СоздатьОбъект("ТаблицаЗначений");
					СписокСхем.НоваяКолонка("Номенклатура");
					СписокСхем.НоваяКолонка("ВидЦен");
					СписокСхем.НоваяКолонка("Период");
					СписокСхем.НоваяКолонка("Схема");
					СписокСхем.НоваяСтрока();
					
					СписокСхем.Номенклатура = Цены.Владелец;
					СписокСхем.ВидЦен = Цены.КатегорияЦены;
					СписокСхем.Период = Параметры.ПериодВыгрузки;
					СписокСхем.Схема = Цены.СхемаЦенообразования.Получить(Параметры.ПериодВыгрузки);
					
					ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокСхем,,"СхемыРасчетаЦенНоменклатуры");
				КонецЦикла;	
			КонецЦикла;
			

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_СхемыРасчетаЦенНоменклатуры", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_СхемыРасчетаЦенНоменклатуры" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_СхемыРасчетаЦенНоменклатуры()

Функция ПВД_ПередОбработкойПравила_Регистр_ЦеныИСхемыЗаДень(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


			
			Номенклатура = CreateObject("Справочник.ТМЦ");
			Номенклатура.ВыбратьЭлементы();
			
			Пока Номенклатура.ПолучитьЭлемент(1) = 1 Цикл 
				
				Цены = CreateObject("Справочник.Цены");
				Цены.ИспользоватьВладельца(Номенклатура.ТекущийЭлемент());
				Цены.ВыбратьЭлементы();
				
				Пока Цены.ПолучитьЭлемент(1) = 1 Цикл
					//Получим дату значения период реквизитов
					
					//Цена
					Пер=СоздатьОбъект("Периодический"); 
					Пер.ИспользоватьОбъект("цена",Цены); 
					Пер.ОбратныйПоряДок();
					Пер.ВыбратьЗначения();
					Если Пер.ПолучитьЗначение()=1 Тогда
						СтараяДата=Пер.ДатаЗнач;
						Если Параметры.ПериодВыгрузки  - СтараяДата = 0 Тогда
							СписокЦен = СоздатьОбъект("ТаблицаЗначений");
							СписокЦен.НоваяКолонка("Номенклатура");
							СписокЦен.НоваяКолонка("ВидЦен");
							СписокЦен.НоваяКолонка("Период");
							СписокЦен.НоваяКолонка("Цена");
							СписокЦен.НоваяКолонка("ЕдиницаИзмерения");
							СписокЦен.НоваяСтрока();
							СписокЦен.Номенклатура = Цены.Владелец;
							СписокЦен.ВидЦен = Цены.КатегорияЦены;
							СписокЦен.Период = Параметры.ПериодВыгрузки;
							СписокЦен.Цена = Цены.Цена.Получить(Параметры.ПериодВыгрузки);
							СписокЦен.ЕдиницаИзмерения = Цены.Единица.Получить(Параметры.ПериодВыгрузки);
							ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокЦен,,"ЦеныНоменклатуры");
						КонецЕсли;
					КонецЕсли;
		    
		            //Схема
		            Пер.ИспользоватьОбъект("СхемаЦенообразования",Цены); 
					Пер.ОбратныйПоряДок();
					Пер.ВыбратьЗначения();
					Если Пер.ПолучитьЗначение()=1 Тогда
						СтараяДата=Пер.ДатаЗнач;
						СтараяДата=Пер.ДатаЗнач;
						Если Параметры.ПериодВыгрузки - СтараяДата = 0 Тогда
							СписокСхем = СоздатьОбъект("ТаблицаЗначений");
							СписокСхем.НоваяКолонка("Номенклатура");
							СписокСхем.НоваяКолонка("ВидЦен");
							СписокСхем.НоваяКолонка("Период");
							СписокСхем.НоваяКолонка("Схема");
							СписокСхем.НоваяСтрока();
							
							СписокСхем.Номенклатура = Цены.Владелец;
							СписокСхем.ВидЦен = Цены.КатегорияЦены;
							СписокСхем.Период = Параметры.ПериодВыгрузки;
							СписокСхем.Схема = Цены.СхемаЦенообразования.Получить(Параметры.ПериодВыгрузки);
							
							ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокСхем,,"СхемыРасчетаЦенНоменклатуры");
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
			КонецЦикла;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныИСхемыЗаДень", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныИСхемыЗаДень" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_ЦеныИСхемыЗаДень()

Функция ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		// Если параметр Код заполнен тогда выборка номенклатуры в иерархии
		Если ПустоеЗначение(Параметры.Код) = 0 Тогда  		
			
			НоменклатураОбъект = CreateObject("Справочник.ТМЦ");
			
			Если НоменклатураОбъект.НайтиПоКоду(Параметры.Код) = 1 Тогда
				
				Группа = НоменклатураОбъект.ТекущийЭлемент();
				Запрос = СоздатьОбъект("Запрос");
				ТекстЗапроса = 
				"//{{ЗАПРОС()
				|ОбрабатыватьДокументы все;
				|ТекущийЭлемент = Справочник.ТМЦ.ТекущийЭлемент;
				|Группировка ТекущийЭлемент без групп;
				|Условие(ТекущийЭлемент В Группа);
				|"//}}ЗАПРОС
				;
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
					Пока Запрос.Группировка(1) = 1 Цикл
						Номенклатура = Запрос.ТекущийЭлемент;
						
						Цены = CreateObject("Справочник.Цены");
						Цены.ИспользоватьВладельца(Номенклатура.ТекущийЭлемент());
						Цены.ВыбратьЭлементы();
						
						Пока Цены.ПолучитьЭлемент(1) = 1 Цикл
							
							Если ПустоеЗначение(Цены.КатегорияЦены) = 1 Тогда
								Продолжить;
							КонецЕсли;
							
							СписокЦен = СоздатьОбъект("ТаблицаЗначений");
							СписокЦен.НоваяКолонка("Номенклатура");
							СписокЦен.НоваяКолонка("ВидЦен");
							СписокЦен.НоваяКолонка("Период");
							СписокЦен.НоваяКолонка("Цена");
							СписокЦен.НоваяКолонка("ЕдиницаИзмерения");
							СписокЦен.НоваяСтрока();
							СписокЦен.Номенклатура = Цены.Владелец;
							СписокЦен.ВидЦен = Цены.КатегорияЦены;
							СписокЦен.Период = Параметры.ПериодВыгрузки;
							СписокЦен.Цена = Цены.Цена.Получить(Параметры.ПериодВыгрузки);
							СписокЦен.ЕдиницаИзмерения = Цены.Единица.Получить(Параметры.ПериодВыгрузки);
							
							ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокЦен,,"ЦеныНоменклатуры");
							
						КонецЦикла;	// По выборке цен 		
					КонецЦикла; // По Выборке запроса
				КонецЕсли; // Если запрос не пустой
			КонецЕсли; // Если нашли наменклатуру
		КонецЕсли;//По коду

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры()

Функция ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Номенклатура_Цена(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		// Если параметр Код заполнен тогда выборка номенклатуры в иерархии
		Если ПустоеЗначение(Параметры.Код) = 0 Тогда 
			
			КодСтрока = Параметры.Код;
			
			Список = глРазложитьСтрокуВСписок(КодСтрока, ";");
			
			Для Инд = 1 По Список.РазмерСписка() Цикл
				
				Код = Список.ПолучитьЗначение(Инд);
				Поз = Найти(Код,":");
				
				Если Поз <> 0 Тогда
					
					КодНоменклатуры = СокрЛП(Лев(Код,Поз-1));
					КодКатегорииЦены = СокрЛП(Сред(Код,Поз+1,9));
					
					НоменклатураОбъект = CreateObject("Справочник.ТМЦ");
					
					Если (НоменклатураОбъект.НайтиПоКоду(КодНоменклатуры) = 1) И (ПустоеЗначение(КодКатегорииЦены) = 0) Тогда
						
						Номенклатура = НоменклатураОбъект.ТекущийЭлемент();
						
						Цены = CreateObject("Справочник.Цены");
						Цены.ИспользоватьВладельца(Номенклатура);
						Цены.ВыбратьЭлементы();
						  
						Пока Цены.ПолучитьЭлемент(1) = 1 Цикл
							
							Если Цены.КатегорияЦены.Код <> КодКатегорииЦены Тогда
								Продолжить;
							КонецЕсли;
							    
							СписокЦен = СоздатьОбъект("ТаблицаЗначений");
							СписокЦен.НоваяКолонка("Номенклатура");
							СписокЦен.НоваяКолонка("ВидЦен");
							СписокЦен.НоваяКолонка("Период");
							СписокЦен.НоваяКолонка("Цена");
							СписокЦен.НоваяКолонка("ЕдиницаИзмерения");
							СписокЦен.НоваяСтрока();
							СписокЦен.Номенклатура = Цены.Владелец;
							СписокЦен.ВидЦен = Цены.КатегорияЦены;
							СписокЦен.Период = Параметры.ПериодВыгрузки;
							СписокЦен.Цена = Цены.Цена.Получить(Параметры.ПериодВыгрузки);
							СписокЦен.ЕдиницаИзмерения = Цены.Единица.Получить(Параметры.ПериодВыгрузки);
							
							ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокЦен,,"ЦеныНоменклатуры");
							
						КонецЦикла;	// По выборке цен 		
					КонецЕсли; // Если нашли наменклатуру
				КонецЕсли;// По разделителю ;
			КонецЦикла;//По списку
		КонецЕсли;//По коду

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Номенклатура_Цена", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Номенклатура_Цена" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Номенклатура_Цена()

Функция ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Продукция(
			ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)


	Отказ = 0;


	Попытка


		// Если параметр Код заполнен тогда выборка номенклатуры в иерархии
		 	НоменклатураОбъект = CreateObject("Справочник.ТМЦ");
			
			Если НоменклатураОбъект.НайтиПоКоду("00017") = 1 Тогда
				
				Группа = НоменклатураОбъект.ТекущийЭлемент();
				Запрос = СоздатьОбъект("Запрос");
				ТекстЗапроса = 
				"//{{ЗАПРОС()
				|ОбрабатыватьДокументы все;
				|ТекущийЭлемент = Справочник.ТМЦ.ТекущийЭлемент;
				|Группировка ТекущийЭлемент без групп;
				|Условие(ТекущийЭлемент В Группа);
				|"//}}ЗАПРОС
				;
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
					Пока Запрос.Группировка(1) = 1 Цикл
						Номенклатура = Запрос.ТекущийЭлемент;
						
						Цены = CreateObject("Справочник.Цены");
						Цены.ИспользоватьВладельца(Номенклатура.ТекущийЭлемент());
						Цены.ВыбратьЭлементы();
						
						Пока Цены.ПолучитьЭлемент(1) = 1 Цикл
							
							Если ПустоеЗначение(Цены.КатегорияЦены) = 1 Тогда
								Продолжить;
							КонецЕсли;
							
							СписокЦен = СоздатьОбъект("ТаблицаЗначений");
							СписокЦен.НоваяКолонка("Номенклатура");
							СписокЦен.НоваяКолонка("ВидЦен");
							СписокЦен.НоваяКолонка("Период");
							СписокЦен.НоваяКолонка("Цена");
							СписокЦен.НоваяКолонка("ЕдиницаИзмерения");
							СписокЦен.НоваяСтрока();
							СписокЦен.Номенклатура = Цены.Владелец;
							СписокЦен.ВидЦен = Цены.КатегорияЦены;
							СписокЦен.Период = Параметры.ПериодВыгрузки;
							СписокЦен.Цена = Цены.Цена.Получить(Параметры.ПериодВыгрузки);
							СписокЦен.ЕдиницаИзмерения = Цены.Единица.Получить(Параметры.ПериодВыгрузки);
							
							ВыгрузитьПоПравилу(Цены.ТекущийЭлемент(),,СписокЦен,,"ЦеныНоменклатуры");
							
						КонецЦикла;	// По выборке цен 		
					КонецЦикла; // По Выборке запроса
				КонецЕсли; // Если запрос не пустой
			КонецЕсли; // Если нашли наменклатуру

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Продукция", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Продукция" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПВД_ПередОбработкойПравила_Регистр_ЦеныНоменклатуры_Продукция()

Функция ПКС_ПередВыгрузкой_БанковскиеСчета_Код_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Формат(Источник.Код, "Ч(0)9.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_БанковскиеСчета_Код_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_БанковскиеСчета_Код_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_БанковскиеСчета_Код_Свойство3()

Функция ПКС_ПередВыгрузкой_БанковскиеСчета_НомерСчета_Реквизит5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = СокрЛП(Источник.НомерСчета);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_БанковскиеСчета_НомерСчета_Реквизит5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_БанковскиеСчета_НомерСчета_Реквизит5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_БанковскиеСчета_НомерСчета_Реквизит5()

Функция ПКС_ПередВыгрузкой_ВалютаГрн_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "980";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВалютаГрн_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВалютаГрн_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВалютаГрн_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_ХозяйственнаяОперация_Реквизит4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВводНачальныхОстатков";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_ХозяйственнаяОперация_Реквизит4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_ХозяйственнаяОперация_Реквизит4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_ХозяйственнаяОперация_Реквизит4()

Функция ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_РазделУчета_Реквизит3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Запасы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_РазделУчета_Реквизит3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_РазделУчета_Реквизит3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_РазделУчета_Реквизит3()

Функция ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Комментарий_Реквизит1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "##Перенесено из 1с77##. Ввод остатков рагистра ""ОстаткиТоваровВРознице.""";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Комментарий_Реквизит1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Комментарий_Реквизит1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Комментарий_Реквизит1()

Функция ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Проведен_Свойство20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Проведен_Свойство20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Проведен_Свойство20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВводНачальныхОстатковТоваровВРознице_Проведен_Свойство20()

Функция ПКС_ПередВыгрузкой_ВидыУпаковки_Код_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)9.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВидыУпаковки_Код_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВидыУпаковки_Код_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВидыУпаковки_Код_Свойство4()

Функция ПКО_ПриВыгрузке_ВозвратОтПокупателя(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ВозвратОтПокупателя", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ВозвратОтПокупателя" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ВозвратОтПокупателя()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Кратность_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Кратность_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Кратность_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Кратность_Реквизит11()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_НалогообложениеНДС_Реквизит23(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_НалогообложениеНДС_Реквизит23", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_НалогообложениеНДС_Реквизит23" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_НалогообложениеНДС_Реквизит23()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ВидОперации_Реквизит20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВозвратОтПокупателя";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ВидОперации_Реквизит20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ВидОперации_Реквизит20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ВидОперации_Реквизит20()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СхемаРасчетаБонусов_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.ФлРучногоИзмСхемыРБ = 1 Тогда
			Значение = Источник.СхемаРБ
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СхемаРасчетаБонусов_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СхемаРасчетаБонусов_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СхемаРасчетаБонусов_Реквизит15()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Подразделение_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Подразделение_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Подразделение_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Подразделение_Реквизит19()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Организация_Реквизит22(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Организация_Реквизит22", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Организация_Реквизит22" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Организация_Реквизит22()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СуммаВключаетНДС_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СуммаВключаетНДС_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СуммаВключаетНДС_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_СуммаВключаетНДС_Реквизит18()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ПоложениеСклада_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВТабличнойЧасти";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ПоложениеСклада_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ПоложениеСклада_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ПоложениеСклада_Реквизит24()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ХозяйственнаяОперация_Реквизит21(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВозвратОтПокупателя";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ХозяйственнаяОперация_Реквизит21", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ХозяйственнаяОперация_Реквизит21" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_ХозяйственнаяОперация_Реквизит21()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтруктурнаяЕдиница_Реквизит39(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(ОбъектКоллекции.Склад) = 1 Тогда
			ОбъектКоллекции.Склад = Источник.МестоХранения;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтруктурнаяЕдиница_Реквизит39", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтруктурнаяЕдиница_Реквизит39" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтруктурнаяЕдиница_Реквизит39()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтавкаНДС_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ВидНДС;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтавкаНДС_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтавкаНДС_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СтавкаНДС_Реквизит34()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_Характеристика_Реквизит31(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВУП<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВУП, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_Характеристика_Реквизит31", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_Характеристика_Реквизит31" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_Характеристика_Реквизит31()

Функция ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СуммаБезСкидки_Реквизит41(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ОбъектКоллекции.Кво * ОбъектКоллекции.ЦенаБезСкидки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СуммаБезСкидки_Реквизит41", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СуммаБезСкидки_Реквизит41" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратОтПокупателя_Запасы_СуммаБезСкидки_Реквизит41()

Функция ПКО_ПередВыгрузкой_ВозвратТовараПоставщикуРозница(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = 1;
		Если (Источник.КатегорияЦен.Розница = 1)  И (ПустоеЗначение(Источник.Контрагент.ФирмаПрихода.Получить(Источник.ДатаДок)) = 0) Тогда
			Отказ = 0
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ВозвратТовараПоставщикуРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ВозвратТовараПоставщикуРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_ВозвратТовараПоставщикуРозница()

Функция ПКО_ПриВыгрузке_ВозвратТовараПоставщикуРозница(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "СуммаСверки");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Источник.ПоДаннымПродавца);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ВозвратТовараПоставщикуРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ВозвратТовараПоставщикуРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ВозвратТовараПоставщикуРозница()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СтруктурнаяЕдиница_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Контрагент.МестоХранения.Получить(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СтруктурнаяЕдиница_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СтруктурнаяЕдиница_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СтруктурнаяЕдиница_Реквизит14()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Номер_Свойство7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Лев(Источник.НомерДок,2) + "Р" + Прав(Источник.НомерДок,8);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Номер_Свойство7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Номер_Свойство7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Номер_Свойство7()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ВидОперации_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВозвратПоставщику";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ВидОперации_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ВидОперации_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ВидОперации_Реквизит11()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СуммаВключаетНДС_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СуммаВключаетНДС_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СуммаВключаетНДС_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_СуммаВключаетНДС_Реквизит30()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Организация_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Контрагент.ФирмаПрихода.Получить(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Организация_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Организация_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Организация_Реквизит17()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_НалогообложениеНДС_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "НеОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_НалогообложениеНДС_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_НалогообложениеНДС_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_НалогообложениеНДС_Реквизит18()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Кратность_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Кратность_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Кратность_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Кратность_Реквизит29()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ХозяйственнаяОперация_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВозвратПоставщику";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ХозяйственнаяОперация_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ХозяйственнаяОперация_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_ХозяйственнаяОперация_Реквизит28()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_Характеристика_Реквизит23(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если (ПустоеЗначение(ОбъектКоллекции.ВУП)=0) И (ОбъектКоллекции.ВУП<> Перечисление.ВидыУпаковки.нет)  Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВУП, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_Характеристика_Реквизит23", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_Характеристика_Реквизит23" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_Характеристика_Реквизит23()

Функция ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_СтавкаНДС_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "БезНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_СтавкаНДС_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_СтавкаНДС_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ВозвратТовараПоставщикуРозница_Запасы_СтавкаНДС_Реквизит34()

Функция ПКС_ПередВыгрузкой_ГруппаПродавцы_Наименование_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцы_Наименование_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцы_Наименование_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ГруппаПродавцы_Наименование_Свойство1()

Функция ПКС_ПередВыгрузкой_ГруппаПродавцы_ЭтоГруппа_Свойство2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцы_ЭтоГруппа_Свойство2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцы_ЭтоГруппа_Свойство2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ГруппаПродавцы_ЭтоГруппа_Свойство2()

Функция ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Код_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПРОД00001";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Код_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Код_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Код_Свойство3()

Функция ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Наименование_Свойство2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Наименование_Свойство2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Наименование_Свойство2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_Наименование_Свойство2()

Функция ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_ЭтоГруппа_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_ЭтоГруппа_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_ЭтоГруппа_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ГруппаПродавцыСотрудники_ЭтоГруппа_Свойство1()

Функция ПКС_ПередВыгрузкой_ДанныеСверкиСРеализаторомВРознице_Активность_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДанныеСверкиСРеализаторомВРознице_Активность_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДанныеСверкиСРеализаторомВРознице_Активность_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДанныеСверкиСРеализаторомВРознице_Активность_Свойство3()

Функция ПКО_ПриВыгрузке_ДоговорыКонтрагентов(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "КонтрагентПокупатель_Код");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", ?(ПустоеЗначение(Источник.КонтрагентПокупатель) = 1,"",Формат(Источник.КонтрагентПокупатель.Код, "Ч(0)9.0")));
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ДоговорыКонтрагентов", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ДоговорыКонтрагентов" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ДоговорыКонтрагентов()

Функция ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ДоговорПодписан_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ДоговорПодписан_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ДоговорПодписан_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ДоговорПодписан_Реквизит9()

Функция ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_Организация_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_Организация_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_Организация_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_Организация_Реквизит7()

Функция ПКО_ПриВыгрузке_ДоговорыКонтрагентов_ПриходнаяНакладная(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ДоговорыКонтрагентов_ПриходнаяНакладная", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ДоговорыКонтрагентов_ПриходнаяНакладная" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ДоговорыКонтрагентов_ПриходнаяНакладная()

Функция ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_ДоговорПодписан_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_ДоговорПодписан_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_ДоговорПодписан_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_ДоговорПодписан_Реквизит9()

Функция ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_НомерДоговора_Реквизит1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.НомерДок + " від " + Строка(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_НомерДоговора_Реквизит1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_НомерДоговора_Реквизит1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_НомерДоговора_Реквизит1()

Функция ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_Наименование_Свойство6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = СокрЛП(?(ПустоеЗначение(Источник.НазваниеДоговора) =1, "", СокрЛП(Источник.НазваниеДоговора)) + " " + ?(ПустоеЗначение(Источник.НомерДоговора)=1,"", СокрЛП(Источник.НомерДоговора)));

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_Наименование_Свойство6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_Наименование_Свойство6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ДоговорыКонтрагентов_ПриходнаяНакладная_Наименование_Свойство6()

Функция ПКС_ПередВыгрузкой_ЕдиницыИзмерения_Наименование_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Наименование = "г." Тогда Значение = "Грам"
		ИначеЕсли Источник.Наименование = "кг." Тогда Значение = "кг"
		ИначеЕсли Источник.Наименование = "км." Тогда Значение = "км"
		ИначеЕсли Источник.Наименование = "л." Тогда Значение = "л"
		ИначеЕсли Источник.Наименование = "м." Тогда Значение = "м"
		ИначеЕсли Источник.Наименование = "м.кв." Тогда Значение = "м2"
		ИначеЕсли Источник.Наименование = "м.куб." Тогда Значение = "м3"
		ИначеЕсли Источник.Наименование = "пач." Тогда Значение = "пач"
		ИначеЕсли Источник.Наименование = "уп." Тогда Значение = ""
		ИначеЕсли Источник.Наименование = "шт." Тогда Значение = "шт"
		ИначеЕсли Источник.Наименование = "ящ." Тогда Значение = "ящ" 
		Иначе
			Значение = Источник.Наименование;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЕдиницыИзмерения_Наименование_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЕдиницыИзмерения_Наименование_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЕдиницыИзмерения_Наименование_Свойство3()

Функция ПКО_ПриВыгрузке_ЗаданиеНаПроизводство(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаданиеНаПроизводство", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаданиеНаПроизводство" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ЗаданиеНаПроизводство()

Функция ПКО_ПриВыгрузке_ЗаданиеНаУпаковку(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		ВыгрузитьПоПравилу(Источник.Контрагент,,Источник.Контрагент,,"Контрагенты");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаданиеНаУпаковку", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаданиеНаУпаковку" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ЗаданиеНаУпаковку()

Функция ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Организация_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Организация_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Организация_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Организация_Реквизит19()

Функция ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Запасы_Характеристика_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Запасы_Характеристика_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Запасы_Характеристика_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаданиеНаУпаковку_Запасы_Характеристика_Реквизит17()

Функция ПКО_ПриВыгрузке_ЗаказНаПроизводство(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказНаПроизводство", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказНаПроизводство" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ЗаказНаПроизводство()

Функция ПКС_ПередВыгрузкой_ЗаказНаПроизводство_ВидОперации_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Сборка";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_ВидОперации_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_ВидОперации_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказНаПроизводство_ВидОперации_Реквизит15()

Функция ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Организация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Организация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Организация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Организация_Реквизит16()

Функция ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Финиш_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДатаДок + 6*60*60*24;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Финиш_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Финиш_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Финиш_Реквизит13()

Функция ПКС_ПередВыгрузкой_ЗаказНаПроизводство_СтруктурнаяЕдиница_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_СтруктурнаяЕдиница_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_СтруктурнаяЕдиница_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказНаПроизводство_СтруктурнаяЕдиница_Реквизит17()

Функция ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Старт_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДатаДок;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Старт_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Старт_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказНаПроизводство_Старт_Реквизит12()

Функция ПКО_ПриВыгрузке_ЗаказПокупателя(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		ВыгрузитьПоПравилу(Источник.Контрагент,,Источник.Контрагент,,"Контрагенты");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказПокупателя", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказПокупателя" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ЗаказПокупателя()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Курс_Реквизит68(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Курс_Реквизит68", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Курс_Реквизит68" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Курс_Реквизит68()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Организация_Реквизит74(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Организация_Реквизит74", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Организация_Реквизит74" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Организация_Реквизит74()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_НалогообложениеНДС_Реквизит72(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_НалогообложениеНДС_Реквизит72", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_НалогообложениеНДС_Реквизит72" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_НалогообложениеНДС_Реквизит72()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Кратность_Реквизит69(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Кратность_Реквизит69", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Кратность_Реквизит69" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Кратность_Реквизит69()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_import77_Реквизит73(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значени = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_import77_Реквизит73", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_import77_Реквизит73" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_import77_Реквизит73()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_СтруктурнаяЕдиницаПродажи_Реквизит71(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_СтруктурнаяЕдиницаПродажи_Реквизит71", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_СтруктурнаяЕдиницаПродажи_Реквизит71" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_СтруктурнаяЕдиницаПродажи_Реквизит71()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_ВидОперации_Реквизит70(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ЗаказНаПродажу";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_ВидОперации_Реквизит70", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_ВидОперации_Реквизит70" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_ВидОперации_Реквизит70()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_СуммаВключаетНДС_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_СуммаВключаетНДС_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_СуммаВключаетНДС_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_СуммаВключаетНДС_Реквизит28()

Функция ПКС_ПриВыгрузке_ЗаказПокупателя_Запасы_Характеристика_Реквизит66(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ВидСубконто, Субконто, Пусто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПриВыгрузке_ЗаказПокупателя_Запасы_Характеристика_Реквизит66", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПриВыгрузке_ЗаказПокупателя_Запасы_Характеристика_Реквизит66" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПриВыгрузке_ЗаказПокупателя_Запасы_Характеристика_Реквизит66()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_СтавкаНДС_Реквизит56(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение =  Источник.ВидНДС;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_СтавкаНДС_Реквизит56", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_СтавкаНДС_Реквизит56" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_СтавкаНДС_Реквизит56()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_ХарактеристикаНоменклатурыН_Реквизит67(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковкиН, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_ХарактеристикаНоменклатурыН_Реквизит67", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_ХарактеристикаНоменклатурыН_Реквизит67" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_ХарактеристикаНоменклатурыН_Реквизит67()

Функция ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_Тара_Реквизит65(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		ВыгрузитьТолькоСсылку = 1;
		ВыгрузитьОбъект = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_Тара_Реквизит65", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_Тара_Реквизит65" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПокупателя_Запасы_Тара_Реквизит65()

Функция ПКО_ПриВыгрузке_ЗаказПоставщику(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказПоставщику", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ЗаказПоставщику" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ЗаказПоставщику()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_Кратность_Реквизит35(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Кратность_Реквизит35", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Кратность_Реквизит35" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_Кратность_Реквизит35()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_ДатаПоступления_Реквизит42(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДатаДок + 5;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ДатаПоступления_Реквизит42", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ДатаПоступления_Реквизит42" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_ДатаПоступления_Реквизит42()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_НалогообложениеНДС_Реквизит40(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_НалогообложениеНДС_Реквизит40", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_НалогообложениеНДС_Реквизит40" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_НалогообложениеНДС_Реквизит40()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_Курс_Реквизит4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Курс_Реквизит4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Курс_Реквизит4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_Курс_Реквизит4()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеЗаказаПокупателя_Реквизит44(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеЗаказаПокупателя_Реквизит44", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеЗаказаПокупателя_Реквизит44" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеЗаказаПокупателя_Реквизит44()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_ВидОперации_Реквизит41(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ЗаказНаЗакупку";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ВидОперации_Реквизит41", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ВидОперации_Реквизит41" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_ВидОперации_Реквизит41()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеДатыПоступления_Реквизит43(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеДатыПоступления_Реквизит43", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеДатыПоступления_Реквизит43" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_ПоложениеДатыПоступления_Реквизит43()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_ХозяйственнаяОперация_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		//Значение = "ЗаказНаЗакупку";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ХозяйственнаяОперация_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_ХозяйственнаяОперация_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_ХозяйственнаяОперация_Реквизит34()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_СтруктурнаяЕдиница_Реквизит36(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_СтруктурнаяЕдиница_Реквизит36", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_СтруктурнаяЕдиница_Реквизит36" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_СтруктурнаяЕдиница_Реквизит36()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_Организация_Реквизит37(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Организация_Реквизит37", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Организация_Реквизит37" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_Организация_Реквизит37()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_СтавкаНДС_Реквизит53(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "БезНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_СтавкаНДС_Реквизит53", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_СтавкаНДС_Реквизит53" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_СтавкаНДС_Реквизит53()

Функция ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_ДатаПоступления_Реквизит52(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДатаДок + 5;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_ДатаПоступления_Реквизит52", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_ДатаПоступления_Реквизит52" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЗаказПоставщику_Запасы_ДатаПоступления_Реквизит52()

Функция ПКО_ПриВыгрузке_ИнвентаризацияЗапасов(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ИнвентаризацияЗапасов", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ИнвентаризацияЗапасов" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ИнвентаризацияЗапасов()

Функция ПКС_ПередВыгрузкой_ИнвентаризацияЗапасов_Запасы_Характеристика_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ИнвентаризацияЗапасов_Запасы_Характеристика_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ИнвентаризацияЗапасов_Запасы_Характеристика_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ИнвентаризацияЗапасов_Запасы_Характеристика_Реквизит19()

Функция ПКС_ПередВыгрузкой_Кассы_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Формат(Источник.Код, "Ч(0)9.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Кассы_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Кассы_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Кассы_Код_Свойство1()

Функция ПКО_ПередВыгрузкой_КассыККМ(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = ?(Источник.ИспользуетсяВРознице = 0,1,0); 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_КассыККМ", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_КассыККМ" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_КассыККМ()

Функция ПКС_ПередВыгрузкой_КассыККМ_ИспользоватьБезПодключенияОборудования_Реквизит5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_ИспользоватьБезПодключенияОборудования_Реквизит5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_ИспользоватьБезПодключенияОборудования_Реквизит5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КассыККМ_ИспользоватьБезПодключенияОборудования_Реквизит5()

Функция ПКС_ПередВыгрузкой_КассыККМ_ТипКассы_Реквизит6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "АвтономнаяККМ";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_ТипКассы_Реквизит6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_ТипКассы_Реквизит6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КассыККМ_ТипКассы_Реквизит6()

Функция ПКС_ПередВыгрузкой_КассыККМ_Подразделение_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_Подразделение_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_Подразделение_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КассыККМ_Подразделение_Реквизит8()

Функция ПКС_ПередВыгрузкой_КассыККМ_СтруктурнаяЕдиница_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_СтруктурнаяЕдиница_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КассыККМ_СтруктурнаяЕдиница_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КассыККМ_СтруктурнаяЕдиница_Реквизит7()

Функция ПКС_ПередВыгрузкой_КлассификаторЕдиницИзмерения_Наименование_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Наименование = "г." Тогда Значение = "Грам"
		ИначеЕсли Источник.Наименование = "кг." Тогда Значение = "кг"
		ИначеЕсли Источник.Наименование = "км." Тогда Значение = "км"
		ИначеЕсли Источник.Наименование = "л." Тогда Значение = "л"
		ИначеЕсли Источник.Наименование = "м." Тогда Значение = "м"
		ИначеЕсли Источник.Наименование = "м.кв." Тогда Значение = "м2"
		ИначеЕсли Источник.Наименование = "м.куб." Тогда Значение = "м3"
		ИначеЕсли Источник.Наименование = "пач." Тогда Значение = "пач"
		ИначеЕсли Источник.Наименование = "уп." Тогда Значение = ""
		ИначеЕсли Источник.Наименование = "шт." Тогда Значение = "шт"
		ИначеЕсли Источник.Наименование = "ящ." Тогда Значение = "ящ"  
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КлассификаторЕдиницИзмерения_Наименование_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КлассификаторЕдиницИзмерения_Наименование_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КлассификаторЕдиницИзмерения_Наименование_Свойство1()

Функция ПКС_ПередВыгрузкой_КлассификаторУКТВЭД_Вид_Реквизит5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "КодТовара";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КлассификаторУКТВЭД_Вид_Реквизит5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КлассификаторУКТВЭД_Вид_Реквизит5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КлассификаторУКТВЭД_Вид_Реквизит5()

Функция ПКО_ПриВыгрузке_Контрагенты(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		РезультатыСверки = СоздатьОбъект("ТаблицаЗначений");
		РезультатыСверки.НоваяКолонка("ЭлементСправочника");
		РезультатыСверки.НоваяКолонка("Комментарий");
		РезультатыСверки.НоваяКолонка("Сумма");
		РезультатыСверки.НоваяКолонка("СуммаНал");
		РезультатыСверки.НоваяКолонка("ПериодСверки");
		РезультатыСверки.НоваяКолонка("Активность");
		РезультатыСверки.НоваяКолонка("Период");
		
		РезультатыСверки.НоваяСтрока();
		РезультатыСверки.ЭлементСправочника = Источник.ТекущийЭлемент();
		РезультатыСверки.Комментарий        = Источник.РезультатСверкиКоммент;
		РезультатыСверки.Сумма              = Источник.РезультатСверкиСумма;
		РезультатыСверки.СуммаНал           = Источник.РезультатСверкиСуммаНал;
		РезультатыСверки.ПериодСверки       = Источник.РезультатСверкиДата;
		РезультатыСверки.Активность         = 1;
		РезультатыСверки.Период             = ДатаОкончания;
		
		ВыгрузитьПоПравилу(Источник.ТекущийЭлемент(),,РезультатыСверки,,"РезультатыСверкиКонтрагентов");
			
		//Периодические реквизты
		ПериодРеквизиты = СоздатьОбъект("ТаблицаЗначений");
		ПериодРеквизиты.НоваяКолонка("ЭлементСправочника");
		ПериодРеквизиты.НоваяКолонка("ВидЦены");
		ПериодРеквизиты.НоваяКолонка("ВидЦеныПрочее");
		ПериодРеквизиты.НоваяКолонка("Глубина");
		ПериодРеквизиты.НоваяКолонка("ГлубинаКредитаПоставщика");
		ПериодРеквизиты.НоваяКолонка("ДатаЦен");
		ПериодРеквизиты.НоваяКолонка("МестоХранения");
		ПериодРеквизиты.НоваяКолонка("ОрганизацияПрихода");
		ПериодРеквизиты.НоваяКолонка("ПроверятьВодителя");
		ПериодРеквизиты.НоваяКолонка("СкидкаВес");
		ПериодРеквизиты.НоваяКолонка("СкидкаВесВак");
		ПериодРеквизиты.НоваяКолонка("Спецификация");
		ПериодРеквизиты.НоваяКолонка("СуммаКредита");
		ПериодРеквизиты.НоваяКолонка("СуммаКредитаПоставщика");
		ПериодРеквизиты.НоваяКолонка("СхемаРасчетаБонуса");
		ПериодРеквизиты.НоваяКолонка("Ф1Округление");
		ПериодРеквизиты.НоваяКолонка("Активность");
		ПериодРеквизиты.НоваяКолонка("Период");
		
		ПериодРеквизиты.НоваяСтрока();
		ПериодРеквизиты.ЭлементСправочника       = Источник.ТекущийЭлемент();
		ПериодРеквизиты.ВидЦены                  = Источник.КатегорияЦен.Получить(ДатаОкончания);
		//ПериодРеквизиты.ВидЦеныПрочее            = Источник..Получить(ДатаОкончания);
		ПериодРеквизиты.Глубина                  = Источник.Глубина.Получить(ДатаОкончания);
		ПериодРеквизиты.ГлубинаКредитаПоставщика = Источник.ГлубинаКредитаПоставщика.Получить(ДатаОкончания);
		ПериодРеквизиты.ДатаЦен                  = Источник.ДатаЦ.Получить(ДатаОкончания);
		ПериодРеквизиты.МестоХранения            = Источник.МестоХранения.Получить(ДатаОкончания);
		ПериодРеквизиты.ОрганизацияПрихода       = Источник.ФирмаПрихода.Получить(ДатаОкончания);
		ПериодРеквизиты.ПроверятьВодителя        = Источник.ПроверятьВодителя.Получить(ДатаОкончания);
		//ПериодРеквизиты.СкидкаВес                = Источник..Получить(ДатаОкончания);
		//ПериодРеквизиты.СкидкаВесВак             = Источник..Получить(ДатаОкончания);
		ПериодРеквизиты.Спецификация             = Источник.Спецификация.Получить(ДатаОкончания);
		ПериодРеквизиты.СуммаКредита             = Источник.СуммаКредита.Получить(ДатаОкончания);
		ПериодРеквизиты.СуммаКредитаПоставщика   = Источник.СуммаКредитаПоставщика.Получить(ДатаОкончания);
		ПериодРеквизиты.СхемаРасчетаБонуса       = Источник.СхемаРасчетаБонуса.Получить(ДатаОкончания);
		ПериодРеквизиты.Ф1Округление             = Источник.Ф1Округление.Получить(ДатаОкончания);
		ПериодРеквизиты.Активность               = 1;
		ПериодРеквизиты.Период                   = ДатаОкончания;
		
		ВыгрузитьПоПравилу(Источник.ТекущийЭлемент(),,ПериодРеквизиты,,"ПериодическиеРеквизитыКонтрагентов");
			

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Контрагенты", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Контрагенты" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_Контрагенты()

Функция ПКС_ПередВыгрузкой_Контрагенты_ВестиРасчетыПоДоговорам_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_ВестиРасчетыПоДоговорам_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_ВестиРасчетыПоДоговорам_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_ВестиРасчетыПоДоговорам_Реквизит28()

Функция ПКС_ПередВыгрузкой_Контрагенты_Покупатель_Реквизит33(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Покупатель_Реквизит33", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Покупатель_Реквизит33" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_Покупатель_Реквизит33()

Функция ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПокупателя_Реквизит38(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыПоАвансамПолученным";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПокупателя_Реквизит38", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПокупателя_Реквизит38" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПокупателя_Реквизит38()

Функция ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПокупателем_Реквизит35(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПокупателями";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПокупателем_Реквизит35", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПокупателем_Реквизит35" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПокупателем_Реквизит35()

Функция ПКС_ПередВыгрузкой_Контрагенты_Код_Свойство11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Формат(Источник.Код, "Ч(0)9.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Код_Свойство11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Код_Свойство11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_Код_Свойство11()

Функция ПКС_ПередВыгрузкой_Контрагенты_Поставщик_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Поставщик_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_Поставщик_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_Поставщик_Реквизит34()

Функция ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПоставщиком_Реквизит37(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПоставщиками";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПоставщиком_Реквизит37", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПоставщиком_Реквизит37" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаРасчетовСПоставщиком_Реквизит37()

Функция ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПоставщику_Реквизит36(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыПоАвансамВыданным";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПоставщику_Реквизит36", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПоставщику_Реквизит36" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Контрагенты_СчетУчетаАвансовПоставщику_Реквизит36()

Функция ПКС_ПередВыгрузкой_КонтрагентыНоменклатуры_Активность_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КонтрагентыНоменклатуры_Активность_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_КонтрагентыНоменклатуры_Активность_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_КонтрагентыНоменклатуры_Активность_Свойство3()

Функция ПКС_ПередВыгрузкой_Маршрут_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Формат(Источник.Код, "Ч(0)5.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Маршрут_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Маршрут_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Маршрут_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Наименование_Ресурс2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДляПечати.Получить(ТекущаяДата());

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Наименование_Ресурс2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Наименование_Ресурс2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Наименование_Ресурс2()

Функция ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Активность_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Активность_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Активность_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Активность_Свойство4()

Функция ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Характеристика_Измерение1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ТекущийЭлемент();

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Характеристика_Измерение1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Характеристика_Измерение1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Характеристика_Измерение1()

Функция ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Период_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ТекущаяДата();

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Период_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Период_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_НаименованиеДляПечатиХарактеристики_Период_Свойство3()

Функция ПКО_ПриВыгрузке_Номенклатура(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		Если Источник.ЭтоГруппа() = 0 Тогда
			
			ПериодРеквизиты = СоздатьОбъект("ТаблицаЗначений");
			ПериодРеквизиты.НоваяКолонка("ЭлементСправочника");
			ПериодРеквизиты.НоваяКолонка("БазовыйВидЦены");
			ПериодРеквизиты.НоваяКолонка("БлокироватьВыписку");
			ПериодРеквизиты.НоваяКолонка("ВычитатьВесУпаковки");
			ПериодРеквизиты.НоваяКолонка("ЕстьКодСинхронизации");
			ПериодРеквизиты.НоваяКолонка("Замес");
			ПериодРеквизиты.НоваяКолонка("Наименование_ф1");
			ПериодРеквизиты.НоваяКолонка("ОдинаковаяПродукцияРазМаркировка");
			ПериодРеквизиты.НоваяКолонка("ПродукцияАналогичныйФарш");
			ПериодРеквизиты.НоваяКолонка("ПроцПотерь");
			ПериодРеквизиты.НоваяКолонка("СхемаРасчетаЗП");
			ПериодРеквизиты.НоваяКолонка("УровеньПередела");
			ПериодРеквизиты.НоваяКолонка("Активность");
			ПериодРеквизиты.НоваяКолонка("Период");
			
			
			ПериодРеквизиты.НоваяСтрока();
			ПериодРеквизиты.ЭлементСправочника               = Источник.ТекущийЭлемент();
			ПериодРеквизиты.БазовыйВидЦены                   = Источник.БазоваяКатегорияЦены.Получить(ДатаОкончания);
			ПериодРеквизиты.БлокироватьВыписку               = Источник.БлокироватьВыписку.Получить(ДатаОкончания);
			ПериодРеквизиты.ВычитатьВесУпаковки              = Источник.вычитатьВесУпаковки.Получить(ДатаОкончания);
			ПериодРеквизиты.ЕстьКодСинхронизации             = Источник.ЕстьКодС.Получить(ДатаОкончания);
			ПериодРеквизиты.Замес                            = Источник.Замес.Получить(ДатаОкончания);
			ПериодРеквизиты.Наименование_ф1                  = Источник.НаименованиеФ1.Получить(ДатаОкончания);
			ПериодРеквизиты.ОдинаковаяПродукцияРазМаркировка = Источник.ОдинаковаяПрРазныеМаркИ.Получить(ДатаОкончания);
			ПериодРеквизиты.ПродукцияАналогичныйФарш         = Источник.ТМЦСТакимЖеФаршемИ.Получить(ДатаОкончания);
			ПериодРеквизиты.ПроцПотерь                       = Источник.ПроцПотерь.Получить(ДатаОкончания);
			ПериодРеквизиты.СхемаРасчетаЗП                   = Источник.СхемаРасчетаЗП.Получить(ДатаОкончания);
			ПериодРеквизиты.УровеньПередела                  = Источник.УровеньПередела.Получить(ДатаОкончания);
			ПериодРеквизиты.Активность                       = 1;
			ПериодРеквизиты.Период                           = ДатаОкончания;
			
			ВыгрузитьПоПравилу(Источник.ТекущийЭлемент(),,ПериодРеквизиты,,"ПериодическиеРеквизитыНоменклатуры");
			
			//Характеристики
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(Источник.ТекущийЭлемент());
			СпрРВУ.ВыбратьЭлементы();
			
			Пока СпрРВУ.ПолучитьЭлемент() = 1 Цикл
				ВыгрузитьПоПравилу(СпрРВУ.ТекущийЭлемент(),,СпрРВУ.ТекущийЭлемент(),,"ХарактеристикиНоменклатуры");
			КонецЦикла;
			
			//Характеристика по умолчанию
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", Источник.ВидУпаковкиПоУмолчанию, 0) = 1 Тогда
				ВыгрузитьПоПравилу(СпрРВУ.ТекущийЭлемент(),,СпрРВУ.ТекущийЭлемент(),,"ХарактеристикаПоУмолчанию");
			Иначе
				ВыгрузитьПоПравилу(Источник,,Источник,,"УдалитьХарактеристикуПоУмолчанию");
			КонецЕсли;
			
			//Контрагенты номенклатуры
			ВыгрузитьПоПравилу(Источник,,Источник,,"УдалитьКонтрагентыНоменклатуры");  //Сначала удалим
			
			Контрагенты = CreateObject("Справочник.КонтрагентыПродукции");
			Контрагенты.ИспользоватьВладельца(Источник.ТекущийЭлемент());
			
			Контрагенты.ВыбратьЭлементы();
			Пока Контрагенты.ПолучитьЭлемент() = 1 Цикл
				Если Контрагенты.ПометкаУдаления() = 0 Тогда
					ВыгрузитьПоПравилу(Контрагенты.ТекущийЭлемент(),,Контрагенты.ТекущийЭлемент(),,"КонтрагентыНоменклатуры");
				КонецЕсли;
			КонецЦикла;
			
			
			//Сроки годности номенклатуры
			СрокиГодности = СоздатьОбъект("ТаблицаЗначений");
			СрокиГодности.НоваяКолонка("Номенклатура");
			СрокиГодности.НоваяКолонка("ЕдВремени");
			СрокиГодности.НоваяКолонка("СрокГодности");
			СрокиГодности.НоваяКолонка("КодЭтикетки");
			
			СрокиГодности.НоваяСтрока();
			СрокиГодности.Номенклатура = Источник.ТекущийЭлемент();
			СрокиГодности.ЕдВремени = Источник.ЕдиницаИзмерения;
			СрокиГодности.СрокГодности = Источник.СрокГодности;
			СрокиГодности.КодЭтикетки = 0;
			
			ВыгрузитьПоПравилу(Источник,,СрокиГодности,,"СрокиГодностиЭтикетки");
				
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Номенклатура", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Номенклатура" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_Номенклатура()

Функция ПКС_ПередВыгрузкой_Номенклатура_НаправлениеДеятельности_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеНаправление";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_НаправлениеДеятельности_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_НаправлениеДеятельности_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_НаправлениеДеятельности_Реквизит30()

Функция ПКС_ПередВыгрузкой_Номенклатура_ИспользоватьХарактеристики_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ИспользоватьХарактеристики_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ИспользоватьХарактеристики_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_ИспользоватьХарактеристики_Реквизит18()

Функция ПКС_ПередВыгрузкой_Номенклатура_СпособПополнения_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ?(СокрЛП(Источник.Счет.Код) = "26","Производство","Закупка");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_СпособПополнения_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_СпособПополнения_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_СпособПополнения_Реквизит29()

Функция ПКС_ПередВыгрузкой_Номенклатура_КатегорияНоменклатуры_Реквизит26(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "БезКатегории";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_КатегорияНоменклатуры_Реквизит26", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_КатегорияНоменклатуры_Реквизит26" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_КатегорияНоменклатуры_Реквизит26()

Функция ПКС_ПередВыгрузкой_Номенклатура_ТипНоменклатуры_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Запас";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ТипНоменклатуры_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ТипНоменклатуры_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_ТипНоменклатуры_Реквизит27()

Функция ПКС_ПередВыгрузкой_Номенклатура_Код_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)11.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_Код_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_Код_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_Код_Свойство4()

Функция ПКС_ПередВыгрузкой_Номенклатура_МетодОценки_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПоСредней";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_МетодОценки_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_МетодОценки_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_МетодОценки_Реквизит28()

Функция ПКС_ПередВыгрузкой_Номенклатура_ВидСтавкиНДС_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "БезНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ВидСтавкиНДС_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_ВидСтавкиНДС_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_ВидСтавкиНДС_Реквизит13()

Функция ПКС_ПередВыгрузкой_Номенклатура_СчетУчетаЗатрат_Реквизит32(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "НезавершенноеПроизводство";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_СчетУчетаЗатрат_Реквизит32", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Номенклатура_СчетУчетаЗатрат_Реквизит32" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Номенклатура_СчетУчетаЗатрат_Реквизит32()

Функция ПКС_ПередВыгрузкой_Организации_Код_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Код = "0"  Тогда
			Значение = "000000101";
		Иначе
			Значение = "УМ-" + Формат(Число(Источник.Код), "Ч(0)6.0");
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Организации_Код_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Организации_Код_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Организации_Код_Свойство3()

Функция ПКО_ПриВыгрузке_ОстаткиВзаиморасчетовБонусы(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Остатки = ВходящиеДанные.ПолучитьЗначение(2);
		//Остатки.ВыбратьСтроку();
		Остатки.ВыбратьСтроки();
		Стр = "";
		Пока Остатки.ПолучитьСтроку() = 1 Цикл
			Стр = Стр + 
			Строка(Остатки.Организация.Код)+
			"," +Строка(Остатки.Контрагент.Код) +
			"," +Строка(Остатки.Договор.НомерДок) +
			"," +Строка(Остатки.Договор.ДатаДок) +
			"," +Строка(Остатки.Валюта.Код) +
			"," +Строка(Остатки.ДолгТек) +
			";";
			
		КонецЦикла;
		
		
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "ХэшИсточника");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Стр);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Период");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Дата(Параметры.ПериодВыгрузки));
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ОстаткиВзаиморасчетовБонусы", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ОстаткиВзаиморасчетовБонусы" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ОстаткиВзаиморасчетовБонусы()

Функция ПКГС_ПередОбработкойВыгрузки_ОстаткиВзаиморасчетовБонусы_ТаблицаРегистров_ТабличнаяЧасть1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, НеЗамещать, НеОчищать)


	Отказ = 0;


	Попытка


		КоллекцияОбъектов = СоздатьОбъект("ТаблицаЗначений");
		КоллекцияОбъектов.НоваяКолонка("Имя");
		
		КоллекцияОбъектов.НоваяСтрока();
		КоллекцияОбъектов.Имя = "ОстаткиВзаиморасчетовБонусы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКГС_ПередОбработкойВыгрузки_ОстаткиВзаиморасчетовБонусы_ТаблицаРегистров_ТабличнаяЧасть1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКГС_ПередОбработкойВыгрузки_ОстаткиВзаиморасчетовБонусы_ТаблицаРегистров_ТабличнаяЧасть1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКГС_ПередОбработкойВыгрузки_ОстаткиВзаиморасчетовБонусы_ТаблицаРегистров_ТабличнаяЧасть1()

Функция ПКС_ПередВыгрузкой_ОстаткиВзаиморасчетовБонусы_Комментарий_Реквизит4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "##Перенесено из 1с77##. Ввод остатков рагистра ""ОстаткиВзаиморасчетовБонусы.""";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ОстаткиВзаиморасчетовБонусы_Комментарий_Реквизит4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ОстаткиВзаиморасчетовБонусы_Комментарий_Реквизит4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ОстаткиВзаиморасчетовБонусы_Комментарий_Реквизит4()

Функция ПКО_ПриВыгрузке_ПеремещениеДС(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПеремещениеДС", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПеремещениеДС" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ПеремещениеДС()

Функция ПКС_ПередВыгрузкой_ПеремещениеДС_Организация_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация"; 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_Организация_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_Организация_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПеремещениеДС_Организация_Реквизит11()

Функция ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредств_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Наличные";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредств_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредств_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредств_Реквизит15()

Функция ПКС_ПередВыгрузкой_ПеремещениеДС_ХозяйственнаяОперация_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПеремещениеДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ХозяйственнаяОперация_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ХозяйственнаяОперация_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПеремещениеДС_ХозяйственнаяОперация_Реквизит13()

Функция ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредствПолучатель_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Наличные";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредствПолучатель_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредствПолучатель_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПеремещениеДС_ТипДенежныхСредствПолучатель_Реквизит16()

Функция ПКС_ПередВыгрузкой_ПеремещениеДС_Статья_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Прочее";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_Статья_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПеремещениеДС_Статья_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПеремещениеДС_Статья_Реквизит12()

Функция ПКС_ПередВыгрузкой_ПолучателиСкидокАкции_Активность_Свойство6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПолучателиСкидокАкции_Активность_Свойство6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПолучателиСкидокАкции_Активность_Свойство6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПолучателиСкидокАкции_Активность_Свойство6()

Функция ПКО_ПриВыгрузке_Пользователи(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Пользователи", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Пользователи" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_Пользователи()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ВариантЗаполненияРасшифровки_Реквизит4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ВариантЗаполненияРасшифровки_Реквизит4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ВариантЗаполненияРасшифровки_Реквизит4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ВариантЗаполненияРасшифровки_Реквизит4()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Кратность_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Кратность_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Кратность_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Кратность_Реквизит9()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Курс_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Курс_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Курс_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Курс_Реквизит10()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НалогообложениеНДС_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НалогообложениеНДС_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НалогообложениеНДС_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НалогообложениеНДС_Реквизит12()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельности_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеНаправление";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельности_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельности_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельности_Реквизит13()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельностиЗатраты_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеНаправление";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельностиЗатраты_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельностиЗатраты_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_НаправлениеДеятельностиЗатраты_Реквизит14()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Организация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация"; 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Организация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Организация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_Организация_Реквизит16()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеНастроекНалоговогоУчета_Реквизит46(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеНастроекНалоговогоУчета_Реквизит46", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеНастроекНалоговогоУчета_Реквизит46" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеНастроекНалоговогоУчета_Реквизит46()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеЭквайринговогоТерминала_Реквизит47(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеЭквайринговогоТерминала_Реквизит47", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеЭквайринговогоТерминала_Реквизит47" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_ПоложениеЭквайринговогоТерминала_Реквизит47()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Кратность_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Кратность_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Кратность_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Кратность_Реквизит30()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Курс_Реквизит31(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Курс_Реквизит31", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Курс_Реквизит31" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_Курс_Реквизит31()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит32(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит32", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит32" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит32()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_СпособЗачета_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Авто";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_СпособЗачета_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_СпособЗачета_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_СпособЗачета_Реквизит34()

Функция ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_ТипСуммы_Реквизит44(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_ТипСуммы_Реквизит44", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_ТипСуммы_Реквизит44" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПоступлениеНаСчет_РасшифровкаПлатежа_ТипСуммы_Реквизит44()

Функция ПКО_ПередВыгрузкой_ПриемПродукцииИзПроизводства(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = 1;
		// Если в тч документа есть хоть одна позиция из группы готовой продукции то передаем в 8-ку
		Пока Источник.ПолучитьСтроку() = 1 Цикл
			Родитель = глДайПапу(Источник.ПРодукция);
			Если Родитель.код = "00017" Тогда // каталог Продукция
			Отказ = 0;  	
			КонецЕсли;
		КонецЦикла;
		Отказ = Источник.Взвешено;  // взвешенные заказы не передаем

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПриемПродукцииИзПроизводства", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПриемПродукцииИзПроизводства" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_ПриемПродукцииИзПроизводства()

Функция ПКО_ПриВыгрузке_ПриемПродукцииИзПроизводства(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриемПродукцииИзПроизводства", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриемПродукцииИзПроизводства" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ПриемПродукцииИзПроизводства()

Функция ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Проведен_Свойство6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Проведен_Свойство6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Проведен_Свойство6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Проведен_Свойство6()

Функция ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Период_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = НачГода(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Период_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Период_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Период_Реквизит27()

Функция ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Организация_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Организация_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Организация_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Организация_Реквизит13()

Функция ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Импортирован_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Импортирован_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Импортирован_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводства_Импортирован_Реквизит15()

Функция ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводстваПоиск_Период_Реквизит2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = НачГода(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводстваПоиск_Период_Реквизит2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводстваПоиск_Период_Реквизит2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриемПродукцииИзПроизводстваПоиск_Период_Реквизит2()

Функция ПКО_ПриВыгрузке_ПриходнаяВедомость_в_РасходИзКассыРозница(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "СуммаСверки");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", ВходящиеДанные.ПолучитьЗначение(2));
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходнаяВедомость_в_РасходИзКассыРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходнаяВедомость_в_РасходИзКассыРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ПриходнаяВедомость_в_РасходИзКассыРозница()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ВидОперации_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Поставщику";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ВидОперации_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ВидОперации_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ВидОперации_Реквизит15()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ХозяйственнаяОперация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Поставщику";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ХозяйственнаяОперация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ХозяйственнаяОперация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_ХозяйственнаяОперация_Реквизит16()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_Статья_Реквизит20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОплатаПоставщикам";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_Статья_Реквизит20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_Статья_Реквизит20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_Статья_Реквизит20()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_НалогообложениеНДС_Реквизит22(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_НалогообложениеНДС_Реквизит22", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_НалогообложениеНДС_Реквизит22" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_НалогообложениеНДС_Реквизит22()

Функция ПКГС_ПередОбработкойВыгрузки_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТабличнаяЧасть8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, НеЗамещать, НеОчищать)


	Отказ = 0;


	Попытка


		КоллекцияОбъектов = ВходящиеДанные.ПолучитьЗначение(1);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКГС_ПередОбработкойВыгрузки_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТабличнаяЧасть8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКГС_ПередОбработкойВыгрузки_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТабличнаяЧасть8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКГС_ПередОбработкойВыгрузки_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТабличнаяЧасть8()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СпособЗачета_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СпособЗачета_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СпособЗачета_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СпособЗачета_Реквизит24()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СтатьяДДС_Реквизит25(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОплатаПоставщикам";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СтатьяДДС_Реквизит25", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СтатьяДДС_Реквизит25" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_СтатьяДДС_Реквизит25()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Курс_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Курс_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Курс_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Курс_Реквизит10()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Кратность_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Кратность_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Кратность_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_Кратность_Реквизит9()

Функция ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТипСуммы_Реквизит26(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТипСуммы_Реквизит26", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТипСуммы_Реквизит26" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяВедомость_в_РасходИзКассыРозница_РасшифровкаПлатежа_ТипСуммы_Реквизит26()

Функция ПКО_ПриВыгрузке_ПриходнаяНакладная(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходнаяНакладная", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходнаяНакладная" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ПриходнаяНакладная()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Кратность_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Кратность_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Кратность_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Кратность_Реквизит10()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_НалогообложениеНДС_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_НалогообложениеНДС_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_НалогообложениеНДС_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_НалогообложениеНДС_Реквизит18()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_ВидОперации_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПоступлениеОтПоставщика";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ВидОперации_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ВидОперации_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_ВидОперации_Реквизит15()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Подразделение_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Подразделение_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Подразделение_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Подразделение_Реквизит14()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Организация_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Организация_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Организация_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Организация_Реквизит17()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_СуммаВключаетНДС_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_СуммаВключаетНДС_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_СуммаВключаетНДС_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_СуммаВключаетНДС_Реквизит13()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_ПоложениеСклада_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВТабличнойЧасти";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ПоложениеСклада_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ПоложениеСклада_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_ПоложениеСклада_Реквизит19()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_ХозяйственнаяОперация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПоступлениеОтПоставщика";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ХозяйственнаяОперация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_ХозяйственнаяОперация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_ХозяйственнаяОперация_Реквизит16()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтруктурнаяЕдиница_Реквизит25(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ПустоеЗначение(ОбъектКоллекции.Склад) = 1 Тогда
			ОбъектКоллекции.Склад = Источник.МестоХранения;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтруктурнаяЕдиница_Реквизит25", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтруктурнаяЕдиница_Реквизит25" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтруктурнаяЕдиница_Реквизит25()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтавкаНДС_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ВидНДС;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтавкаНДС_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтавкаНДС_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_СтавкаНДС_Реквизит28()

Функция ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_Характеристика_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_Характеристика_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_Характеристика_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходнаяНакладная_Запасы_Характеристика_Реквизит27()

Функция ПКО_ПередВыгрузкой_ПриходныйКассовый(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		ВходящиеДанные = СоздатьОбъект("СписокЗначений");
		
		РасшифровкаПлатежа = СоздатьОбъект("ТаблицаЗначений");
		РасшифровкаПлатежа.НоваяКолонка("СтавкаНДС");
		РасшифровкаПлатежа.НоваяКолонка("Контрагент");
		РасшифровкаПлатежа.НоваяКолонка("СуммаНДС");
		РасшифровкаПлатежа.НоваяКолонка("СуммаПлатежа");
		РасшифровкаПлатежа.НоваяКолонка("СуммаРасчетов");
		РасшифровкаПлатежа.НоваяСтрока();
		
		РасшифровкаПлатежа.СтавкаНДС = Источник.ВидНДС;
		РасшифровкаПлатежа.СуммаНДС = Источник.НДС;
		РасшифровкаПлатежа.СуммаПлатежа = Источник.СуммаВал;
		РасшифровкаПлатежа.СуммаРасчетов= Источник.СуммаВал;
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			РасшифровкаПлатежа.Контрагент = Источник.Субконто1;
		КонецЕсли;
		
		ВходящиеДанные.Установить("РасшифровкаПлатежа",РасшифровкаПлатежа);
		
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПриходныйКассовый", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПриходныйКассовый" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_ПриходныйКассовый()

Функция ПКО_ПриВыгрузке_ПриходныйКассовый(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходныйКассовый", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ПриходныйКассовый" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ПриходныйКассовый()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_Организация_Реквизит28(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация"; 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Организация_Реквизит28", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Организация_Реквизит28" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_Организация_Реквизит28()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_НалогообложениеНДС_Реквизит31(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_НалогообложениеНДС_Реквизит31", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_НалогообложениеНДС_Реквизит31" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_НалогообложениеНДС_Реквизит31()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_СхемаРасчетаБонусов_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.ФлРучногоИзмСхемыРБ = 1 Тогда
			Значение = Источник.СхемаРБ;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_СхемаРасчетаБонусов_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_СхемаРасчетаБонусов_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_СхемаРасчетаБонусов_Реквизит15()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_ХозяйственнаяОперация_Реквизит33(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОтПокупателя";
		Иначе
			Значение = "Прочее";
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ХозяйственнаяОперация_Реквизит33", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ХозяйственнаяОперация_Реквизит33" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_ХозяйственнаяОперация_Реквизит33()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_ВидОперации_Реквизит32(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОтПокупателя";
		Иначе
			Значение = "Прочее";
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ВидОперации_Реквизит32", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ВидОперации_Реквизит32" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_ВидОперации_Реквизит32()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_Статья_Реквизит36(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОплатаОтПокупателей";
		Иначе
			Значение = "Прочее";
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Статья_Реквизит36", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Статья_Реквизит36" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_Статья_Реквизит36()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит30()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_Контрагент_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = Источник.Субконто1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Контрагент_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_Контрагент_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_Контрагент_Реквизит29()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_ДокументОснование_Реквизит3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		ВыгрузитьОбъект = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ДокументОснование_Реквизит3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_ДокументОснование_Реквизит3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_ДокументОснование_Реквизит3()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит21(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит21", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит21" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит21()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит37(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОплатаОтПокупателей";
		Иначе
			Значение = "Прочее";
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит37", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит37" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит37()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит22(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит22", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит22" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит22()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит27()

Функция ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПриходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит20()

Функция ПКС_ПередВыгрузкой_Продавец_в_АдресДоставки_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение ="R" + Формат(Источник.Код, "Ч(0)8.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавец_в_АдресДоставки_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавец_в_АдресДоставки_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Продавец_в_АдресДоставки_Код_Свойство1()

Функция ПКО_ПередВыгрузкой_Продавцы(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = Источник.ПометкаУдаления();
		Если Лев(Источник.Наименование,1) = "_" Тогда
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_Продавцы", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_Продавцы" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_Продавцы()

Функция ПКС_ПередВыгрузкой_Продавцы_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "П" + Формат(Источник.Код, "Ч(0)9.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Продавцы_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_Продавцы_ЭтоГруппа_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_ЭтоГруппа_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_ЭтоГруппа_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Продавцы_ЭтоГруппа_Свойство4()

Функция ПКС_ПередВыгрузкой_Продавцы_Родитель_Свойство5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Продавцы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_Родитель_Свойство5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Продавцы_Родитель_Свойство5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Продавцы_Родитель_Свойство5()

Функция ПКО_ПередВыгрузкой_ПродавцыСотрудники(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = Источник.ПометкаУдаления();
		Если Лев(Источник.Наименование,1) = "_" Тогда
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПродавцыСотрудники", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_ПродавцыСотрудники" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_ПродавцыСотрудники()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "П" + Формат(Источник.Код, "Ч(0)8.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_Родитель_Свойство5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Продавцы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_Родитель_Свойство5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_Родитель_Свойство5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_Родитель_Свойство5()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовПоПерерасходу_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПерерасходПодотчетников";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовПоПерерасходу_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовПоПерерасходу_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовПоПерерасходу_Реквизит8()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПерсоналом_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПерсоналомПоОплатеТруда";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПерсоналом_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПерсоналом_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПерсоналом_Реквизит7()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПодотчетниками_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПодотчетниками";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПодотчетниками_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПодотчетниками_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_СчетРасчетовСПодотчетниками_Реквизит9()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_ЭтоГруппа_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_ЭтоГруппа_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_ЭтоГруппа_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_ЭтоГруппа_Свойство4()

Функция ПКС_ПередВыгрузкой_ПродавцыСотрудники_ТипЗанятости_Реквизит6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеМестоРаботы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_ТипЗанятости_Реквизит6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ПродавцыСотрудники_ТипЗанятости_Реквизит6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ПродавцыСотрудники_ТипЗанятости_Реквизит6()

Функция ПКО_ПриВыгрузке_РасходнаяНакладная(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходнаяНакладная", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходнаяНакладная" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_РасходнаяНакладная()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Кратность_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Кратность_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Кратность_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Кратность_Реквизит16()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_СуммаВключаетНДС_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_СуммаВключаетНДС_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_СуммаВключаетНДС_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_СуммаВключаетНДС_Реквизит17()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_СхемаРасчетаБонусов_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.ФлРучногоИзмСхемыРБ = 1 
			Тогда
			Значение = Источник.СхемаРБ;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_СхемаРасчетаБонусов_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_СхемаРасчетаБонусов_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_СхемаРасчетаБонусов_Реквизит18()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СуммаБезСкидки_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ОбъектКоллекции.Кво * ОбъектКоллекции.ЦенаБезСкидки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СуммаБезСкидки_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СуммаБезСкидки_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СуммаБезСкидки_Реквизит29()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_Характеристика_Реквизит42(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_Характеристика_Реквизит42", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_Характеристика_Реквизит42" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_Характеристика_Реквизит42()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Подразделение_Реквизит44(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Подразделение_Реквизит44", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Подразделение_Реквизит44" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Подразделение_Реквизит44()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_ВидОперации_Реквизит45(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПродажаПокупателю";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_ВидОперации_Реквизит45", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_ВидОперации_Реквизит45" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_ВидОперации_Реквизит45()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_ХозяйственнаяОперация_Реквизит46(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПродажаПокупателю"

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_ХозяйственнаяОперация_Реквизит46", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_ХозяйственнаяОперация_Реквизит46" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_ХозяйственнаяОперация_Реквизит46()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Организация_Реквизит47(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Организация_Реквизит47", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Организация_Реквизит47" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Организация_Реквизит47()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_НалогообложениеНДС_Реквизит53(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_НалогообложениеНДС_Реквизит53", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_НалогообложениеНДС_Реквизит53" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_НалогообложениеНДС_Реквизит53()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СтавкаНДС_Реквизит56(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ВидНДС;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СтавкаНДС_Реквизит56", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СтавкаНДС_Реквизит56" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_Запасы_СтавкаНДС_Реквизит56()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладная_НеФормироватьДвижения_Реквизит61(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_НеФормироватьДвижения_Реквизит61", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладная_НеФормироватьДвижения_Реквизит61" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладная_НеФормироватьДвижения_Реквизит61()

Функция ПКО_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		Отказ = 1;
		Если (Источник.КатегорияЦен.Розница = 1)  И (ПустоеЗначение(Источник.Контрагент.ФирмаПрихода.Получить(Источник.ДатаДок)) = 0) Тогда
			Отказ = 0
		КонецЕсли;
		
		Если Источник.ПоДаннымПродавца <> 0 Тогда
			
			СписокДанных = СоздатьОбъект("ТаблицаЗначений");
			СписокДанных.НоваяКолонка("Документ");
			СписокДанных.НоваяКолонка("Сумма");
			
			СписокДанных.НоваяСтрока();
			СписокДанных.Документ = Источник;
			СписокДанных.Сумма = Источник.ПоДаннымПродавца;
			ВыгрузитьПоПравилу(СписокДанных,,СписокДанных,,"ДанныеСверкиСРеализаторомВРознице");
			
			
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница()

Функция ПКО_ПриВыгрузке_РасходнаяНакладнаяВПриходнаяНакладнаяРозница(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "СуммаСверки");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Источник.ПоДаннымПродавца);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходнаяНакладнаяВПриходнаяНакладнаяРозница", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходнаяНакладнаяВПриходнаяНакладнаяРозница" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_РасходнаяНакладнаяВПриходнаяНакладнаяРозница()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Кратность_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Кратность_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Кратность_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Кратность_Реквизит11()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_НалогообложениеНДС_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_НалогообложениеНДС_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_НалогообложениеНДС_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_НалогообложениеНДС_Реквизит18()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_РегистрироватьЦеныПоставщика_Реквизит45(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "1";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_РегистрироватьЦеныПоставщика_Реквизит45", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_РегистрироватьЦеныПоставщика_Реквизит45" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_РегистрироватьЦеныПоставщика_Реквизит45()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ВидОперации_Реквизит43(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПоступлениеОтПоставщика";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ВидОперации_Реквизит43", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ВидОперации_Реквизит43" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ВидОперации_Реквизит43()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Подразделение_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Подразделение_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Подразделение_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Подразделение_Реквизит15()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Организация_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Контрагент.ФирмаПрихода.Получить(Источник.ДатаДок);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Организация_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Организация_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Организация_Реквизит17()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СтруктурнаяЕдиница_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Контрагент.МестоХранения.Получить(Источник.ДатаДок);
		
		
		//Выгрузим место хранения в кассуККМ
		Данные = СоздатьОбъект("СписокЗначений");
		Данные.Установить("Владелец", Источник.Контрагент.ФирмаПрихода.Получить(Источник.ДатаДок));
		ВыгрузитьПоПравилу(Значение.ТекущийЭлемент(),,Данные,,"КассыККМ");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СтруктурнаяЕдиница_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СтруктурнаяЕдиница_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СтруктурнаяЕдиница_Реквизит12()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СуммаВключаетНДС_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СуммаВключаетНДС_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СуммаВключаетНДС_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_СуммаВключаетНДС_Реквизит14()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоступлениеВРозницу_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоступлениеВРозницу_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоступлениеВРозницу_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоступлениеВРозницу_Реквизит24()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеСклада_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеСклада_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеСклада_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеСклада_Реквизит19()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеЗаказаПоставщику_Реквизит44(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ВШапке";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеЗаказаПоставщику_Реквизит44", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеЗаказаПоставщику_Реквизит44" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ПоложениеЗаказаПоставщику_Реквизит44()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ХозяйственнаяОперация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПоступлениеОтПоставщика";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ХозяйственнаяОперация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ХозяйственнаяОперация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_ХозяйственнаяОперация_Реквизит16()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СуммаНДС_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СуммаНДС_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СуммаНДС_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СуммаНДС_Реквизит34()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтавкаНДС_Реквизит37(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "БезНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтавкаНДС_Реквизит37", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтавкаНДС_Реквизит37" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтавкаНДС_Реквизит37()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_Характеристика_Реквизит33(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
		Значение = СпрРВУ.ТекущийЭлемент();
		
		Если (ПустоеЗначение(ОбъектКоллекции.ВидУпаковки) = 0) И (ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет) Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_Характеристика_Реквизит33", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_Характеристика_Реквизит33" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_Характеристика_Реквизит33()

Функция ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтоимостьПартииВРознице_Реквизит38(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		ДатаЦен = ?(ПустоеЗначение(Источник.ДатаЦ) = 0, Источник.ДатаЦ,Источник.ДатаДок);
		Значение = ?(ОбъектКоллекции.ТМЦ.ВидТМЦ = Перечисление.ВидыТМЦ.Продукция, 
				глЦенаНоменклатурыСУпаковкой(ОбъектКоллекции.ТМЦ, ОбъектКоллекции.ВидУпаковки, ОбъектКоллекции.Ед, Константа.ОсновнаяКатегорияЦен, ДатаЦен, ОбъектКоллекции.Тара), //Если продукция, то по основной цене (вид - прайс) с упаковкой
				глСебестоимостьРеализованойПартииТовара(ОбъектКоллекции.ТМЦ, Источник))*ОбъектКоллекции.Кво*ОбъектКоллекции.Ед.Коэффициент;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтоимостьПартииВРознице_Реквизит38", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтоимостьПартииВРознице_Реквизит38" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходнаяНакладнаяВПриходнаяНакладнаяРозница_Запасы_СтоимостьПартииВРознице_Реквизит38()

Функция ПКО_ПередВыгрузкой_РасходныйКассовый(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)


	Отказ = 0;


	Попытка


		ВходящиеДанные = СоздатьОбъект("СписокЗначений");
		
		РасшифровкаПлатежа = СоздатьОбъект("ТаблицаЗначений");
		РасшифровкаПлатежа.НоваяКолонка("СтавкаНДС");
		РасшифровкаПлатежа.НоваяКолонка("Контрагент");
		РасшифровкаПлатежа.НоваяКолонка("СуммаНДС");
		РасшифровкаПлатежа.НоваяКолонка("СуммаПлатежа");
		РасшифровкаПлатежа.НоваяКолонка("СуммаРасчетов");
		РасшифровкаПлатежа.НоваяСтрока();
		
		РасшифровкаПлатежа.СтавкаНДС = Источник.ВидНДС;
		РасшифровкаПлатежа.СуммаНДС = Источник.НДС;
		РасшифровкаПлатежа.СуммаПлатежа = Источник.СуммаВал;
		РасшифровкаПлатежа.СуммаРасчетов= Источник.СуммаВал;
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			РасшифровкаПлатежа.Контрагент = Источник.Субконто1;
		КонецЕсли;
		
		ВходящиеДанные.Установить("РасшифровкаПлатежа",РасшифровкаПлатежа);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_РасходныйКассовый", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПередВыгрузкой_РасходныйКассовый" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПередВыгрузкой_РасходныйКассовый()

Функция ПКО_ПриВыгрузке_РасходныйКассовый(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходныйКассовый", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасходныйКассовый" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_РасходныйКассовый()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_Подотчетник_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если (Источник.Счет.Код = "3721") ИЛИ (Источник.Счет.Код = "3722")  Тогда
			Значение = Источник.Субконто1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Подотчетник_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Подотчетник_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_Подотчетник_Реквизит34()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_Контрагент_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = Источник.Субконто1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Контрагент_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Контрагент_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_Контрагент_Реквизит16()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_ВидОперации_Реквизит20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Прочее";
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "Поставщику";
		КонецЕсли;
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "Поставщику";
		КонецЕсли;
		
		Если (Источник.Счет.Код = "3721") ИЛИ (Источник.Счет.Код = "3722")  Тогда
			Значение = "Подотчетнику";
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ВидОперации_Реквизит20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ВидОперации_Реквизит20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_ВидОперации_Реквизит20()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_ХозяйственнаяОперация_Реквизит21(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "Поставщику";
		Иначе
			Значение = "Прочее";
		КонецЕсли;
		
		Если (Источник.Счет.Код = "3721") ИЛИ (Источник.Счет.Код = "3722")  Тогда
			Значение = "Подотчетнику";
		КонецЕсли;
		

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ХозяйственнаяОперация_Реквизит21", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ХозяйственнаяОперация_Реквизит21" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_ХозяйственнаяОперация_Реквизит21()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_Статья_Реквизит23(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Прочее";
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОплатаПоставщикам";
		Иначе
			Если Лев(Источник.Счет.Код,1) = "9" Тогда
				Значение = Источник.Субконто3;
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Статья_Реквизит23", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Статья_Реквизит23" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_Статья_Реквизит23()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_НалогообложениеНДС_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_НалогообложениеНДС_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_НалогообложениеНДС_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_НалогообложениеНДС_Реквизит18()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_ВариантЗаполненияРасшифровки_Реквизит17()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_Корреспонденция_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Лев(Источник.Счет.Код,1) = "9" Тогда
			Значение = "93";
		Иначе
			Значение = Источник.Счет;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Корреспонденция_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Корреспонденция_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_Корреспонденция_Реквизит19()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_СхемаРасчетаБонусов_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.ФлРучногоИзмСхемыРБ = 1 Тогда
			Значение = Источник.СхемаРБ;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_СхемаРасчетаБонусов_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_СхемаРасчетаБонусов_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_СхемаРасчетаБонусов_Реквизит13()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_Организация_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация"; 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Организация_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_Организация_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_Организация_Реквизит15()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СпособЗачета_Реквизит27()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОплатаПоставщикам";
		Иначе
			Значение = "Прочее";
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_СтатьяДДС_Реквизит29()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит26(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит26", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит26" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Курс_Реквизит26()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит25(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит25", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит25" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_Кратность_Реквизит25()

Функция ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит33(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит33", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит33" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходныйКассовый_РасшифровкаПлатежа_ТипСуммы_Реквизит33()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_НалогообложениеНДС_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_НалогообложениеНДС_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_НалогообложениеНДС_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_НалогообложениеНДС_Реквизит11()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_Организация_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Организация_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Организация_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_Организация_Реквизит12()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_Статья_Реквизит34(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Прочее";
		
		Если Источник.Субконто1.Вид() = "Контрагенты" Тогда
			Значение = "ОплатаПоставщикам";
		Иначе
			Если Лев(Источник.Счет.Код,1) = "9" Тогда
				Значение = Источник.Субконто3;
			КонецЕсли;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Статья_Реквизит34", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Статья_Реквизит34" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_Статья_Реквизит34()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_Подразделение_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Подразделение_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Подразделение_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_Подразделение_Реквизит13()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_Корреспонденция_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Лев(Источник.Счет.Код,1) = "9" Тогда
			Значение = "93";
		Иначе
			Значение = Источник.Счет;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Корреспонденция_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_Корреспонденция_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_Корреспонденция_Реквизит10()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_ВариантЗаполненияРасшифровки_Реквизит6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_ВариантЗаполненияРасшифровки_Реквизит6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_ВариантЗаполненияРасшифровки_Реквизит6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_ВариантЗаполненияРасшифровки_Реквизит6()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_ПодразделениеЗатраты_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_ПодразделениеЗатраты_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_ПодразделениеЗатраты_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_ПодразделениеЗатраты_Реквизит14()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_СпособЗачета_Реквизит35(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Авто";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_СпособЗачета_Реквизит35", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_СпособЗачета_Реквизит35" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_СпособЗачета_Реквизит35()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_ТипСуммы_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_ТипСуммы_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_ТипСуммы_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_ТипСуммы_Реквизит30()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит25(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит25", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит25" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_НалогообложениеНДС_Реквизит25()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Кратность_Реквизит23(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Кратность_Реквизит23", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Кратность_Реквизит23" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Кратность_Реквизит23()

Функция ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Курс_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Курс_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Курс_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасходСоСчета_РасшифровкаПлатежа_Курс_Реквизит24()

Функция ПКО_ПриВыгрузке_РасчетЦенНоменклатурыПоСхемам(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасчетЦенНоменклатурыПоСхемам", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_РасчетЦенНоменклатурыПоСхемам" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_РасчетЦенНоменклатурыПоСхемам()

Функция ПКС_ПередВыгрузкой_РасчетЦенНоменклатурыПоСхемам_Номер_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Лев(Источник.НомерДок, 2) + Прав(Источник.НомерДок, 7);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасчетЦенНоменклатурыПоСхемам_Номер_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_РасчетЦенНоменклатурыПоСхемам_Номер_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_РасчетЦенНоменклатурыПоСхемам_Номер_Свойство3()

Функция ПКО_ПриВыгрузке_СборкаЗапасов(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СборкаЗапасов", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СборкаЗапасов" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_СборкаЗапасов()

Функция ПКС_ПередВыгрузкой_СборкаЗапасов_СтруктурнаяЕдиница_Реквизит17(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеПодразделение";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_СтруктурнаяЕдиница_Реквизит17", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_СтруктурнаяЕдиница_Реквизит17" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СборкаЗапасов_СтруктурнаяЕдиница_Реквизит17()

Функция ПКС_ПередВыгрузкой_СборкаЗапасов_ВидОперации_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Сборка";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_ВидОперации_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_ВидОперации_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СборкаЗапасов_ВидОперации_Реквизит15()

Функция ПКС_ПередВыгрузкой_СборкаЗапасов_НеФормироватьДвижения_Реквизит19(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_НеФормироватьДвижения_Реквизит19", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_НеФормироватьДвижения_Реквизит19" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СборкаЗапасов_НеФормироватьДвижения_Реквизит19()

Функция ПКС_ПередВыгрузкой_СборкаЗапасов_Организация_Реквизит18(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_Организация_Реквизит18", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_Организация_Реквизит18" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СборкаЗапасов_Организация_Реквизит18()

Функция ПКС_ПередВыгрузкой_СборкаЗапасов_ХозяйственнаяОперация_Реквизит16(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Сборка";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_ХозяйственнаяОперация_Реквизит16", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СборкаЗапасов_ХозяйственнаяОперация_Реквизит16" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СборкаЗапасов_ХозяйственнаяОперация_Реквизит16()

Функция ПКС_ПередВыгрузкой_Склад_ТипСтруктурнойЕдиницы_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Склад";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ТипСтруктурнойЕдиницы_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ТипСтруктурнойЕдиницы_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Склад_ТипСтруктурнойЕдиницы_Реквизит8()

Функция ПКС_ПередВыгрузкой_Склад_Код_Свойство2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "УМ-" + Формат(Источник.Код, "Ч(0)6.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_Код_Свойство2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_Код_Свойство2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Склад_Код_Свойство2()

Функция ПКС_ПередВыгрузкой_Склад_ГоловнаяОрганизация_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ГоловнаяОрганизация_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ГоловнаяОрганизация_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Склад_ГоловнаяОрганизация_Реквизит7()

Функция ПКС_ПередВыгрузкой_Склад_ВидСклада_Реквизит1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Склад";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ВидСклада_Реквизит1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Склад_ВидСклада_Реквизит1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Склад_ВидСклада_Реквизит1()

Функция ПКО_ПриВыгрузке_Сотрудники(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Сотрудники", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Сотрудники" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_Сотрудники()

Функция ПКС_ПередВыгрузкой_Сотрудники_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ?(Источник.ЭтоГруппа()=1,  Прав(Источник.Код,9),СтрЗаменить(Источник.Код,"-",""));

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Сотрудники_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовПоПерерасходу_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ПерерасходПодотчетников";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовПоПерерасходу_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовПоПерерасходу_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовПоПерерасходу_Реквизит8()

Функция ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПерсоналом_Реквизит6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПерсоналомПоОплатеТруда";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПерсоналом_Реквизит6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПерсоналом_Реквизит6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПерсоналом_Реквизит6()

Функция ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПодотчетниками_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПодотчетнымиЛицами";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПодотчетниками_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПодотчетниками_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Сотрудники_СчетРасчетовСПодотчетниками_Реквизит7()

Функция ПКС_ПередВыгрузкой_Сотрудники_ТипЗанятости_Реквизит5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновноеМестоРаботы";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_ТипЗанятости_Реквизит5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Сотрудники_ТипЗанятости_Реквизит5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Сотрудники_ТипЗанятости_Реквизит5()

Функция ПКО_ПриВыгрузке_Спецификации(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Спецификации", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_Спецификации" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_Спецификации()

Функция ПКС_ПередВыгрузкой_Спецификации_Наименование_Свойство15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Продукция.Наименование;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Наименование_Свойство15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Наименование_Свойство15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Спецификации_Наименование_Свойство15()

Функция ПКС_ПередВыгрузкой_Спецификации_Состав_КоличествоПродукции_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.КвоПродукции;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_КоличествоПродукции_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_КоличествоПродукции_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Спецификации_Состав_КоличествоПродукции_Реквизит14()

Функция ПКС_ПередВыгрузкой_Спецификации_Состав_ТипСтрокиСостава_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Материал";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_ТипСтрокиСостава_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_ТипСтрокиСостава_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Спецификации_Состав_ТипСтрокиСостава_Реквизит12()

Функция ПКС_ПередВыгрузкой_Спецификации_Состав_ДоляСтоимости_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_ДоляСтоимости_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Спецификации_Состав_ДоляСтоимости_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Спецификации_Состав_ДоляСтоимости_Реквизит11()

Функция ПКО_ПриВыгрузке_СпецификацияКДоговору(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СпецификацияКДоговору", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СпецификацияКДоговору" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_СпецификацияКДоговору()

Функция ПКС_ПередВыгрузкой_СпецификацияКДоговору_Курс_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Курс_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Курс_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СпецификацияКДоговору_Курс_Реквизит10()

Функция ПКС_ПередВыгрузкой_СпецификацияКДоговору_НалогообложениеНДС_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_НалогообложениеНДС_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_НалогообложениеНДС_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СпецификацияКДоговору_НалогообложениеНДС_Реквизит11()

Функция ПКС_ПередВыгрузкой_СпецификацияКДоговору_Кратность_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Кратность_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Кратность_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СпецификацияКДоговору_Кратность_Реквизит9()

Функция ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_Характеристика_Реквизит29(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ВидУпаковки<> Перечисление.ВидыУпаковки.нет Тогда
			СпрРВУ = CreateObject("Справочник.УМК_РазрешенныеВидыУпаковкиТМЦ");
			СпрРВУ.ИспользоватьВладельца(ОбъектКоллекции.ТМЦ);
			Если СпрРВУ.НайтиПоРеквизиту("ВидУпаковки", ОбъектКоллекции.ВидУпаковки, 0) = 1 Тогда
				Значение = СпрРВУ.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Отказ = 1;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_Характеристика_Реквизит29", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_Характеристика_Реквизит29" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_Характеристика_Реквизит29()

Функция ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_СтавкаНДС_Реквизит26(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значенте = Источник.ВидНДС;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_СтавкаНДС_Реквизит26", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_СтавкаНДС_Реквизит26" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СпецификацияКДоговору_Запасы_СтавкаНДС_Реквизит26()

Функция ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Активность_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Активность_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Активность_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Активность_Свойство1()

Функция ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Комментарий_Реквизит5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Загружен из 7.7";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Комментарий_Реквизит5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Комментарий_Реквизит5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Комментарий_Реквизит5()

Функция ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Период_Свойство7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ТекущаяДата();

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Период_Свойство7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Период_Свойство7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СрокиГодностиЭтикетки_Период_Свойство7()

Функция ПКС_ПередВыгрузкой_СтавкиНДС_Наименование_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник.Код = "НДС0" 
			Тогда
			Значение = "0%"
		ИначеЕсли Источник.Код = "НДС20" 
			Тогда
			Значение = "20%"
		ИначеЕсли Источник.Код = "БезНДС" 
			Тогда
			Значение = "Без НДС";
		ИначеЕсли Источник.Код = "НеНДС" 
			Тогда
			Значение = "Не НДС"
		ИначеЕсли Источник.Код = "НДСвБюджет"  
			Тогда
			Значение = "Не НДС";
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СтавкиНДС_Наименование_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СтавкиНДС_Наименование_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СтавкиНДС_Наименование_Свойство1()

Функция ПКС_ПередВыгрузкой_СтатьиДвиженияДенежныхСредств_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "УМ"+Формат(Источник.Код, "Ч(0)7.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СтатьиДвиженияДенежныхСредств_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СтатьиДвиженияДенежныхСредств_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СтатьиДвиженияДенежныхСредств_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_Строка_СтавкиНДС_Наименование_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если Источник = "НДС0" 
			Тогда
			Значение = "0%"
		ИначеЕсли Источник = "НДС20" 
			Тогда
			Значение = "20%"
		ИначеЕсли Источник = "БезНДС" 
			Тогда
			Значение = "Без НДС";
		ИначеЕсли Источник = "НеНДС" 
			Тогда
			Значение = "Не НДС"
		ИначеЕсли Источник = "НДСвБюджет"  
			Тогда
			Значение = "Не НДС";
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Строка_СтавкиНДС_Наименование_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Строка_СтавкиНДС_Наименование_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Строка_СтавкиНДС_Наименование_Свойство1()

Функция ПКС_ПередВыгрузкой_Строка_Управленческий_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Строка_Управленческий_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Строка_Управленческий_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Строка_Управленческий_Код_Свойство1()

Функция ПКО_ПриВыгрузке_СхемаРасчетаБонуса(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		СписокНоменклатуры = "";
		
		Источник.ВыбратьСтроки();
		
		Пока Источник.ПолучитьСтроку() = 1 Цикл
			СписокНоменклатуры = СписокНоменклатуры + Источник.СписТоваров + "; ";
		КонецЦикла;
		
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "СписокНоменклатуры");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", СписокНоменклатуры);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СхемаРасчетаБонуса", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_СхемаРасчетаБонуса" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_СхемаРасчетаБонуса()

Функция ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Номер_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Лев(Источник.НомерДок,4) + Прав(Источник.НомерДок,5);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Номер_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Номер_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Номер_Свойство3()

Функция ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Схемы_ФормулаРасчетаБонуса_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Строка(ОбъектКоллекции.База) + "; " + Строка(ОбъектКоллекции.Зн)+ "; " + Строка(ОбъектКоллекции.КатЦен);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Схемы_ФормулаРасчетаБонуса_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Схемы_ФормулаРасчетаБонуса_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СхемаРасчетаБонуса_Схемы_ФормулаРасчетаБонуса_Реквизит8()

Функция ПКС_ПередВыгрузкой_СхемаРасчетаЦен_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)9.0");
		Исключение
		КонецПопытки

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаЦен_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемаРасчетаЦен_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СхемаРасчетаЦен_Код_Свойство1()

Функция ПКС_ПередВыгрузкой_СхемыРасчетаЗП_Наименование_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = ?(ПустоеЗначение(Источник.Примечание)=0,Источник.Примечание,"<>")

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемыРасчетаЗП_Наименование_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_СхемыРасчетаЗП_Наименование_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_СхемыРасчетаЗП_Наименование_Свойство4()

Функция ПКС_ПередВыгрузкой_УдалитьКонтрагентыНоменклатуры_Код_Свойство6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)11.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УдалитьКонтрагентыНоменклатуры_Код_Свойство6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УдалитьКонтрагентыНоменклатуры_Код_Свойство6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УдалитьКонтрагентыНоменклатуры_Код_Свойство6()

Функция ПКС_ПередВыгрузкой_УдалитьХарактеристикуПоУмолчанию_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)11.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УдалитьХарактеристикуПоУмолчанию_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УдалитьХарактеристикуПоУмолчанию_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УдалитьХарактеристикуПоУмолчанию_Код_Свойство1()

Функция ПКО_ПриВыгрузке_УМК_КассоваяВедомость(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УМК_КассоваяВедомость", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УМК_КассоваяВедомость" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_УМК_КассоваяВедомость()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Организация_Реквизит9(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнаяОрганизация"; 

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Организация_Реквизит9", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Организация_Реквизит9" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Организация_Реквизит9()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_НалогообложениеНДС_Реквизит11(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОблагаетсяНДС";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_НалогообложениеНДС_Реквизит11", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_НалогообложениеНДС_Реквизит11" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_НалогообложениеНДС_Реквизит11()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Курс_Реквизит7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Курс_Реквизит7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Курс_Реквизит7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Курс_Реквизит7()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ХозяйственнаяОперация_Реквизит14(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОтПокупателя";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ХозяйственнаяОперация_Реквизит14", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ХозяйственнаяОперация_Реквизит14" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ХозяйственнаяОперация_Реквизит14()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВидОперации_Реквизит13(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОтПокупателя";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВидОперации_Реквизит13", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВидОперации_Реквизит13" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВидОперации_Реквизит13()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Статья_Реквизит15(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОплатаОтПокупателей";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Статья_Реквизит15", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Статья_Реквизит15" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Статья_Реквизит15()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВариантЗаполненияРасшифровки_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВариантЗаполненияРасшифровки_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВариантЗаполненияРасшифровки_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ВариантЗаполненияРасшифровки_Реквизит10()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ПлатежнаяВедомость_Реквизит25(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ПлатежнаяВедомость_Реквизит25", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ПлатежнаяВедомость_Реквизит25" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_ПлатежнаяВедомость_Реквизит25()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Корреспонденция_Реквизит12(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "РасчетыСПокупателями";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Корреспонденция_Реквизит12", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Корреспонденция_Реквизит12" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Корреспонденция_Реквизит12()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Кратность_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Кратность_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Кратность_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_Кратность_Реквизит8()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Курс_Реквизит22(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Курс_Реквизит22", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Курс_Реквизит22" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Курс_Реквизит22()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтавкаНДС_Реквизит26(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "НДС20";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтавкаНДС_Реквизит26", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтавкаНДС_Реквизит26" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтавкаНДС_Реквизит26()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит20(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОплатаОтПокупателей";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит20", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит20" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит20()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит30(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОплатаОтПокупателей";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит30", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит30" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СтатьяДДС_Реквизит30()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СпособЗачета_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "Вручную";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СпособЗачета_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СпособЗачета_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СпособЗачета_Реквизит24()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_ТипСуммы_Реквизит21(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "ОсновнойДолг";

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_ТипСуммы_Реквизит21", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_ТипСуммы_Реквизит21" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_ТипСуммы_Реквизит21()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Кратность_Реквизит23(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Кратность_Реквизит23", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Кратность_Реквизит23" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_Кратность_Реквизит23()

Функция ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СхемаРасчетаБонусов_Реквизит27(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Если ОбъектКоллекции.ФлРучногоИзмСхемыРБ = 1 Тогда
			Значение = ОбъектКоллекции.СхемаРБ;
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СхемаРасчетаБонусов_Реквизит27", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СхемаРасчетаБонусов_Реквизит27" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УМК_КассоваяВедомость_РасшифровкаПлатежа_СхемаРасчетаБонусов_Реквизит27()

Функция ПКС_ПередВыгрузкой_Управленческий_Код_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = СокрЛП(Источник.Код);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Управленческий_Код_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Управленческий_Код_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Управленческий_Код_Свойство1()

Функция ПКО_ПриВыгрузке_УстановкаСкидокНоменклатурыАкции(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УстановкаСкидокНоменклатурыАкции", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УстановкаСкидокНоменклатурыАкции" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_УстановкаСкидокНоменклатурыАкции()

Функция ПКО_ПриВыгрузке_УстановкаЦенНоменклатуры(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УстановкаЦенНоменклатуры", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_УстановкаЦенНоменклатуры" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_УстановкаЦенНоменклатуры()

Функция ПКС_ПередВыгрузкой_УстановкаЦенНоменклатуры_Номер_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Лев(Источник.НомерДок, 2) + Прав(Источник.НомерДок, 7);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УстановкаЦенНоменклатуры_Номер_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_УстановкаЦенНоменклатуры_Номер_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_УстановкаЦенНоменклатуры_Номер_Свойство3()

Функция ПКС_ПередВыгрузкой_Фирма_в_Контрагента_ЭтоГруппа_Свойство8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 0;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Фирма_в_Контрагента_ЭтоГруппа_Свойство8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Фирма_в_Контрагента_ЭтоГруппа_Свойство8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Фирма_в_Контрагента_ЭтоГруппа_Свойство8()

Функция ПКС_ПередВыгрузкой_Фирма_в_Контрагента_Код_Свойство2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = "УМ-" + Формат(Источник.Код, "Ч(0)6.0");

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Фирма_в_Контрагента_Код_Свойство2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_Фирма_в_Контрагента_Код_Свойство2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_Фирма_в_Контрагента_Код_Свойство2()

Функция ПКС_ПередВыгрузкой_ФормулыРасчетаБонусов_Наименование_Свойство1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ФормулыРасчетаБонусов_Наименование_Свойство1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ФормулыРасчетаБонусов_Наименование_Свойство1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ФормулыРасчетаБонусов_Наименование_Свойство1()

Функция ПКС_ПередВыгрузкой_ФормыУпаковки_Код_Свойство2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = Формат(Число(Источник.Код), "Ч(0)9.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ФормыУпаковки_Код_Свойство2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ФормыУпаковки_Код_Свойство2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ФормыУпаковки_Код_Свойство2()

Функция ПКС_ПередВыгрузкой_ХарактеристикаПоУмолчанию_Характеристика_Ресурс2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ТекущийЭлемент();

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикаПоУмолчанию_Характеристика_Ресурс2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикаПоУмолчанию_Характеристика_Ресурс2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикаПоУмолчанию_Характеристика_Ресурс2()

Функция ПКО_ПриВыгрузке_ХарактеристикиНоменклатуры(
			Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)


	Отказ = 0;


	Попытка


		Контроль = ?(Параметры.Обновлять = 0,РассчитатьКРК(ЗначениеВСтрокуВнутр(Источник)),"0");
		УзелРеквизитов = СоздатьУзел("ЗначениеПараметра");
		УстановитьАтрибут(УзелРеквизитов, "Имя", "Контроль");
		УстановитьАтрибут(УзелРеквизитов, "Тип", "Строка");
		ЗаписатьЭлемент(УзелРеквизитов, "Значение", Контроль);
		ДобавитьПодчиненный(Приемник , УзелРеквизитов);
		
		ВыгрузитьПоПравилу(Источник.ТекущийЭлемент(),,Источник.ТекущийЭлемент(),,"НаименованиеДляПечатиХарактеристики");
		
		Если  Источник.ПометкаУдаления() = 0 Тогда
			
			СрокиГодности = СоздатьОбъект("ТаблицаЗначений");
			СрокиГодности.НоваяКолонка("Номенклатура");
			СрокиГодности.НоваяКолонка("ЕдВремени");
			СрокиГодности.НоваяКолонка("СрокГодности");
			СрокиГодности.НоваяКолонка("КодЭтикетки");
			
			СрокиГодности.НоваяСтрока();
			СрокиГодности.Номенклатура = Источник.Владелец.ТекущийЭлемент();
			СрокиГодности.ЕдВремени = Источник.ЕдиницаИзмерения;
			СрокиГодности.СрокГодности = Источник.СрокГодности;
			СрокиГодности.КодЭтикетки = Источник.КодЭтикетки;
			
			ВыгрузитьПоПравилу(Источник,,СрокиГодности,,"СрокиГодностиЭтикетки");
			
		КонецЕсли;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ХарактеристикиНоменклатуры", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКО_ПриВыгрузке_ХарактеристикиНоменклатуры" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКО_ПриВыгрузке_ХарактеристикиНоменклатуры()

Функция ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ДляПечати_Реквизит10(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДляПечати.Получить(ТекущаяДата());

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ДляПечати_Реквизит10", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ДляПечати_Реквизит10" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ДляПечати_Реквизит10()

Функция ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ВесУпаковки_Реквизит8(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ВесУпаковки.Получить(ТекущаяДата());

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ВесУпаковки_Реквизит8", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ВесУпаковки_Реквизит8" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_ВесУпаковки_Реквизит8()

Функция ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_КодЭлементаВИерархии_Реквизит4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Попытка
			Значение = "УМ" + Формат(Число(Источник.Код), "Ч(0)7.0");
		Исключение
		КонецПопытки;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_КодЭлементаВИерархии_Реквизит4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_КодЭлементаВИерархии_Реквизит4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_КодЭлементаВИерархии_Реквизит4()

Функция ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_Наименование_Свойство5(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ВидУпаковки.Наименование;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_Наименование_Свойство5", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_Наименование_Свойство5" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_Наименование_Свойство5()

Функция ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_НаименованиеДляПечати_Реквизит24(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.ДляПечати.Получить(ТекущаяДата());

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_НаименованиеДляПечати_Реквизит24", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_НаименованиеДляПечати_Реквизит24" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ХарактеристикиНоменклатуры_НаименованиеДляПечати_Реквизит24()

Функция ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Активность_Свойство6(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Активность_Свойство6", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Активность_Свойство6" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Активность_Свойство6()

Функция ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Актуальность_Ресурс7(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = 1;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Актуальность_Ресурс7", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Актуальность_Ресурс7" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныНоменклатуры_Актуальность_Ресурс7()

Функция ПКС_ПередВыгрузкой_ЦеныУпаковок_ХарактеристикаНоменклатуры_Измерение2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник;

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_ХарактеристикаНоменклатуры_Измерение2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_ХарактеристикаНоменклатуры_Измерение2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныУпаковок_ХарактеристикаНоменклатуры_Измерение2()

Функция ПКС_ПередВыгрузкой_ЦеныУпаковок_Период_Свойство3(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Дата(Параметры.ПериодВыгрузки);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_Период_Свойство3", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_Период_Свойство3" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныУпаковок_Период_Свойство3()

Функция ПКС_ПередВыгрузкой_ЦеныУпаковок_Цена_Ресурс1(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Цена.Получить(Параметры.ПериодВыгрузки);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_Цена_Ресурс1", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковок_Цена_Ресурс1" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныУпаковок_Цена_Ресурс1()

Функция ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Период_Свойство4(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Дата(Параметры.ПериодВыгрузки);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Период_Свойство4", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Период_Свойство4" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Период_Свойство4()

Функция ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Цена_Ресурс2(
			Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)


	Отказ = 0;


	Попытка


		Значение = Источник.Цена.Получить(Параметры.ПериодВыгрузки);

	Исключение
	
		Сообщить("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Цена_Ресурс2", "!!!");
		Сообщить("  - " + ОписаниеОшибки());
		ЗафиксироватьОшибку("Ошибка исполнения обработчика:  ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Цена_Ресурс2" + ": " + ОписаниеОшибки());

	КонецПопытки;



	Возврат Отказ;


КонецФункции // ПКС_ПередВыгрузкой_ЦеныУпаковокПоВидуЦен_Цена_Ресурс2()

////////////////////////////////////////////////////////////////////////////////
// ОКОНЧАНИЕ ОБРАБОТЧИКОВ
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПИСИ "Msxml2.DOMDocument.4.0"
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьУзел(name)
	
	newNode = DOMDocument.createNode(1, name, "");
	
	Возврат newNode;

КонецФункции // СоздатьУзел()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УстановитьАтрибут(element, name, value)
    
	element.setAttribute(name, Строка(value));
	
КонецПроцедуры // УстановитьАтрибут()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗаписатьЭлемент(node, name, value = "")
	
	 childNode = DOMDocument.createNode(1, name, "");
	 Попытка
           childNode.text = Строка(value);
     Исключение
           Сообщить("Не удалось записать элемент: "+name+", со значением: "+value);
           childNode.text = "";
     КонецПопытки;
     node.appendChild(childNode);
    
КонецПроцедуры // одЗаписатьЭлемент() 

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ДобавитьПодчиненный(parentNode, childNode)
	
	parentNode.appendChild(childNode);

КонецПроцедуры // ДобавитьПодчиненный()


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// 
// Описание:
//
Процедура УстановитьЗначениеПараметраКонвертации(ИмяПараметра, ЗначениеПараметра)
	
	НомерСтроки = 0;
	
	Если ТаблицаНастройкиПараметров.НайтиЗначение(ИмяПараметра, НомерСтроки, "Имя") = 1 Тогда
		
		ТаблицаНастройкиПараметров.УстановитьЗначение(НомерСтроки, "Значение", ЗначениеПараметра)
	Иначе
		
		Сообщить("Значение параметра """ + ИмяПараметра + """ не установлено! Возможно, имя параметра указано не верно или параметр не редактируется в диалоге.", "!");
		
	КонецЕсли;
	
КонецПроцедуры //УстановитьЗначениеПараметраКонвертации()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВывестиСообщение(ТекстСообщения, СтатусСообщения = " ")
	
	Сообщить(ТекстСообщения, СтатусСообщения);
	
КонецПроцедуры // ВывестиСообщение()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиБулевоКЗначению(Булево)
	
	Если Врег(Булево) = "TRUE" Тогда
		
		Возврат 1;
	
	ИначеЕсли Врег(Булево) = "FALSE" Тогда
		
		Возврат 0;
	
	Иначе
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции // ПривестиБулевоКЗначению()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиЗначениеКБулево(Значение)
	
	Если Число(Значение) > 0 Тогда
		
		Возврат "true";
		
	Иначе
		
		Возврат "false";
		
	КонецЕсли;
	
КонецФункции // ПривестиЗначениеКБулево()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПроверитьИмяТипУзла(Узел, ПроверяемоеИмя = "", ТипТега = "", ПроверяемыйТип = "")
	
	Если (ТипТега <> "") И (ПроверяемыйТип <> "") Тогда
		
		Если ТипТега = ПроверяемыйТип Тогда
			
			Если ПроверяемоеИмя <> "" Тогда
				
				Если Узел.СвойстваТекущегоУзла.Имя = ПроверяемоеИмя Тогда
					
					Возврат 1;
					
				Иначе
					
					Возврат 0;
				
				КонецЕсли;
			
			Иначе
				
				Возврат 1;
				
			КонецЕсли;
			
		Иначе
			
			Возврат 0;
			
		КонецЕсли;
		
	Иначе
		
		Если ПроверяемоеИмя <> "" Тогда
			
			Если Узел.СвойстваТекущегоУзла.Имя = ПроверяемоеИмя Тогда
				
				Возврат 1;
				
			Иначе
				
				Возврат 0;
			
			КонецЕсли;
		
		Иначе
			
			ВывестиСообщение("Неверно переданы параметры в функцию ""ПроверитьИмяТипУзла"".", "!!!");
			Возврат 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПроверитьИмяТипУзла()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьДатуV8(ЧастьДата, ЧастьВремя = "00:00:00")
	
	Если (ПустоеЗначение(ЧастьДата) = 1) ИЛИ (ЧастьДата = Дата(1,1,1)) Тогда
		Возврат "0001-01-01T" + ЧастьВремя;
		
	Иначе
		// Год может быть введен неверно
		Год = ДатаГод(ЧастьДата);
		
		// Возможно случайно ошиблись и не доввели дату
		Если Год < 30 Тогда
			Год = 2000 + Год;
			
		ИначеЕсли Год < 100 Тогда
			Год = 1900 + Год;
			
		ИначеЕсли Год < 1000 Тогда
			Год = 1000 + Год;
			
		КонецЕсли;
		
		// Если исправления не помогли, тогда вернем пустой год
		// Иначе данные просто не загрузятся
		Если Год < 1900 Тогда
			Возврат "0001-01-01T" + ЧастьВремя;
		КонецЕсли;
		
		Возврат "" + Год + "-" + Формат(ДатаМесяц(ЧастьДата),"Ч(0)2") + "-" + Формат(ДатаЧисло(ЧастьДата),"Ч(0)2") + "T" + ЧастьВремя;
	
	КонецЕсли;

КонецФункции // ПолучитьДатуV8()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "")

	Стр	= СокрЛП(Стр);
	Префикс	= Стр;
	Длина = СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		
		ЧисловаяЧасть = Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			
			Префикс	= Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    
				Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
				
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			
			Стр = Прав(Стр, Длина - Сч);
			
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда
			
			ЧисловаяЧасть = - ЧисловаяЧасть;
			
		КонецЕсли;
			
	КонецЦикла;
	              
	Если Режим = "Число" Тогда
	    
		Возврат(ЧисловаяЧасть);
		
	Иначе
		
		Возврат(Префикс);
		
	КонецЕсли;

КонецФункции // ПолучитьПрефиксЧислоНомера()

// Добавляет к префиксу номера или кода подстроку
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добаляемая к префиксу подстрока;
//  Длина        - требуемая результрирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева")

	Стр = СтрЗаменить(СокрЛП(Стр)," ","");

	Если ПустаяСтрока(Длина) = 1 Тогда
		Длина = СтрДлина(Стр);
	КонецЕсли;

	ЧисловаяЧасть   = "";
	Префикс         = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);

	Если Режим = "Слева" Тогда
		Результат = СокрЛП(Добавок) + Префикс;
	Иначе
		Результат = Префикс + СокрЛП(Добавок);
	КонецЕсли;

	Пока Длина - СтрДлина(Результат) - СтрДлина(СтрЗаменить(СокрЛП(ЧисловаяЧасть)," ","")) > 0 Цикл
		Результат = Результат + "0";
	КонецЦикла;

	Результат = Результат + СтрЗаменить(СокрЛП(ЧисловаяЧасть)," ","");

	Возврат(Результат);

КонецФункции // ДобавитьКПрефиксу()


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПривестиНомерКДлине(Знач Стр, Длина)

	Стр = СокрЛП(Стр);

	ЧисловаяЧасть = "";
	Результат = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);

	Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
		
		Результат = Результат + "0";
		
	КонецЦикла;

	Результат = Результат + ЧисловаяЧасть;

	Возврат(Результат);

КонецФункции // ПривестиНомерКДлине()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияПравилВыгрузки()
	
	мТаблицаПравилВыгрузки = СоздатьОбъект("ТаблицаЗначений");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Отключить");
	мТаблицаПравилВыгрузки.НоваяКолонка("ЭтоГруппа");
	мТаблицаПравилВыгрузки.НоваяКолонка("Родитель");
	мТаблицаПравилВыгрузки.НоваяКолонка("Уровень");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Код");
	мТаблицаПравилВыгрузки.НоваяКолонка("Наименование");
	мТаблицаПравилВыгрузки.НоваяКолонка("Порядок", "Число", 10, 0);
	
	мТаблицаПравилВыгрузки.НоваяКолонка("КодПравилаКонвертации");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("СпособОтбораДанных");
	мТаблицаПравилВыгрузки.НоваяКолонка("ОбъектВыборки");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("ПередОбработкойПравила", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПередВыгрузкойОбъекта", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПослеВыгрузкиОбъекта", "Число", 1, 0);
	мТаблицаПравилВыгрузки.НоваяКолонка("ПослеОбработкиПравила", "Число", 1, 0); 
	
	мТаблицаПравилВыгрузки.НоваяКолонка("НомерГруппы", "Число", 5, 0);
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Отбор");
	
	мТаблицаПравилВыгрузки.НоваяКолонка("Комментарий");
	мТаблицаПравилВыгрузки.НоваяКолонка("Описание");
	
КонецПроцедуры // ИнициализацияПравилВыгрузки()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияПравилКонвертацииОбъектов()
	
	мТаблицаПравилКонвертацииОбъектов = СоздатьОбъект("ТаблицаЗначений");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Код");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Наименование");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Порядок", "Число", 10, 0);

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("СинхронизироватьПоИдентификатору", "Число", 1, 0);

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Источник");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Приемник");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПередВыгрузкой", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПриВыгрузке", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеВыгрузки", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеВыгрузкиВФайл", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПередЗагрузкой");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПриЗагрузке");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПослеЗагрузки");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("СвойстваПоиска");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Свойства");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Значения");

	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Выгруженные");
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеЗамещать", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеЗапоминатьВыгруженные", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеВыгружатьОбъектыСвойствПоСсылкам", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ВсеОбъектыВыгружены", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПоследовательностьПолейПоиска");
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", "Число", 1, 0);
	
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("ГенерироватьНовыйНомерИлиКодЕслиНеУказан", "Число", 1, 0);
	мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("НеСоздаватьЕслиНеНайден", "Число", 1, 0);
	
КонецПроцедуры // ИнициализацияПравилКонвертацииОбъектов()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ИнициализацияПравилКонвертацииСвойств()
	
	ТаблицаПравилКонвертацииСвойств = СоздатьОбъект("ТаблицаЗначений");
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Код");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Наименование");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Порядок", "Число", 10, 0);

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ЭтоГруппа", "Число", 1, 0);
    ТаблицаПравилКонвертацииСвойств.НоваяКолонка("СвойстваГруппы");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Источник");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ВидИсточника");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ТипИсточника");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("Приемник");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ВидПриемника");
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ТипПриемника");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("КодПравилаКонвертации");

	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПолучитьИзВходящихДанных", "Число", 1, 0);
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("НеЗамещать", "Число", 1, 0);
	
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПередОбработкойВыгрузки", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПередВыгрузкой", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПриВыгрузке", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПослеВыгрузки", "Число", 1, 0);
	ТаблицаПравилКонвертацииСвойств.НоваяКолонка("ПослеОбработкиВыгрузки", "Число", 1, 0);
	
	Возврат ТаблицаПравилКонвертацииСвойств;

КонецФункции // ИнициализацияПравилКонвертацииСвойств()    

//******************************************************************************
//
// Инициализирует колонки таблицы настройки параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыНастройкиПараметров()

	//ТаблицаНастройкиПараметров = СоздатьОбъект("ТаблицаЗначений");
	//ТаблицаНастройкиПараметров.НоваяКолонка("Имя"); 
	//ТаблицаНастройкиПараметров.НоваяКолонка("Наименование"); 
	//ТаблицаНастройкиПараметров.НоваяКолонка("Значение");  
	//
	//ТаблицаНастройкиПараметров.ВидимостьКолонки("Имя",0,);

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

Функция ПолучитьЗначениеУзлаИзXML()
	
	Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
	Значение = Узел.Значение;
	
	ПозицияПоиска = Найти(Значение, РазделительСтрок);
	
	Если (ПозицияПоиска > 0) Тогда
		Возврат Значение;
	Иначе
		
		Значение = СтрЗаменить(Значение, Симв(10),РазделительСтрок);
		Возврат Значение;
		
	КонецЕсли;
	
КонецФункции


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПВД(Родитель, Уровень, НомерГруппы)
	
	мТаблицаПравилВыгрузки.НоваяСтрока();
	мТаблицаПравилВыгрузки.ТекущаяСтрока(мТаблицаПравилВыгрузки.КоличествоСтрок());
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс), ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)));
		
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "ЭтоГруппа", 0);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Уровень", Уровень);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Родитель", Родитель);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "НомерГруппы", НомерГруппы);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
		
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "ПередОбработкойПравила") ИЛИ (Имя = "ПередВыгрузкойОбъекта") ИЛИ (Имя = "ПослеВыгрузкиОбъекта") ИЛИ (Имя = "ПослеОбработкиПравила") Тогда
			
			Значение = 1;
			
		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") ИЛИ (Имя = "ИмяТипаПриемника") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
			
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), Имя, Значение);
			
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;         

КонецПроцедуры // ЗагрузитьПВД()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьГруппуПВД(Родитель, Уровень, НомерГруппы)
	
	НомерГруппы = НомерГруппы + 1;

	ТекущийРодитель = "";
	
	мТаблицаПравилВыгрузки.НоваяСтрока();
	мТаблицаПравилВыгрузки.ТекущаяСтрока(мТаблицаПравилВыгрузки.КоличествоСтрок());
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс), ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)));
		
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "ЭтоГруппа", 1);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Уровень", Уровень);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "Родитель", Родитель);
	мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), "НомерГруппы", НомерГруппы);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПВД(ТекущийРодитель, Уровень + 1, НомерГруппы);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПВД(ТекущийРодитель, Уровень + 1, НомерГруппы);
		
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			мТаблицаПравилВыгрузки.УстановитьЗначение(мТаблицаПравилВыгрузки.ТекущаяСтрока(), Имя, Значение);
			
			Если Имя = "Код" Тогда
				
				ТекущийРодитель = Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	НомерГруппы = НомерГруппы + 1;

КонецПроцедуры // ЗагрузитьГруппуПВД()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаВыгрузкиДанных()
	
	мТаблицаПравилВыгрузки.УдалитьСтроки();
	
	НомерТекущейГруппы = 1;
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПВД("", 0, НомерТекущейГруппы);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПВД("", 0, НомерТекущейГруппы);
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	мТаблицаПравилВыгрузки.Сортировать("НомерГруппы, ЭтоГруппа -, Порядок");
	
КонецПроцедуры // ЗагрузитьПравилаВыгрузкиДанных()
                  
                        
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПКС(СвойстваГруппы = 0, ЭтоГруппа = 0)
	
	Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
		
		НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
		
		Если НаименованиеАтрибута = "Отключить" Тогда
		
			Если ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс)) = 1 Тогда
				
				Возврат;
				
			КонецЕсли;
		
		ИначеЕсли НаименованиеАтрибута = "Поиск" Тогда
			
			Поиск = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));

		КонецЕсли;
		
	КонецЦикла;

	Если Поиск = 1 Тогда
		
		Если СвойстваГруппы = 0 Тогда
			
			Свойства = мТаблицаПравилКонвертацииОбъектов.СвойстваПоиска;
			
		Иначе
			
			Свойства = СвойстваГруппы;
			
		КонецЕсли;
		
	Иначе
		
		Если СвойстваГруппы = 0 Тогда
			
			Свойства = мТаблицаПравилКонвертацииОбъектов.Свойства;
		
		Иначе
			
			Свойства = СвойстваГруппы;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Свойства.НоваяСтрока();
	Свойства.ТекущаяСтрока(Свойства.КоличествоСтрок());
	
	Свойства.ЭтоГруппа = ЭтоГруппа;
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "ПередОбработкойВыгрузки") ИЛИ (Имя = "ПередВыгрузкой") ИЛИ (Имя = "ПриВыгрузке") ИЛИ (Имя = "ПослеВыгрузки") ИЛИ (Имя = "ПослеОбработкиВыгрузки") Тогда
			
			Значение = 1;
			
		ИначеЕсли Имя = "ПолучитьИзВходящихДанных" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗамещать" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "Источник" Тогда
			
			Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
				НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
				
				Если НаименованиеАтрибута = "Имя" Тогда
					
					Свойства.Источник = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Вид" Тогда
					
					Свойства.ВидИсточника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Тип" Тогда
					
					Свойства.ТипИсточника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
		
		ИначеЕсли Имя = "Приемник" Тогда
			
			Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
				НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
				
				Если НаименованиеАтрибута = "Имя" Тогда
					
					Свойства.Приемник = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Вид" Тогда
					
					Свойства.ВидПриемника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
				
				ИначеЕсли НаименованиеАтрибута = "Тип" Тогда
					
					Свойства.ТипПриемника = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;
		
		ИначеЕсли Имя = "Свойство" Тогда
			
			Если ЭтоГруппа = 1 Тогда
				
				Если ПустоеЗначение(Свойства.СвойстваГруппы) = 1 Тогда
					
					Свойства.СвойстваГруппы = ИнициализацияПравилКонвертацииСвойств();
					
				КонецЕсли;
				
				ЗагрузитьПКС(Свойства.СвойстваГруппы);
				Свойства.СвойстваГруппы.Сортировать("Порядок");
				
				ТипТега = мЧтениеXML.Следующий();
				Продолжить;
			
			Иначе
				
				ЗагрузитьПКС();
				мТаблицаПравилКонвертацииОбъектов.Свойства.Сортировать("Порядок");
				
				ТипТега = мЧтениеXML.Следующий();
				Продолжить;
				
			КонецЕсли;
		
		ИначеЕсли Имя = "Группа" Тогда
			
			ЗагрузитьПКС(, 1);
			мТаблицаПравилКонвертацииОбъектов.СвойстваГруппы.Сортировать("Порядок");
			
		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить; 
			
		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		Свойства.УстановитьЗначение(Свойства.ТекущаяСтрока(), Имя, Значение);
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПКС()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииСвойств()
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Свойство", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПКС();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПКС(, 1);
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	мТаблицаПравилКонвертацииОбъектов.Свойства.Сортировать("Порядок");

КонецПроцедуры // ЗагрузитьПравилаКонвертацииСвойств()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииЗначений()
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Значение", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ТипТега = мЧтениеXML.Спуститься();
			
			Источник = "";
			Приемник = "";
			
			Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
			
				Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
				
					Если Имя = "Источник" Тогда
						
						Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
						Источник = Узел.Значение;
					
					ИначеЕсли Имя = "Приемник" Тогда
						
						Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
						Приемник = Узел.Значение;
					
					КонецЕсли;
				
				ТипТега = мЧтениеXML.Следующий();
				
			КонецЦикла;
				
			мТаблицаПравилКонвертацииОбъектов.Значения.Установить(СокрЛП(Источник), СокрЛП(Приемник));
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПравилаКонвертацииЗначений()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПКО(Знач Порядок = "")
	
	мТаблицаПравилКонвертацииОбъектов.НоваяСтрока();
	мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(мТаблицаПравилКонвертацииОбъектов.КоличествоСтрок());
	
	мТаблицаПравилКонвертацииОбъектов.Выгруженные = СоздатьОбъект("СписокЗначений");
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Имя = мЧтениеXML.СвойстваТекущегоУзла.Имя;
		
		Если (Имя = "Порядок") Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = Число(Узел.Значение);
			
			Порядок = СтрЗаменить(Порядок, ",", РазделительСтрок);
			
			Для Индекс = 1 ПО СтрКоличествоСтрок(Порядок) Цикл
			   
				Попытка
					
					мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), "Порядок" + Индекс, Число(СтрПолучитьСтроку(Порядок, Индекс)));
					
				Исключение
					
					мТаблицаПравилКонвертацииОбъектов.НоваяКолонка("Порядок" + Индекс, "Число", 10, 0);
					мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), "Порядок" + Индекс, Число(СтрПолучитьСтроку(Порядок, Индекс)));
					
				КонецПопытки;
				
			КонецЦикла;
		
		ИначеЕсли (Имя = "ПередВыгрузкой") ИЛИ (Имя = "ПриВыгрузке") ИЛИ (Имя = "ПослеВыгрузки") ИЛИ (Имя = "ПослеВыгрузкиВФайл") Тогда
			
			Значение = 1;
			
		ИначеЕсли Имя = "СинхронизироватьПоИдентификатору" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗамещать" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
		
		ИначеЕсли Имя = "НеЗапоминатьВыгруженные" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "ГенерироватьНовыйНомерИлиКодЕслиНеУказан" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "НеСоздаватьЕслиНеНайден" Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			Значение = ПривестиБулевоКЗначению(Узел.Значение);
			
		ИначеЕсли Имя = "Свойства" Тогда
			
			мТаблицаПравилКонвертацииОбъектов.СвойстваПоиска = ИнициализацияПравилКонвертацииСвойств();
			мТаблицаПравилКонвертацииОбъектов.Свойства = ИнициализацияПравилКонвертацииСвойств();
			
			ЗагрузитьПравилаКонвертацииСвойств();
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

			
		ИначеЕсли Имя = "Значения" Тогда
			
			мТаблицаПравилКонвертацииОбъектов.Значения = СоздатьОбъект("СписокЗначений");
			ЗагрузитьПравилаКонвертацииЗначений();
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

		ИначеЕсли (Имя = "Комментарий") ИЛИ (Имя = "Описание") Тогда
			
			ТипТега = мЧтениеXML.Следующий();
			Продолжить;

		Иначе
			
			Значение = ПолучитьЗначениеУзлаИзXML();
			
		КонецЕсли;

		мТаблицаПравилКонвертацииОбъектов.УстановитьЗначение(мТаблицаПравилКонвертацииОбъектов.ТекущаяСтрока(), Имя, Значение);
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьГруппуПКО(Знач Порядок = "")
	
	ПорядокГруппы = 0;
	
	// Группы ПКО в таблицу не добавляются
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Порядок", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			ПорядокГруппы = Число(Узел.Значение);
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПКО(?(ПустаяСтрока(Порядок) = 1, Порядок, Порядок + ",") + Строка(ПорядокГруппы));
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьПКО(?(ПустаяСтрока(Порядок) = 1, Порядок, Порядок + ",") + Строка(ПорядокГруппы));
		
		Иначе
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;

КонецПроцедуры // ЗагрузитьГруппуПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаКонвертацииОбъектов()
	
	мТаблицаПравилКонвертацииОбъектов.УдалитьСтроки();
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
	
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Правило", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			ЗагрузитьПКО();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Группа", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			ЗагрузитьГруппуПКО();
		
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
	
	КонецЦикла;
	
	Индекс = 1;
	СтрокаСортировки = "";
	
	Пока (1 = 1) Цикл
		
		Попытка
	    	
			мТаблицаПравилКонвертацииОбъектов.ТекущаяКолонка("Порядок" + Индекс);
			СтрокаСортировки = СтрокаСортировки + "Порядок" + Индекс + ",";
			
		Исключение
			
			СтрокаСортировки = СтрокаСортировки + "Порядок";
			Прервать;
			
		КонецПопытки;
			
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
	мТаблицаПравилКонвертацииОбъектов.Сортировать(СтрокаСортировки);
	
КонецПроцедуры // ЗагрузитьПравилаКонвертацииОбъектов()
                         
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПараметры()      
            
	Параметры = СоздатьОбъект("ТаблицаЗначений");
	
	Если мВерсияФормата = "2.01" Тогда   
		ТипТега = мЧтениеXML.Спуститься();
		
		Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецУровня) = 0 Цикл
		
			Если ПроверитьИмяТипУзла(мЧтениеXML, "Параметр", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
	
				ИмяПараметра            = ""; 
				НаименованиеПараметра   = "";
				УстанавливатьВДиалоге   = 1; 
				ТипЗначенияПараметра    = "Строка";  
				ИспользуетсяПриЗагрузке = 0;
			
				Для Индекс = 0 По мЧтениеXML.СвойстваТекущегоУзла.КоличествоАтрибутов - 1 Цикл
				
					НаименованиеАтрибута = мЧтениеXML.СвойстваТекущегоУзла.НаименованиеАтрибута(Индекс);
					Если НаименованиеАтрибута = "Имя" Тогда
						ИмяПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "Наименование" Тогда	                         
						НаименованиеПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "УстанавливатьВДиалоге" Тогда	                         
						УстанавливатьВДиалоге = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));
					ИначеЕсли НаименованиеАтрибута = "ТипЗначения" Тогда	                         
						ТипЗначенияПараметра = мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс); 
					ИначеЕсли НаименованиеАтрибута = "ИспользуетсяПриЗагрузке" Тогда
						ИспользуетсяПриЗагрузке = ПривестиБулевоКЗначению(мЧтениеXML.СвойстваТекущегоУзла.ЗначениеАтрибута(Индекс));
						
					КонецЕсли;
			
				КонецЦикла;
				
				Если ПустаяСтрока(ИмяПараметра) = 0 Тогда
					//Параметры.НоваяКолонка(СокрЛП(ИмяПараметра)); 
					Параметры.ВставитьКолонку(СокрЛП(ИмяПараметра));
					Если УстанавливатьВДиалоге = 1 Тогда
						ТаблицаНастройкиПараметров.НоваяСтрока();
						ТаблицаНастройкиПараметров.Имя          = СокрЛП(ИмяПараметра);
						ТаблицаНастройкиПараметров.Наименование = НаименованиеПараметра;
						Если Найти("Строка, Число, Дата",ТипЗначенияПараметра) > 0 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = ТипЗначенияПараметра;
							ТаблицаНастройкиПараметров.ВидЗначения = ТипЗначенияПараметра;
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение(ТипЗначенияПараметра);
						ИначеЕсли Найти(ТипЗначенияПараметра,"ПеречислениеСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Перечисление";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("ПеречислениеСсылка.")+1);
							ПеречислениеДляПараметра = Перечисление.ПолучитьАтрибут(ТаблицаНастройкиПараметров.ВидЗначения);
							ТаблицаНастройкиПараметров.Значение    = ПеречислениеДляПараметра.ЗначениеПоНомеру(1);
						ИначеЕсли Найти(ТипЗначенияПараметра,"СправочникСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Справочник";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("СправочникСсылка.")+1);
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение("Справочник."+ТаблицаНастройкиПараметров.ВидЗначения);
						ИначеЕсли Найти(ТипЗначенияПараметра,"ДокументСсылка.") = 1 Тогда
							ТаблицаНастройкиПараметров.ТипЗначения = "Документ";
							ТаблицаНастройкиПараметров.ВидЗначения = Сред(ТипЗначенияПараметра, СтрДлина("ДокументСсылка.")+1);
							ТаблицаНастройкиПараметров.Значение    = ПолучитьПустоеЗначение("Документ."+ТаблицаНастройкиПараметров.ВидЗначения);
							
						КонецЕсли;    
						
					КонецЕсли;                   
					
					Если ИспользуетсяПриЗагрузке = 1 Тогда
						ТаблицаПараметровДляЗагрузки.НоваяСтрока();    
						ТаблицаПараметровДляЗагрузки.Имя          = ИмяПараметра; 
						ТаблицаПараметровДляЗагрузки.Наименование = НаименованиеПараметра;
					КонецЕсли;
					
					
				КонецЕсли;
			
			КонецЕсли;
			
			ТипТега = мЧтениеXML.Следующий();
		
		КонецЦикла;
		
	Иначе
		Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта(); 
		СтрокаПараметров = СтрЗаменить(Узел.Значение, ",", РазделительСтрок);
		
		Для Индекс = 1 По СтрКоличествоСтрок(СтрокаПараметров) Цикл
			Параметры.НоваяКолонка(СокрЛП(СтрПолучитьСтроку(СтрокаПараметров, Индекс))); 
		КонецЦикла;    
	    
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузитьПараметры()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ЗагрузитьПравила()
	
	Если ПустаяСтрока(ИмяФайлаПравил) = 1 Тогда
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение("Не указано имя файла правил!");
		Иначе
			Сообщить("Не указано имя файла правил!");
		КонецЕсли;
		Возврат 0;
		
	КонецЕсли;

	Состояние("Идет загрузка правил обмена...");
	
	ПравилаВыгрузкиСписок.УдалитьВсе();

	мЧтениеXML.СвязатьСФайлом(ИмяФайлаПравил);
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Если ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаОбмена", ТипТега, мНачалоНовогоЭлемента) = 0 Тогда
		
		ВывестиСообщение("Файл не содержит корневого узла <ПравилаОбмена>!", "!!!");
		Возврат 0;
		
	КонецЕсли;
	
	мИд = "";
	мНаименование = "";
	мДатаВремяСоздания = "";
	мКонфигурацияИсточник = "";
	мКонфигурацияПриемник = "";
	мВерсияФормата = "";
	
	мКонвертацияПередВыгрузкойДанных      = 0;
	мКонвертацияПередВыгрузкойОбъекта     = 0;
	мКонвертацияПередКонвертациейОбъекта  = 0;
	мКонвертацияПослеВыгрузкиОбъекта      = 0;
	мКонвертацияПослеВыгрузкиДанных       = 0;
	мКонвертацияПослеЗагрузкиПравилОбмена = 0;
	
	// Очищаем настройки параметров
	ТаблицаНастройкиПараметров.УдалитьСтроки(); 
	ТаблицаПараметровДляЗагрузки.УдалитьСтроки(); 
	
	// Очищаем отборы
	ТаблицаНастройкиОтбора.УдалитьСтроки();
	ИмяПВДДляНастройкиОтбора = "";
	ОбъектДляНастройкиОтбора = "";
	КодПВДДляНастройкиОтбора = "";
	
	ТипТега = мЧтениеXML.Спуститься();
	
	Пока ПроверитьИмяТипУзла(мЧтениеXML,, ТипТега, мКонецДокумента) = 0 Цикл
		
		Если ПроверитьИмяТипУзла(мЧтениеXML, "Ид", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мИд = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ВерсияФормата", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мВерсияФормата = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Наименование", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мНаименование = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ДатаВремяСоздания", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мДатаВремяСоздания = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Источник", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонфигурацияИсточник = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Приемник", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			Узел = мЧтениеXML.ТекущийЭлементВВидеОбъекта();
			мКонфигурацияПриемник = Узел.Значение;
			ВерсияПлатформыПриемника = Узел.ПолучитьАтрибут("ВерсияПлатформы");
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередВыгрузкойДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередВыгрузкойДанных = 1;
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередВыгрузкойОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередВыгрузкойОбъекта = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередКонвертациейОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПередКонвертациейОбъекта = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеВыгрузкиОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПослеВыгрузкиОбъекта = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеВыгрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
		
			мКонвертацияПослеВыгрузкиДанных = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиПравилОбмена", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиПравилОбмена = 1;
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередЗагрузкойДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередЗагрузкойДанных = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПередЗагрузкойОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПередЗагрузкойОбъекта = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиОбъекта", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиОбъекта = ПолучитьЗначениеУзлаИзXML();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПослеЗагрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			
			мКонвертацияПослеЗагрузкиДанных = ПолучитьЗначениеУзлаИзXML();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаКонвертацииОбъектов", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда

			ЗагрузитьПравилаКонвертацииОбъектов();
			
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "ПравилаВыгрузкиДанных", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда

			ЗагрузитьПравилаВыгрузкиДанных();
		
		ИначеЕсли ПроверитьИмяТипУзла(мЧтениеXML, "Параметры", ТипТега, мНачалоНовогоЭлемента) = 1 Тогда
			                                              
			ЗагрузитьПараметры();
			
		КонецЕсли;
		
		ТипТега = мЧтениеXML.Следующий();
		
	КонецЦикла;
	
	Состояние("Загрузка правил обмена завершена.");
	
	// Глобальный обработчик "ПослеЗагрузкиПравилОбмена"
	Если мКонвертацияПослеЗагрузкиПравилОбмена = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПослеЗагрузкиПравилОбмена()]");
		
		Если Число(Отказ) = 1 Тогда
			
			ВывестиСообщение("Ошибка в обработчике ПослеЗагрузкиПравилОбмена!", "!!!");
			Возврат 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мТаблицаПравилВыгрузки.ВыбратьСтроки();
	
	Пока мТаблицаПравилВыгрузки.ПолучитьСтроку() > 0 Цикл
		
		Префикс = "";
		
		Если мТаблицаПравилВыгрузки.ЭтоГруппа = 1 Тогда
			
			Наименование = "[ " + СокрЛП(мТаблицаПравилВыгрузки.Наименование) + " ]";
		
		Иначе
			
			Наименование = "-" + СокрЛП(мТаблицаПравилВыгрузки.Наименование);
			
		КонецЕсли;
		
		Для Индекс = 0 По мТаблицаПравилВыгрузки.Уровень - 1 Цикл
			
			Префикс = Префикс + "   ";
			
		КонецЦикла;
		
		Наименование = Префикс + Наименование;
		
		ПравилаВыгрузкиСписок.ДобавитьЗначение(мТаблицаПравилВыгрузки.Код, Наименование);
		
		// Если в обработку был передан список кодов правил выгрузки, будем выгружать
		// именно их, а не те, которые установлены в правилах выгрузки по умолчанию
		Если ПустоеЗначение(мИспользуемыеПравилаВыгрузки) = 0 Тогда
			Если Найти(мИспользуемыеПравилаВыгрузки, мТаблицаПравилВыгрузки.Код) = 0 Тогда
				Пометка = 0;
			Иначе
				Пометка = ?(мТаблицаПравилВыгрузки.Отключить = 1, 0, 1);
			КонецЕсли;
		Иначе
			Пометка = ?(мТаблицаПравилВыгрузки.Отключить = 1, 0, 1);
		КонецЕсли;
		
		ПравилаВыгрузкиСписок.Пометка(ПравилаВыгрузкиСписок.РазмерСписка(), Пометка);
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ЗагрузитьПравила()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция НайтиПравило(Объект, ИмяПравила = "")
	
	Перем НомерСтроки;
	
	Если ПустаяСтрока(СокрЛП(ИмяПравила)) = 0 Тогда
		
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(СокрЛП(ИмяПравила), НомерСтроки, "Код");
		
	ИначеЕсли ТипЗначения(Объект) < 4 Тогда
	
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(ТипЗначенияСтр(Объект), НомерСтроки, "Код");
		
	ИначеЕсли ТипЗначения(Объект) < 100 Тогда
	
		мТаблицаПравилКонвертацииОбъектов.НайтиЗначение(ТипЗначенияСтр(Объект) + "Ссылка." + Объект.Вид(), НомерСтроки, "Источник");
		
	Иначе
	
		НомерСтроки = 0;
		
	КонецЕсли;
	
	Возврат НомерСтроки; 

КонецФункции // НайтиПравило()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьРеквизитПКО(НомерПКО, Реквизит)
	
	Возврат мТаблицаПравилКонвертацииОбъектов.ПолучитьЗначение(НомерПКО, Реквизит);
	
КонецФункции // ПолучитьРеквизитПКО()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, Реквизит)
	
	Возврат КоллекцияПКС.ПолучитьЗначение(НомерПКС, Реквизит);
	
КонецФункции // ПолучитьРеквизитПКС()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОСТУПА К ДАННЫМ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ПолучитьЗначение(Объект, Имя)
	
	Значение = мПустоеЗначение;
	
	Если ТипЗначенияСтр(Объект) = "СписокЗначений" Тогда
		
		Значение = Объект.Получить(Имя);
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "ТаблицаЗначений" Тогда
	
		Значение = Объект.ПолучитьЗначение(Объект.НомерСтроки, Имя);
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "Справочник" Тогда
		
		Если Имя = "ПометкаУдаления" Тогда
			
			Значение = Объект.ПометкаУдаления();
		
		ИначеЕсли Имя = "Код" Тогда
			
			Значение = Объект.Код;
		
		ИначеЕсли Имя = "Наименование" Тогда
			
			Значение = Объект.Наименование;
		
		ИначеЕсли Имя = "ЭтоГруппа" Тогда
			
			Значение = Объект.ЭтоГруппа();
		
		ИначеЕсли Имя = "Родитель" Тогда
			
			Значение = Объект.Родитель;
			
		Иначе
	
			Попытка
			
        		Значение = Объект.ПолучитьАтрибут(Имя);
			
			Исключение
				
				ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
				ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
				
			КонецПопытки;
			
			Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
				
				Значение = мПустоеЗначение;
			    
			КонецЕсли;
			
		КонецЕсли;
		 
	ИначеЕсли ТипЗначенияСтр(Объект) = "Документ" Тогда
		
		Если Имя = "ПометкаУдаления" Тогда
			
			Значение = Объект.ПометкаУдаления();
		
		ИначеЕсли Имя = "НомерДок" Тогда
			
			Значение = Объект.НомерДок;
			
		ИначеЕсли Имя = "ДатаДок" Тогда
			
			Значение = ПолучитьДатуV8(Объект.ДатаДок, Объект.ПолучитьВремя());
		
		ИначеЕсли Имя = "Проведен" Тогда
			
			Значение = Объект.Проведен();
		
		ИначеЕсли Имя = "ТабличнаяЧасть" Тогда
			
			Объект.ВыгрузитьТабличнуюЧасть(Значение);
			
		Иначе
         
			Значение = Объект.ПолучитьАтрибут(Имя);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗначенияСтр(Объект) = "НеизвестныйОбъект" Тогда // Например, константы
		
		Попытка
		
			Значение = Объект.ПолучитьАтрибут(Имя);
		
		Исключение
			
			ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
			ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
			
		КонецПопытки;
		
		// Возможно это периодическая константа
		Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
			
			Попытка
			
				Значение = Объект.ПолучитьАтрибут(Имя).Получить(ДатаОкончания);
			
			Исключение
				
				ВывестиСообщение("Ошибка получения значения свойства объекта", "!!!");
				ВывестиСообщение(СимволТабуляции + "Объект: " + Строка(Объект) + ", свойство: " + Имя + ".");
				
			КонецПопытки;
		
		КонецЕсли;
		
		// Тогда уж точно что-то еще нам неизвестное...
		Если ТипЗначенияСтр(Значение) = "НеизвестныйОбъект" Тогда
			
			Значение = мПустоеЗначение;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначение()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ВЫГРУЗКИ ПО ПРАВИЛАМ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, 
	НомерПКГС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку = 0)

	
	КоллекцияОбъектов = мПустоеЗначение;
	НеЗамещать        = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "НеЗамещать");
	НеОчищать         = 0;

	
	// Обработчик "ПередОбработкойВыгрузки"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПередОбработкойВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
		
		Отказ = Шаблон("[ПКГС_ПередОбработкойВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, НеЗамещать, НеОчищать)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	ВидИсточника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидИсточника");
    ВидПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника");
	
    // Создание узла коллекции подчиненных объектов
	Если ВидПриемника = "ТабличнаяЧасть" Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел("ТабличнаяЧасть");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если НеОчищать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать", "true");
			
		КонецЕсли;
	
	ИначеЕсли Найти(ВидПриемника, "НаборДвижений") > 0 Тогда
		
		УзелКоллекцииОбъектов = СоздатьУзел("НаборЗаписей");
		УстановитьАтрибут(УзелКоллекцииОбъектов, "Имя",	ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если НеОчищать = 1 Тогда
			
			УстановитьАтрибут(УзелКоллекцииОбъектов, "НеОчищать", "true");
			
		КонецЕсли;
		
	Иначе  // это простая группировка
		
		ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "СвойстваГруппы"), 
			УзелКоллекцииСвойств,, СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")), , ВыгрузитьТолькоСсылку);
		
		// Обработчик "ПослеОбработкиВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеОбработкиВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПослеОбработкиВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, УзелКоллекцииОбъектов)]");
	
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	
	// Получение коллекции подчиненных объектов
	
	Если КоллекцияОбъектов <> мПустоеЗначение Тогда
		
		// Инициализировали коллекцию в обработчике ПередОбработкой
		
	ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПолучитьИзВходящихДанных") = 1 Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
	ИначеЕсли ВидИсточника = "ТабличнаяЧасть" Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Источник"));
		
	ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Источник")) = 1 Тогда
		
		КоллекцияОбъектов = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник"));
		
	КонецЕсли;

	Попытка
		
		КоллекцияОбъектов.ВыбратьСтроки();
		
	Исключение
		
		ВывестиСообщение("Ошибка выбора объектов коллекции", "!!!");
		
		Возврат;
		
	КонецПопытки;
	
	Пока КоллекцияОбъектов.ПолучитьСтроку() > 0 Цикл
		
		Индекс = 1 + Индекс;
		КоллекцияОбъектов.ТекущаяСтрока(Индекс);
		
		// Обработчик "ПередВыгрузкой"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПередВыгрузкой") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		УзелОбъектаКоллекции = СоздатьУзел("Запись");
		СтандартнаяОбработка = 1;
		
		// Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов, УзелОбъектаКоллекции, СтандартнаяОбработка)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;

		// Выгрузка свойств объекта коллекции
		
		Если СтандартнаяОбработка = 1 Тогда
			
			СвойстваГруппы = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "СвойстваГруппы");
			
			Если СвойстваГруппы.КоличествоСтрок() > 0 Тогда
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, СвойстваГруппы, УзелОбъектаКоллекции, 
					КоллекцияОбъектов, СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")), , ВыгрузитьТолькоСсылку);
				
			Иначе
				
				//	ПО ПРАВИЛУ
				
			КонецЕсли;
			
		КонецЕсли;

		
		// Обработчик "ПослеВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
			
			Отказ = Шаблон("[ПКГС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, КоллекцияОбъектов, УзелКоллекцииОбъектов, УзелОбъектаКоллекции)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииОбъектов, УзелОбъектаКоллекции);
		
	КонецЦикла;

	
    // Обработчик "ПослеОбработкиВыгрузки"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ПослеОбработкиВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКГС, "Код")));
		
		Отказ = Шаблон("[ПКГС_ПослеОбработкиВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, УзелКоллекцииОбъектов)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;

	ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелКоллекцииОбъектов);

КонецПроцедуры // ВыгрузитьГруппуСвойств()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, 
	НомерПКС, УзелКоллекцииСвойств = 0, ОбъектКоллекции = 0, ПравилоРодитель = "", Знач ВыгрузитьТолькоСсылку = 0)
	
	// Инициализация значения
	Значение = мПустоеЗначение;
	ИмяПКО = "";
	ИмяПКОВидСубконто = "";
	НеЗамещать   = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "НеЗамещать");
	
	Пусто		 = 0;
	Выражение	 = мПустоеЗначение;
	ТипПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ТипПриемника");
	
	// Обработчик "ПередВыгрузкой"
	Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПередВыгрузкой") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
		
		Отказ = Шаблон("[ПКС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
	
	Если Значение = мПустоеЗначение Тогда
		
		Если ОбъектКоллекции <> мПустоеЗначение Тогда
			
			Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
				
				Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
				
			ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
				
				Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
				
			Иначе

				Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
				
			КонецЕсли;
			
		ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
			
			Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
		ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
			
			Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
			
		Иначе
			
			Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗначенияСтр(Значение) <> "ТаблицаЗначений" Тогда
		
		ВывестиСообщение("Коллекция субконто не является таблицей значений", "!!!");
		Возврат;
	    
	КонецЕсли;
	
	Значение.ВыбратьСтроки();
	
	Пока Значение.ПолучитьСтроку() > 0 Цикл
		
		ВидСубконто = Значение.Ключ;
		Субконто = Значение.Значение;
		
		//Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ВидСубконто, Субконто, Пусто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Если ПустоеЗначение(Субконто) = 0 Тогда
			
			УзелСубконто = СоздатьУзел(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
			
			// Ключ
			УзелСвойства = СоздатьУзел("Свойство");
			
		
			НомерПКОКлюч = НайтиПравило(, ИмяПКОВидСубконто);
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Ключ");
			УстановитьАтрибут(УзелСвойства, "Тип", ПолучитьРеквизитПКО(НомерПКОКлюч, "Приемник"));
						
			УзелСсылки = ВыгрузитьПоПравилу(ВидСубконто,, ИсходящиеДанные,, ИмяПКОВидСубконто,,ВыгрузитьТолькоСсылку, НомерПКОКлюч);
			
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				
			КонецЕсли;
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
			// Значение
			УзелСвойства = СоздатьУзел("Свойство");
			
			ТипЗначенияСубконто = ТипЗначенияСтр(Субконто);
			
			Если (ИмяПКО = "") И ((ТипЗначенияСубконто = "Строка") ИЛИ (ТипЗначенияСубконто = "Число") ИЛИ (ТипЗначенияСубконто = "Булево") ИЛИ (ТипЗначенияСубконто = "Дата")) Тогда
				
				НомерПКОЗначение = 0;
				ТипПриемника = ТипЗначенияСубконто;
				
			Иначе
			
				НомерПКОЗначение = НайтиПравило(Субконто, ИмяПКО);
				ТипПриемника = ПолучитьРеквизитПКО(НомерПКОЗначение, "Приемник");
				
			КонецЕсли;				
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
			УзелСсылки = ВыгрузитьПоПравилу(Субконто,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОЗначение);
			
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				
			КонецЕсли;
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
			// Обработчик "ПослеВыгрузки"
			Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПослеВыгрузки") = 1 Тогда
				
				КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
				
				Отказ = Шаблон("[ПКС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ВидСубконто, Субконто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства, УзелСсылки)]");
		
			КонецЕсли;
				
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСубконто);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьСубконто()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, УзелКоллекцииСвойств = 0, 
	ОбъектКоллекции = 0, ПравилоРодитель = "", ИмяПредопределенногоЭлемента = "", Знач ВыгрузитьТолькоСсылку = 0)
	
	Если УзелКоллекцииСвойств = 0 Тогда
		
		УзелКоллекцииСвойств = Приемник;
		
	КонецЕсли; 							
	
	// Выгружаем имя предопределенного если оно указано
	Если ПустаяСтрока(ИмяПредопределенногоЭлемента) = 0 Тогда
		УзелСвойства = СоздатьУзел("Свойство");
		УстановитьАтрибут(УзелСвойства, "Имя", "{ИмяПредопределенногоЭлемента}");
		УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
		ЗаписатьЭлемент(УзелСвойства, "Значение", ИмяПредопределенногоЭлемента);
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
	КонецЕсли;
	
	Если ПустоеЗначение(КоллекцияПКС) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерПКС = 1 По КоллекцияПКС.КоличествоСтрок() Цикл
		
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника") = "ВидыСубконтоСчета" Тогда
			
			ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, НомерПКС, 
				УзелКоллекцииСвойств, ОбъектКоллекции, ПравилоРодитель, ВыгрузитьТолькоСсылку);
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ЭтоГруппа") = 1 Тогда
			
			ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, КоллекцияПКС, НомерПКС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку);
			Продолжить;
			
		КонецЕсли;

		//Инициализация конвертируемого значения
        Значение 	      = мПустоеЗначение;
		ИмяПКО		      = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "КодПравилаКонвертации");
		ИмяПКОВидСубконто = "";
		НеЗамещать        = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "НеЗамещать");
		
		Пусто		 = 0;
		Выражение	 = мПустоеЗначение;
		ТипПриемника = ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ТипПриемника");

		// Обработчик "ПередВыгрузкой"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПередВыгрузкой") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПередВыгрузкой_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, ТипПриемника, ИмяПКО, ИмяПКОВидСубконто, Пусто, Выражение, НеЗамещать, УзелКоллекцииСвойств)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
        // Создаем узел свойства
		УзелСвойства = СоздатьУзел("Свойство");
		УстановитьАтрибут(УзелСвойства, "Имя", ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
		
		Если НеЗамещать = 1 Тогда
			
			УстановитьАтрибут(УзелСвойства, "НеЗамещать", "true");
			
		КонецЕсли;
		
		// Возможно правило конвертации уже определено
		НомерПКОСвойств = мПустоеЗначение;
		
		Если ПустаяСтрока(ИмяПКО) = 0 Тогда
			
			НомерПКОСвойств = НайтиПравило(, ИмяПКО);
			
		КонецЕсли;
		
		// Попытка определить тип свойства приемника
		Если ПустаяСтрока(ТипПриемника) = 0 Тогда
			
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
		ИначеЕсли НомерПКОСвойств <> мПустоеЗначение Тогда
			
			ТипПриемника = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
			УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			
		КонецЕсли;

		// Определяем конвертируемое значение
		Если Выражение <> мПустоеЗначение Тогда
			
			ЗаписатьЭлемент(УзелСвойства, "Выражение", Выражение);
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		ИначеЕсли Пусто = 1 Тогда
			
			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		ИначеЕсли Значение = мПустоеЗначение Тогда
			
			Если ОбъектКоллекции <> 0 Тогда
				
				Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
					
					Попытка
						
						Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из входящих данных", "!!!");
						
					КонецПопытки;
					
				ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
					
					Попытка
						
						Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из объекта коллекции. Свойство: "+ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"), "!!!");
						
					КонецПопытки;
						
				Иначе

					Попытка
						
						Значение = ПолучитьЗначение(ОбъектКоллекции, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
						
					Исключение
						
						ВывестиСообщение("Ошибка получения свойства из объекта коллекции. Свойство: "+ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"), "!!!");
						
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПолучитьИзВходящихДанных") = 1 Тогда
				
				Попытка
					
					Значение = ПолучитьЗначение(ВходящиеДанные, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
				Исключение
					
				КонецПопытки;
				
			ИначеЕсли ПустаяСтрока(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник")) = 0 Тогда
				
				Попытка
					
					Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Источник"));
					
				Исключение
					
				КонецПопытки;
				
			Иначе // получаем конвертируемое значение по имени свойства приемника
				
				Попытка
					
					Значение = ПолучитьЗначение(Источник, ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник"));
					
				Исключение
					
				КонецПопытки;
				
			КонецЕсли;
				
		КонецЕсли;

		Пусто = ПустоеЗначение(Значение);
		
		//Обработчик "ПриВыгрузке"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПриВыгрузке") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПриВыгрузке_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, """", """", Пусто, ИмяПКО, ИмяПКОВидСубконто, УзелСвойства)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		Пусто = ПустоеЗначение(Значение);
		
		Если Пусто = 1 Тогда
			
			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
			Продолжить;
			
		КонецЕсли;
		
		УзелСсылки = мПустоеЗначение;
		
		Если (НомерПКОСвойств <> мПустоеЗначение) ИЛИ (ПустаяСтрока(ИмяПКО) = 0) Тогда
			
			УзелСсылки    = ВыгрузитьПоПравилу(Значение,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОСвойств);
			ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);

			Если ПустаяСтрока(ТипПриемника) = 1 Тогда
				
				ТипПриемника = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
				УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
			КонецЕсли;
			
			Если УзелСсылки = мПустоеЗначение Тогда
				
				Продолжить;
				
			ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
				
				Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
					
					ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
					
				Иначе
					
					ЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
				КонецЕсли;
				
			ИначеЕсли ТипУзлаСсылки = "Число" Тогда
				
				ЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
				
			Иначе
				
				ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
				
			КонецЕсли;
			
		Иначе
			
			ТипЗнач = ТипЗначенияСтр(Значение);
			
			Если ТипЗнач = "Строка" Тогда
				
				Если ТипПриемника = "Строка"  Тогда
				ИначеЕсли ТипПриемника = "Число"  Тогда
					
					Значение = Число(Значение);
					
				ИначеЕсли ТипПриемника = "Булево"  Тогда
					
					Значение = Значение;
					
				ИначеЕсли ТипПриемника = "Дата"  Тогда
					
					Значение = Значение;
					
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Строка");
					
				Иначе
					
				КонецЕсли;
				
				ЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
			ИначеЕсли ТипЗнач = "Число" Тогда
				
				Если ТипПриемника = "Число"  Тогда
				ИначеЕсли ТипПриемника = "Булево"  Тогда
					
					Значение = ПривестиЗначениеКБулево(Значение);
					
				ИначеЕсли ТипПриемника = "Строка"  Тогда
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Число");
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				ЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
			ИначеЕсли ТипЗнач = "Дата" Тогда
				
				Если ТипПриемника = "Дата"  Тогда
					
					Значение = ПолучитьДатуV8(Значение);
					
				ИначеЕсли ТипПриемника = "Строка"  Тогда
					
					Значение = Строка(Значение);
					
				ИначеЕсли ПустаяСтрока(ТипПриемника) = 1 Тогда
					
					УстановитьАтрибут(УзелСвойства, "Тип", "Дата");
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				ЗаписатьЭлемент(УзелСвойства, "Значение", Значение);
				
			Иначе
				
				НомерПКОСвойств = НайтиПравило(Значение, "");
				
				Если НомерПКОСвойств > 0 Тогда
					
					ИмяПКО = ПолучитьРеквизитПКО(НомерПКОСвойств, "Код");
					
					Если ПустаяСтрока(ТипПриемника) = 1 Тогда
						
						ТипПриемника  = ПолучитьРеквизитПКО(НомерПКОСвойств, "Приемник");
						УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
						
					КонецЕсли;
					
					УзелСсылки    = ВыгрузитьПоПравилу(Значение,, ИсходящиеДанные,, ИмяПКО,, ВыгрузитьТолькоСсылку, НомерПКОСвойств);
					ТипУзлаСсылки = ТипЗначенияСтр(УзелСсылки);
					
					Если УзелСсылки = мПустоеЗначение Тогда
						
						Продолжить;
						
					ИначеЕсли ТипУзлаСсылки = "Строка" Тогда
						
						Если Найти(УзелСсылки, "</Ссылка>") > 0 Тогда
							
							ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
							
						Иначе
							
							ЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
							
						КонецЕсли;
						
					ИначеЕсли ТипУзлаСсылки = "Число" Тогда
						
						ЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
						
					Иначе
						
						ДобавитьПодчиненный(УзелСвойства, УзелСсылки.cloneNode(1));
						
					КонецЕсли;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

		// Обработчик "ПослеВыгрузки"
		Если ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ПослеВыгрузки") = 1 Тогда
			
			КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код")) + "_" + ?(ПустаяСтрока(ПравилоРодитель) = 1, "", ПравилоРодитель + "_") + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Приемник")) + "_" + СокрЛП(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "ВидПриемника")) + СокрЛП(Строка(ПолучитьРеквизитПКС(КоллекцияПКС, НомерПКС, "Код")));
			
			Отказ = Шаблон("[ПКС_ПослеВыгрузки_" + КодПравила + "(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКС, НомерПКО, ОбъектКоллекции, Значение, """", """", ИмяПКО, ИмяПКОВидСубконто, УзелСвойства, УзелСсылки)]");
			
			Если Число(Отказ) = 1 Тогда
				
				Продолжить;
				
			КонецЕсли;
	
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
		
	КонецЦикла;		//	по ПКС

КонецПроцедуры // ВыгрузитьСвойства()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО = "", УзелСсылки = "", ТолькоПолучитьУзелСсылки = 0, 
	НомерПКО = 0)

	// Поиск ПКО
	Если НомерПКО = 0 Тогда
		
		НомерПКО = НайтиПравило(Источник, ИмяПКО);
		
		Если НомерПКО = 0 Тогда
			
			ВывестиСообщение("Не найдено правило конвертации объекта: " + Строка(Источник), "!!!");
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
	ИначеЕсли ПустаяСтрока(ИмяПКО) = 0 Тогда
		
		НомерПКО = НайтиПравило(Источник, ИмяПКО);
		
		Если НомерПКО = 0 Тогда
			
			ВывестиСообщение("Не найдено правило конвертации объекта: " + ИмяПКО, "!!!");
			Возврат мПустоеЗначение;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Если КомментироватьВыгрузкуОбъектов	= 1 Тогда
		
		ВывестиСообщение("Конвертация объекта или получение ссылки:  " + Строка(Источник) + "  (" + ТипЗначенияСтр(Источник) + ")");
		
	КонецЕсли;

	НеЗапоминатьВыгруженные     = ПолучитьРеквизитПКО(НомерПКО, "НеЗапоминатьВыгруженные");
	НеВыгружатьОбъектыСвойствПоСсылкам = ПолучитьРеквизитПКО(НомерПКО, "НеВыгружатьОбъектыСвойствПоСсылкам");
	ВыгруженныеОбъекты          = ПолучитьРеквизитПКО(НомерПКО, "Выгруженные");
	ВсеОбъектыВыгружены         = ПолучитьРеквизитПКО(НомерПКО, "ВсеОбъектыВыгружены");
	НеЗамещатьОбъектПриЗагрузке = ПолучитьРеквизитПКО(НомерПКО, "НеЗамещать");
	НеСоздаватьЕслиНеНайден     = ПолучитьРеквизитПКО(НомерПКО, "НеСоздаватьЕслиНеНайден");
	
	РежимЗаписи     			= "";
	РежимПроведения 			= "";
	
	// Ключ выгружаемых данных
	Если (ПустоеЗначение(Источник) = 0) И (НеЗапоминатьВыгруженные = 0) Тогда
		
		КлючВыгружаемыхДанных = ЗначениеВСтрокуВнутр(Источник);
		
	Иначе
		
		КлючВыгружаемыхДанных = НомерПКО;
		НеЗапоминатьВыгруженные = 1;
		
	КонецЕсли;
	
	// Переменная для хранения имени предопределенного элемента
	ИмяПредопределенногоЭлемента = "";

	// Глобальный обработчик "ПередКонвертациейОбъекта"
	Если мКонвертацияПередКонвертациейОбъекта = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПередКонвертациейОбъекта(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик "ПередВыгрузкой"
	Если ПолучитьРеквизитПКО(НомерПКО, "ПередВыгрузкой") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Отказ = Шаблон("[ПКО_ПередВыгрузкой_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, КлючВыгружаемыхДанных, НеЗапоминатьВыгруженные, НеЗамещатьОбъектПриЗагрузке, НеСоздаватьЕслиНеНайден, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, Приемник, РежимЗаписи, РежимПроведения)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возможно, такие данные уже выгружались
	Если ВсеОбъектыВыгружены = 0 Тогда
		
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			УзелСсылки = ВыгруженныеОбъекты.Получить(КлючВыгружаемыхДанных);
			
			Если ПустоеЗначение(УзелСсылки) = 0 Тогда
				
				Возврат УзелСсылки;
				
			КонецЕсли;
			
		КонецЕсли;
		                                     
		Состояние("Выгружено объектов: " + мСчетчикВыгруженныхОбъектов);     
		
		мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;
		Нпп = мСчетчикВыгруженныхОбъектов;

		// Это позволит избежать циклических ссылок
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, Нпп);
			
		КонецЕсли;

	КонецЕсли; 
    
	СписокЗначенийВрем = ПолучитьРеквизитПКО(НомерПКО, "Значения");
    СписокЗначений = СоздатьОбъект("СписокЗначений");
    СписокЗначенийВрем.выгрузить(СписокЗначений);
	
	Если (ВерсияПлатформыПриемника = "8.0") Или (ВерсияПлатформыПриемника = "УП") Тогда
		
		Если ТипЗначения(Источник) <> 10 Тогда
			
			// Поиск в списке значений
			Если (ТипЗначения(Источник) = 16) Тогда //вид субконто
				
				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник.Идентификатор()));
				
			ИначеЕсли (ТипЗначения(Источник) = 14) Тогда //вид расчета
				
				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник.Код));
			
			Иначе

				ИмяПредопределенногоЭлемента = СписокЗначений.Получить(Строка(Источник));

			КонецЕсли;
			
			СписокЗначений.УдалитьВсе();
			
		Иначе
			
			ИмяПредопределенногоЭлемента = "";
			
		КонецЕсли;
		
	КонецЕсли;
		

	Если СписокЗначений.РазмерСписка() = 0 Тогда
		
		СвойстваПоиска = ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска");
		
		Если (СвойстваПоиска.КоличествоСтрок() > 0) ИЛИ (ПустаяСтрока(ИмяПредопределенногоЭлемента) = 0) Тогда
			
			Если (НеВыгружатьОбъектыСвойствПоСсылкам = 1) ИЛИ (ТолькоПолучитьУзелСсылки = 1) Тогда
				ВыгрузитьТолькоСсылку = 1;
			Иначе
		    	ВыгрузитьТолькоСсылку = 0;
			КонецЕсли;
			
			// Формируем узел ссылки
			УзелСсылки = СоздатьУзел("Ссылка");
			
			Если (НеЗапоминатьВыгруженные = 0) И (ВсеОбъектыВыгружены = 0) Тогда
				
				УстановитьАтрибут(УзелСсылки, "Нпп", Нпп);
				
				Если НеСоздаватьЕслиНеНайден = 1 Тогда
					
					УстановитьАтрибут(УзелСсылки, "НеСоздаватьЕслиНеНайден", "true");
					
				КонецЕсли;
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска"), 
					УзелСсылки, , , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку);
				
				ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, УзелСсылки);
				
			Иначе
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "СвойстваПоиска"), 
					УзелСсылки, , , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку);
				
			КонецЕсли;
			
		Иначе
			
			УзелСсылки = Нпп;
			
		КонецЕсли;
		
	Иначе
		
		// Поиск в списке значений
		Если (ТипЗначения(Источник) = 10) ИЛИ (ТипЗначения(Источник) = 16) Тогда //Перечисление или вид субконто
			
			УзелСсылки = СписокЗначений.Получить(Строка(Источник.Идентификатор()));

		Иначе

			УзелСсылки = СписокЗначений.Получить(Строка(Источник));

		КонецЕсли;
		
		Если УзелСсылки = мПустоеЗначение Тогда
			
			ВывестиСообщение("Значение не найдено: " + Строка(Источник), "!!!");
			Возврат мПустоеЗначение;
			
		КонецЕсли;
		
		Если НеЗапоминатьВыгруженные = 0 Тогда
			
			ВыгруженныеОбъекты.Установить(КлючВыгружаемыхДанных, УзелСсылки);
			
		КонецЕсли;
		
		Возврат УзелСсылки;
	
	КонецЕсли;
		
	Если (ТолькоПолучитьУзелСсылки = 1) ИЛИ (ВсеОбъектыВыгружены = 1) Тогда
		
		Возврат УзелСсылки;
		
	КонецЕсли; 
	
	Если Приемник = мПустоеЗначение Тогда
		
		Приемник = СоздатьУзел("Объект");
		УстановитьАтрибут(Приемник, "Нпп", Нпп);
		УстановитьАтрибут(Приемник, "Тип", ПолучитьРеквизитПКО(НомерПКО, "Приемник"));
		УстановитьАтрибут(Приемник, "ИмяПравила", ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Если НеЗамещатьОбъектПриЗагрузке = 1 Тогда
			
			УстановитьАтрибут(Приемник, "НеЗамещать", "true");
			
		КонецЕсли;
		
		Если ПустаяСтрока(РежимЗаписи) = 0 Тогда
			
			УстановитьАтрибут(Приемник, "РежимЗаписи",	РежимЗаписи);
			
			Если ПустаяСтрока(РежимПроведения) = 0 Тогда
				
				УстановитьАтрибут(Приемник, "РежимПроведения",	РежимПроведения);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗначенияСтр(УзелСсылки) <> "Число" Тогда
			
			ДобавитьПодчиненный(Приемник, УзелСсылки.cloneNode(1));
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = 1;
   	
	// Обработчик "ПриВыгрузке"
	Если ПолучитьРеквизитПКО(НомерПКО, "ПриВыгрузке") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Отказ = Шаблон("[ПКО_ПриВыгрузке_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, СтандартнаяОбработка, Приемник, УзелСсылки)]");

	КонецЕсли;
	
	// Выгрузка свойств
	Если СтандартнаяОбработка = 1 Тогда
		
		Если (НеВыгружатьОбъектыСвойствПоСсылкам = 1) ИЛИ (ТолькоПолучитьУзелСсылки = 1) Тогда
			ВыгрузитьТолькоСсылку = 1;
		Иначе
			ВыгрузитьТолькоСсылку = 0;
		КонецЕсли;
		
		ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, НомерПКО, ПолучитьРеквизитПКО(НомерПКО, "Свойства"),
			, , , , ВыгрузитьТолькоСсылку);
		
	КонецЕсли; 
	
	// Обработчик ПослеВыгрузки
	Если ПолучитьРеквизитПКО(НомерПКО, "ПослеВыгрузки") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Отказ = Шаблон("[ПКО_ПослеВыгрузки_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, Приемник, УзелСсылки)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат УзелСсылки;
			
		КонецЕсли;

	КонецЕсли;
	
	// Запись объекта
	ДобавитьПодчиненный(rootNode, Приемник);
	
	// Обработчик ПослеВыгрузкиВФайлОбмена
	Если ПолучитьРеквизитПКО(НомерПКО, "ПослеВыгрузкиВФайл") = 1 Тогда
		
		КодПравила = СокрЛП(ПолучитьРеквизитПКО(НомерПКО, "Код"));
		
		Отказ = Шаблон("[ПКО_ПослеВыгрузкиВФайлОбмена_" + КодПравила + "(Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, Приемник, УзелСсылки)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат УзелСсылки;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат УзелСсылки;

КонецФункции // ВыгрузитьПоПравилу()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузкаОбъектаВыборки(Объект, Правило, ВходящиеДанные)
	
	Перем ИсходящиеДанные;
	
	Если КомментироватьВыгрузкуОбъектов	= 1 Тогда
		
		Попытка
			
			ПредставлениеОбъекта = Строка(Объект) + "  (" + ТипЗначенияСтр(Объект) + ")";
			ВывестиСообщение("Выгрузка объекта выборки:  " + ПредставлениеОбъекта);
			
		Исключение
			
			ВывестиСообщение("Выгрузка объекта выборки:  " + ТипЗначенияСтр(Объект));
			
		КонецПопытки; 
	
	КонецЕсли;
	
	ИмяПКО = "";
	
	НомерПКО = НайтиПравило(, Правило.КодПравилаКонвертации);
	
	// Глобальный обработчик "ПередВыгрузкойОбъекта"
	Если мКонвертацияПередВыгрузкойОбъекта = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПередВыгрузкойОбъекта(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик "ПередВыгрузкойОбъекта"
	Если Правило.ПередВыгрузкойОбъекта = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПередВыгрузкойОбъекта_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
    УзелСсылки = мПустоеЗначение;
	
	ВыгрузитьПоПравилу(Объект,, ИсходящиеДанные,, ИмяПКО, УзелСсылки,, НомерПКО);
	
	// Глобальный обработчик "ПослеВыгрузкиОбъекта"
	Если мКонвертацияПослеВыгрузкиОбъекта = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПослеВыгрузкиОбъекта(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные, УзелСсылки)]");
		
	КонецЕсли;

	// Обработчик "ПослеВыгрузкиОбъекта"
	Если Правило.ПослеВыгрузкиОбъекта = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПослеВыгрузкиОбъекта_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, Объект, ИсходящиеДанные, ВходящиеДанные, УзелСсылки)]");
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаОбъектаВыборки()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыгрузитьДанныеПоПравилу(ИмяПравилаВыгрузки)
	
	Перем ИсходящиеДанные, ВыборкаДанных;
	
	Перем Индекс;
	
	мТаблицаПравилВыгрузки.НайтиЗначение(ИмяПравилаВыгрузки, Индекс, "Код");
	
	Если Индекс = 0 Тогда
		
		ВывестиСообщение("Не найдено правило выгрузки: " + ИмяПравилаВыгрузки, "!!");
		Возврат;
		
	КонецЕсли;
	
	Правило = мТаблицаПравилВыгрузки;
	ИмяПКО = мТаблицаПравилВыгрузки.КодПравилаКонвертации;
	
	Если КомментироватьВыгрузкуОбъектов = 1 Тогда
		
		ВывестиСообщение("Начало обработки правила выгрузки данных:  " + ИмяПравилаВыгрузки);
		
	КонецЕсли;
	
	// Обработчик "ПередОбработкойПравила"
	Если Правило.ПередОбработкойПравила = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПередОбработкойПравила_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных)]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Выборка данных
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
		                                                                           
		ЕстьОтбор = 0;
		Если ТипЗначенияСтр(мТаблицаПравилВыгрузки.Отбор) = "ТаблицаЗначений" Тогда
			мТаблицаПравилВыгрузки.Отбор.ВыбратьСтроки();
			Пока мТаблицаПравилВыгрузки.Отбор.ПолучитьСтроку() = 1 Цикл
				Если (мТаблицаПравилВыгрузки.Отбор.Использовать = 2) И (ПустаяСтрока(мТаблицаПравилВыгрузки.Отбор.ПолеОтбора)=0) Тогда
					ЕстьОтбор = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбъектВыборки = СтрЗаменить(Правило.ОбъектВыборки, "Ссылка", "");
		ИмяТипа = Лев(ОбъектВыборки, Найти(ОбъектВыборки, ".") - 1); 
		
		Если ЕстьОтбор = 1 Тогда      
			                       
			Запрос = СоздатьОбъект("Запрос");
		    ТекстЗапроса = СоздатьЗапрос(ОбъектВыборки, мТаблицаПравилВыгрузки.Отбор);
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Сообщить("Ошибка при выполнении запроса для отбора данных по правилу " + мТаблицаПравилВыгрузки.Наименование,"!"); 
				Сообщить("Выгрузка данных по этому правилу не проведена!","!");
			    Возврат;
			КонецЕсли;       
			
			Пока Запрос.Группировка("ПеремОбъект") = 1 Цикл       
				ВыгрузкаОбъектаВыборки(Запрос.ПеремОбъект, Правило, ИсходящиеДанные);
			КонецЦикла;
			
		Иначе         
			
			Если ИмяТипа = "Справочник" Тогда
	
				Выборка = СоздатьОбъект(ОбъектВыборки);
				Выборка.ВыбратьЭлементы(0);
				
				Пока Выборка.ПолучитьЭлемент() > 0 Цикл
					
					ВыгрузкаОбъектаВыборки(Выборка.ТекущийЭлемент(), Правило, ИсходящиеДанные);
					
				КонецЦикла;
				
			ИначеЕсли ИмяТипа = "Документ" Тогда
				
				Выборка = СоздатьОбъект(ОбъектВыборки);
				Выборка.ВыбратьДокументы(ДатаНачала, ДатаОкончания);
				
				Пока Выборка.ПолучитьДокумент() > 0 Цикл
					
					ВыгрузкаОбъектаВыборки(Выборка.ТекущийДокумент(), Правило, ИсходящиеДанные);
					
				КонецЦикла;
			
			ИначеЕсли ОбъектВыборки = "КонстантыНабор" Тогда
				
				ВыгрузкаОбъектаВыборки(Константа, Правило, ИсходящиеДанные);
	
			ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
				
				Возврат;
				
			Иначе
				
				Возврат;
				
			КонецЕсли;

			
		КонецЕсли;
		
			
	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда
		
		Если ПустоеЗначение(ВыборкаДанных) = 0 Тогда
			
			Если ТипЗначенияСтр(ВыборкаДанных) = "ТаблицаЗначений" Тогда
				
				ВыборкаДанных.ВыбратьСтроки();
				
				Пока ВыборкаДанных.ПолучитьСтроку() > 0 Цикл
					
					ВыборкаДанных.ТекущаяСтрока(ВыборкаДанных.НомерСтроки);
					ВыгрузкаОбъектаВыборки(ВыборкаДанных, Правило, ИсходящиеДанные);
				
				КонецЦикла;                                             
				
			ИначеЕсли ТипЗначенияСтр(ВыборкаДанных) = "СписокЗначений" Тогда
				
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ВыборкаДанных.РазмерСписка() Цикл     
					
					ОбъектДляВыгрузки = ВыборкаДанных.ПолучитьЗначение(СчетчикЦикла);	
					ВыгрузкаОбъектаВыборки(ОбъектДляВыгрузки, Правило, ИсходящиеДанные);
					
				КонецЦикла; 
			
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	
	КонецЕсли;
	
	// Обработчик "ПослеОбработкиПравила"
	Если Правило.ПослеОбработкиПравила = 1 Тогда
		
		Отказ = Шаблон("[ПВД_ПослеОбработкиПравила_" + СокрЛП(Правило.Код) + "(ИмяПКО, Правило, ИсходящиеДанные)]");
		
	КонецЕсли;

КонецПроцедуры // ВыгрузитьДанныеПоПравилу()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВывестиОбрабатываемоеПравило(ИмяПравила)
	
	Форма.ВывестиОбрабатываемоеПравило.Заголовок(ИмяПравила);

КонецПроцедуры // ВывестиОбрабатываемоеПравило(ИмяПравила)

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ОбработатьПравилаВыгрузки()
	
	мТаблицаПравилВыгрузки.ВыбратьСтроки();
	
	Пока мТаблицаПравилВыгрузки.ПолучитьСтроку() = 1 Цикл
		
		Отключено = 0;
		
		Позиция = ПравилаВыгрузкиСписок.НайтиЗначение(мТаблицаПравилВыгрузки.Код);
		
		Если Позиция > 0 Тогда
			
			Отключено = ?(ПравилаВыгрузкиСписок.Пометка(Позиция) = 1, 0, 1);
			
		Иначе
			
			Отключено = мТаблицаПравилВыгрузки.Отключить;
		
		КонецЕсли;
		
		Если Отключено = 1 Тогда
			
			Продолжить;
			
		КонецЕсли; 
	    
		ВывестиОбрабатываемоеПравило(?(ПустоеЗначение(мТаблицаПравилВыгрузки.Наименование) = 1, мТаблицаПравилВыгрузки.Код, мТаблицаПравилВыгрузки.Наименование));
		ВыгрузитьДанныеПоПравилу(мТаблицаПравилВыгрузки.Код);
		
	КонецЦикла;
		
КонецПроцедуры // ОбработатьПравилаВыгрузки() 

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ИнициализацияФайлаОбмена()
	
	УстановитьАтрибут(rootNode, "ВерсияФормата", "2.0");
	УстановитьАтрибут(rootNode, "ДатаВыгрузки",  ПолучитьДатуV8(ТекущаяДата(), ТекущееВремя()));
	УстановитьАтрибут(rootNode, "НачалоПериодаВыгрузки", ПолучитьДатуV8(ДатаНачала));
	УстановитьАтрибут(rootNode, "ОкончаниеПериодаВыгрузки", ПолучитьДатуV8(ДатаОкончания));
	УстановитьАтрибут(rootNode, "ИмяКонфигурацииИсточника", мКонфигурацияИсточник);
	УстановитьАтрибут(rootNode, "ИмяКонфигурацииПриемника", мКонфигурацияПриемник);
	УстановитьАтрибут(rootNode, "ИдПравилКонвертации", мИд);
	УстановитьАтрибут(rootNode, "Комментарий", "");
	
	// Правила обмена
	УзелПравилаОбмена = СоздатьУзел("ПравилаОбмена");
	
	УстановитьАтрибут(УзелПравилаОбмена, "ВерсияФормата", мВерсияФормата);
	УстановитьАтрибут(УзелПравилаОбмена, "Ид", мИд);
	УстановитьАтрибут(УзелПравилаОбмена, "Наименование", мНаименование);
	УстановитьАтрибут(УзелПравилаОбмена, "ДатаВремяСоздания", мДатаВремяСоздания);
	УстановитьАтрибут(УзелПравилаОбмена, "Источник", мКонфигурацияИсточник);
	УстановитьАтрибут(УзелПравилаОбмена, "Приемник", мКонфигурацияПриемник);
	
	// Обработчики
	
	Если ПустоеЗначение(мКонвертацияПередЗагрузкойДанных) = 0 Тогда
		
		ЗаписатьЭлемент(УзелПравилаОбмена, "ПередЗагрузкойДанных", мКонвертацияПередЗагрузкойДанных);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПередЗагрузкойОбъекта) = 0 Тогда
		
		ЗаписатьЭлемент(УзелПравилаОбмена, "ПередЗагрузкойОбъекта", мКонвертацияПередЗагрузкойОбъекта);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПослеЗагрузкиОбъекта) = 0 Тогда
		
		ЗаписатьЭлемент(УзелПравилаОбмена, "ПослеЗагрузкиОбъекта", мКонвертацияПослеЗагрузкиОбъекта);
	    
	КонецЕсли;
	
	Если ПустоеЗначение(мКонвертацияПослеЗагрузкиДанных) = 0 Тогда
		
		ЗаписатьЭлемент(УзелПравилаОбмена, "ПослеЗагрузкиДанных", мКонвертацияПослеЗагрузкиДанных);
	    
	КонецЕсли;
	
	// ПКО
	УзелПКО = СоздатьУзел("ПравилаКонвертацииОбъектов");
	
	мТаблицаПравилКонвертацииОбъектов.ВыбратьСтроки();
	Пока мТаблицаПравилКонвертацииОбъектов.ПолучитьСтроку() > 0 Цикл
		
		УзелПравило = СоздатьУзел("Правило");
		
		ЗаписатьЭлемент(УзелПравило, "Код", мТаблицаПравилКонвертацииОбъектов.Код);
		ЗаписатьЭлемент(УзелПравило, "Источник", мТаблицаПравилКонвертацииОбъектов.Источник);
		ЗаписатьЭлемент(УзелПравило, "Приемник", мТаблицаПравилКонвертацииОбъектов.Приемник);
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.НеЗамещать) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "НеЗамещать", мТаблицаПравилКонвертацииОбъектов.НеЗамещать);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", мТаблицаПравилКонвертацииОбъектов.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ГенерироватьНовыйНомерИлиКодЕслиНеУказан) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "ГенерироватьНовыйНомерИлиКодЕслиНеУказан", мТаблицаПравилКонвертацииОбъектов.ГенерироватьНовыйНомерИлиКодЕслиНеУказан);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПередЗагрузкой) = 0 Тогда
			
			ЗаписатьЭлемент(УзелПравило, "ПередЗагрузкой", мТаблицаПравилКонвертацииОбъектов.ПередЗагрузкой);
			
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПриЗагрузке) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "ПриЗагрузке", мТаблицаПравилКонвертацииОбъектов.ПриЗагрузке);
		
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПослеЗагрузки) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "ПослеЗагрузки", мТаблицаПравилКонвертацииОбъектов.ПослеЗагрузки);
		
		КонецЕсли;
		
		Если ПустоеЗначение(мТаблицаПравилКонвертацииОбъектов.ПоследовательностьПолейПоиска) = 0 Тогда
		
			ЗаписатьЭлемент(УзелПравило, "ПоследовательностьПолейПоиска", мТаблицаПравилКонвертацииОбъектов.ПоследовательностьПолейПоиска);
		
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелПКО, УзелПравило);
		
	КонецЦикла;
	
	ДобавитьПодчиненный(УзелПравилаОбмена, УзелПКО);       
	                                          
	Если ТаблицаПараметровДляЗагрузки.КоличествоСтрок() > 0 Тогда
		УзелПараметры = СоздатьУзел("Параметры");                    
		ТаблицаПараметровДляЗагрузки.ВыбратьСтроки();
		Пока ТаблицаПараметровДляЗагрузки.ПолучитьСтроку() = 1 Цикл
			УзелПараметр = СоздатьУзел("Параметр");  
			УстановитьАтрибут(УзелПараметр, "Имя", ТаблицаПараметровДляЗагрузки.Имя); 
			УстановитьАтрибут(УзелПараметр, "Наименование", ТаблицаПараметровДляЗагрузки.Наименование);
			ДобавитьПодчиненный(УзелПараметры, УзелПараметр);       
		КонецЦикла;
		
		ДобавитьПодчиненный(УзелПравилаОбмена, УзелПараметры);       
	    
	КонецЕсли;
	
	// ПОД
	Попытка
		_DOMDocument = CreateObject("Msxml2.DOMDocument.4.0");
	Исключение
		_DOMDocument = CreateObject("Msxml2.DOMDocument");
	КонецПопытки;
	
	_DOMDocument.load(ИмяФайлаПравил);
	
	УзелПОД = _DOMDocument.selectSingleNode("ПравилаОбмена/ПравилаОчисткиДанных");
	ДобавитьПодчиненный(УзелПравилаОбмена, УзелПОД);
	
	УзелАлгоритмы = _DOMDocument.selectSingleNode("ПравилаОбмена/Алгоритмы");
    ДобавитьПодчиненный(УзелПравилаОбмена, УзелАлгоритмы);

    УзелЗапросы = _DOMDocument.selectSingleNode("ПравилаОбмена/Запросы");
    ДобавитьПодчиненный(УзелПравилаОбмена, УзелЗапросы);
    	
	ДобавитьПодчиненный(rootNode, УзелПравилаОбмена)

КонецПроцедуры // ИнициализацияФайлаОбмена()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыполнитьВыгрузку()
	
	мСчетчикВыгруженныхОбъектов = 0;
	
	Если ПустаяСтрока(ИмяФайлаДанных) = 1 Тогда
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение("Не указано имя файла данных!");
		Иначе
			Сообщить("Не указано имя файла данных!");
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Загрузка правил
	Если мТаблицаПравилВыгрузки.КоличествоСтрок() = 0 Тогда
		
		Если ЗагрузитьПравила() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		мТаблицаПравилКонвертацииОбъектов.Заполнить(0,,, "ВсеОбъектыВыгружены");
		
		мТаблицаПравилКонвертацииОбъектов.ВыбратьСтроки();
		
		Пока мТаблицаПравилКонвертацииОбъектов.ПолучитьСтроку() > 0 Цикл
			
			мТаблицаПравилКонвертацииОбъектов.Выгруженные.УдалитьВсе();
		    
		КонецЦикла;
		
		
	КонецЕсли;
	
	ВывестиСообщение("Начало выгрузки:   " + ТекущаяДата() + " " + ТекущееВремя());
	
	Если ТипЗначенияСтр(Параметры) = "ТаблицаЗначений" Тогда
		
        Параметры.УдалитьСтроки();
		Параметры.НоваяСтрока();
		Параметры.ТекущаяСтрока(Параметры.КоличествоСтрок());
	    
	КонецЕсли;
	
	Попытка
		DOMDocument = CreateObject("Msxml2.DOMDocument.4.0");
	Исключение
		DOMDocument = CreateObject("Msxml2.DOMDocument");
	КонецПопытки;
	
	rootNode = DOMDocument.createNode(1, "ФайлОбмена", "");
	
	ИнициализацияФайлаОбмена();    
	                                   
	// Сохраняем текущие настройки отбора 
	СохранитьНастройкиОтбора();

	// Устанавливат значения парамтров в структуре Параметры 
	// по таблице ТаблицаНастройкиПараметров
    ТаблицаНастройкиПараметров.ВыбратьСтроки();
	Пока ТаблицаНастройкиПараметров.ПолучитьСтроку() = 1 Цикл
		Параметры.УстановитьЗначение(1, СокрЛП(ТаблицаНастройкиПараметров.Имя), ТаблицаНастройкиПараметров.Значение);
	КонецЦикла;
	
	// Глобальный обработчик "ПередВыгрузкойДанных"
	Если мКонвертацияПередВыгрузкойДанных = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПередВыгрузкойДанных()]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьПравилаВыгрузки();
	
	// Глобальный обработчик "ПослеВыгрузкиДанных"
	Если мКонвертацияПослеВыгрузкиДанных = 1 Тогда
		
		Отказ = Шаблон("[Конвертация_ПослеВыгрузкиДанных()]");
		
		Если Число(Отказ) = 1 Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	DOMDocument.appendChild(rootNode);
	DOMDocument.save(ИмяФайлаДанных);
	
	
	ВывестиСообщение("Выгружено объектов:   " + мСчетчикВыгруженныхОбъектов);
	
	ВывестиСообщение("Окончание выгрузки:   " + ТекущаяДата() + " " + ТекущееВремя());

КонецПроцедуры // ВыполнитьВыгрузку()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА НАСТРОЙКИ ОТБОРА ДАННЫХ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ДобавитьУсловие() 
	                              
	Если ПустоеЗначение(КодПВДДляНастройкиОтбора) = 0 Тогда
		ТаблицаНастройкиОтбора.НоваяСтрока(); 
		ТаблицаНастройкиОтбора.Использовать = 2;  
		ТаблицаНастройкиОтбора.Условие      = "=";    
		ТаблицаНастройкиОтбора.ТипОбъекта   = "";  
		ТаблицаНастройкиОтбора.Объект       = "";   
		ТаблицаНастройкиОтбора.ТекущаяСтрока(ТаблицаНастройкиОтбора.КоличествоСтрок());
	КонецЕсли;
	
КонецПроцедуры
        
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//        
Процедура УдалитьУсловие() 
	
	Если ТаблицаНастройкиОтбора.ТекущаяСтрока() <> 0 Тогда
		Если ТаблицаНастройкиОтбора.НомерСтроки = ТаблицаНастройкиОтбора.КоличествоСтрок() Тогда
			Номер = ТаблицаНастройкиОтбора.КоличествоСтрок() - 1;
		Иначе
			Номер = ТаблицаНастройкиОтбора.НомерСтроки;
		КонецЕсли;
		
		ТаблицаНастройкиОтбора.УдалитьСтроку();    
		ТаблицаНастройкиОтбора.ТекущаяСтрока(Номер);
		
	КонецЕсли;
	
КонецПроцедуры    
        
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//        
Процедура ЗаполнитьТаблицуРеквизитов(ТипОбъекта, ВидОбъекта, Префикс = "")      
		                            
	Если ТипОбъекта = "Справочник" Тогда 
		Если ПустаяСтрока(Префикс) = 1 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = "ТекущийЭлемент"; 
			ТаблицаРеквизитов.Наименование = "Текущий элемент";
			ТаблицаРеквизитов.Тип          = "Справочник"; 
			ТаблицаРеквизитов.Вид          = ВидОбъекта;

			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "ПометкаУдаления"; 
			ТаблицаРеквизитов.Наименование = "Пометка удаления";
			ТаблицаРеквизитов.Тип          = "Число";
			ТаблицаРеквизитов.Длина        = 1;
		КонецЕсли;
		
		Если Метаданные.Справочник(ВидОбъекта).КоличествоУровней <> 0 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "Родитель"; 
			ТаблицаРеквизитов.Наименование = "Родитель";
			ТаблицаРеквизитов.Тип          = "Справочник"; 
			ТаблицаРеквизитов.Вид          = ВидОбъекта;
			
			//ТаблицаРеквизитов.НоваяСтрока();
			//ТаблицаРеквизитов.Ид           = Префикс + "ЭтоГруппа"; 
			//ТаблицаРеквизитов.Наименование = "Это группа";
			//ТаблицаРеквизитов.Тип          = "Число"; 
			//ТаблицаРеквизитов.Длина        = 1;

		КонецЕсли;
                                       
		ВладелецСтр = Метаданные.Справочник(ВидОбъекта).Владелец;
		Если СокрЛП(ВладелецСтр) <> "Метаданные" Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "Владелец"; 
			ТаблицаРеквизитов.Наименование = "Владелец";
			ТаблицаРеквизитов.Тип          = "Справочник"; 
			ТаблицаРеквизитов.Вид          = Строка(ВладелецСтр);
		КонецЕсли;
		
		ДлинаМД = Метаданные.Справочник(ВидОбъекта).ДлинаКода;   
		Если ДлинаМД <> 0 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "Код"; 
			ТаблицаРеквизитов.Наименование = "Код";     
			Если Метаданные.Справочник(ВидОбъекта).ТипКода = "Текстовый" Тогда
				ТаблицаРеквизитов.Тип = "Строка"; 
			Иначе                                 
				ТаблицаРеквизитов.Тип = "Число";			    
			КонецЕсли;
			ТаблицаРеквизитов.Длина = ДлинаМД; 
		КонецЕсли;                  
		
		ДлинаМД = Метаданные.Справочник(ВидОбъекта).ДлинаНаименования;   
		Если ДлинаМД <> 0 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "Наименование"; 
			ТаблицаРеквизитов.Наименование = "Наименование";     
			ТаблицаРеквизитов.Тип          = "Строка"; 
			ТаблицаРеквизитов.Длина        = ДлинаМД; 
		КонецЕсли;
		
		Для Сч = 1 По Метаданные.Справочник(ВидОбъекта).Реквизит() Цикл
			ТипМД   = Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Тип;    
			ДлинаМД = Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Длина;   
			Если (ТипМД = "Строка") И (ДлинаМД = 0) Тогда
				Продолжить;    
			КонецЕсли;               
			
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Идентификатор; 
			ТаблицаРеквизитов.Наименование = Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Представление();
			ТаблицаРеквизитов.Тип          = ТипМД; 
			ТаблицаРеквизитов.Вид          = Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Вид;
			ТаблицаРеквизитов.Длина        = ДлинаМД; 
			ТаблицаРеквизитов.Точность     = Метаданные.Справочник(ВидОбъекта).Реквизит(Сч).Точность; 
			
		КонецЦикла;   
		
	ИначеЕсли ТипОбъекта = "Документ" Тогда    
		Если ПустаяСтрока(Префикс) = 1 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = "ТекущийДокумент"; 
			ТаблицаРеквизитов.Наименование = "Текущий документ";
			ТаблицаРеквизитов.Тип          = "Документ"; 
			ТаблицаРеквизитов.Вид          = ОбъектДляНастройкиОтбора;
			
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "ПометкаУдаления"; 
			ТаблицаРеквизитов.Наименование = "Пометка удаления";
			ТаблицаРеквизитов.Тип          = "Число";  
			ТаблицаРеквизитов.Длина        = 1;
	
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "Проведен"; 
			ТаблицаРеквизитов.Наименование = "Проведен";
			ТаблицаРеквизитов.Тип          = "Число";           
			ТаблицаРеквизитов.Длина        = 1;
		КонецЕсли;
		
		ДлинаМД = Метаданные.Документ(ВидОбъекта).ДлинаНомера;   
		Если ДлинаМД <> 0 Тогда
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + "НомерДок"; 
			ТаблицаРеквизитов.Наименование = "Номер";     
			Если Метаданные.Документ(ВидОбъекта).ТипНомера = "Текстовый" Тогда
				ТаблицаРеквизитов.Тип = "Строка"; 
			Иначе                                 
				ТаблицаРеквизитов.Тип = "Число";			    
			КонецЕсли;
			ТаблицаРеквизитов.Длина = ДлинаМД; 
		КонецЕсли;                  
		
		ТаблицаРеквизитов.НоваяСтрока();
		ТаблицаРеквизитов.Ид           = "ДатаДок"; 
		ТаблицаРеквизитов.Наименование = "Дата";     
		ТаблицаРеквизитов.Тип          = "Дата"; 
		
		Для Сч = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
			ТипМД   = Метаданные.ОбщийРеквизитДокумента(Сч).Тип;    
			ДлинаМД = Метаданные.ОбщийРеквизитДокумента(Сч).Длина;   
			Если (ТипМД = "Строка") И (ДлинаМД = 0) Тогда
				Продолжить;    
			КонецЕсли;               
			
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + Метаданные.ОбщийРеквизитДокумента(Сч).Идентификатор; 
			ТаблицаРеквизитов.Наименование = Метаданные.ОбщийРеквизитДокумента(Сч).Представление();
			ТаблицаРеквизитов.Тип          = ТипМД; 
			ТаблицаРеквизитов.Вид          = Метаданные.ОбщийРеквизитДокумента(Сч).Вид;
			ТаблицаРеквизитов.Длина        = ДлинаМД; 
			ТаблицаРеквизитов.Точность     = Метаданные.ОбщийРеквизитДокумента(Сч).Точность; 
			
		КонецЦикла;
		
		Для Сч = 1 По Метаданные.Документ(ВидОбъекта).РеквизитШапки() Цикл
			ТипМД   = Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Тип;    
			ДлинаМД = Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Длина;   
			Если (ТипМД = "Строка") И (ДлинаМД = 0) Тогда
				Продолжить;    
			КонецЕсли;               
			
			ТаблицаРеквизитов.НоваяСтрока();
			ТаблицаРеквизитов.Ид           = Префикс + Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Идентификатор; 
			ТаблицаРеквизитов.Наименование = Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Представление();
			ТаблицаРеквизитов.Тип          = ТипМД; 
			ТаблицаРеквизитов.Вид          = Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Вид;
			ТаблицаРеквизитов.Длина        = ДлинаМД; 
			ТаблицаРеквизитов.Точность     = Метаданные.Документ(ВидОбъекта).РеквизитШапки(Сч).Точность; 
			
		КонецЦикла;

	КонецЕсли;                            

КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//        
Процедура РедактироватьУсловие()

	Если ТаблицаНастройкиОтбора.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНастройкиОтбора.ТекущаяКолонка() = "Использовать" Тогда
		
	    Если ТаблицаНастройкиОтбора.Использовать = 1 Тогда
			ТаблицаНастройкиОтбора.Использовать = 2;
		Иначе                                         
			ТаблицаНастройкиОтбора.Использовать = 1;
		КонецЕсли;
		
	ИначеЕсли ТаблицаНастройкиОтбора.ТекущаяКолонка() = "Условие" Тогда

		НовоеЗначение = ТаблицаНастройкиОтбора.Условие;   
		Если ТаблицаНастройкиОтбора.ТипОбъекта = "Справочник" Тогда  
			Если ТипыУсловийДляСправочников.ВыбратьЗначение(НовоеЗначение, "Выбор типа условия",ТипыУсловийДляСправочников.НайтиЗначение(ТаблицаНастройкиОтбора.Условие),,2) = 1 Тогда
				ТаблицаНастройкиОтбора.Условие = НовоеЗначение;
			КонецЕсли;	
		ИначеЕсли (ТаблицаНастройкиОтбора.ТипОбъекта = "Число") ИЛИ (ТаблицаНастройкиОтбора.ТипОбъекта = "Дата") Тогда 	
			Если ТипыУсловийДляЧисел.ВыбратьЗначение(НовоеЗначение, "Выбор типа условия",ТипыУсловийДляЧисел.НайтиЗначение(ТаблицаНастройкиОтбора.Условие),,2) = 1 Тогда
				ТаблицаНастройкиОтбора.Условие = НовоеЗначение;
			КонецЕсли;	
		Иначе
			Если ТипыУсловийДляСтрок.ВыбратьЗначение(НовоеЗначение, "Выбор типа условия",ТипыУсловийДляСтрок.НайтиЗначение(ТаблицаНастройкиОтбора.Условие),,2) = 1 Тогда
				ТаблицаНастройкиОтбора.Условие = НовоеЗначение;
			КонецЕсли;	
		КонецЕсли;
		
	ИначеЕсли ТаблицаНастройкиОтбора.ТекущаяКолонка() = "ПолеОтбора" Тогда
		
		ТаблицаРеквизитов.УдалитьСтроки();
		ЗаполнитьТаблицуРеквизитов(ТипОбъектаДляНастройкиОтбора, ОбъектДляНастройкиОтбора);     
		Если (ТаблицаНастройкиОтбора.ТипОбъекта = "Справочник") ИЛИ (ТаблицаНастройкиОтбора.ТипОбъекта = "Документа") Тогда
			ЗаполнитьТаблицуРеквизитов(ТаблицаНастройкиОтбора.ТипОбъекта, ТаблицаНастройкиОтбора.Объект, ТаблицаНастройкиОтбора.ПолеОтбора + ".");     
		КонецЕсли;
		
		Если ТаблицаРеквизитов.КоличествоСтрок()=0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаРеквизита = 0;
		Если ТаблицаРеквизитов.ВыбратьСтроку(СтрокаРеквизита,"Выбор реквизита отбора") = 1 Тогда                      
			ТаблицаРеквизитов.ПолучитьСтрокуПоНомеру(СтрокаРеквизита);
			
			ТаблицаНастройкиОтбора.ПолеОтбора = ТаблицаРеквизитов.Ид;      
			ТаблицаНастройкиОтбора.ТипОбъекта = ТаблицаРеквизитов.Тип; 
			ТаблицаНастройкиОтбора.Объект     = ТаблицаРеквизитов.Вид; 
			ТаблицаНастройкиОтбора.Длина      = ТаблицаРеквизитов.Длина; 
			ТаблицаНастройкиОтбора.Точность   = ТаблицаРеквизитов.Точность;
			ТаблицаНастройкиОтбора.Условие    = "=";
			Если ПустаяСтрока(ТаблицаНастройкиОтбора.Объект) = 1 Тогда
				ТаблицаНастройкиОтбора.Значение = ПолучитьПустоеЗначение(ТаблицаНастройкиОтбора.Объект);    
			Иначе                                                                                   
				ТаблицаНастройкиОтбора.Значение = ПолучитьПустоеЗначение(СокрЛП(ТаблицаНастройкиОтбора.ТипОбъекта) + "." + ТаблицаНастройкиОтбора.Объект);
			КонецЕсли;                           
			
		КонецЕсли;               
		
	ИначеЕсли ТаблицаНастройкиОтбора.ТекущаяКолонка() = "Значение" Тогда  
		НовоеЗначение = ТаблицаНастройкиОтбора.Значение;
		Если ПустаяСтрока(ТаблицаНастройкиОтбора.Объект) = 1 Тогда
			Если ВвестиЗначение(НовоеЗначение, "Новое значение отбора", ТаблицаНастройкиОтбора.ТипОбъекта, ТаблицаНастройкиОтбора.Длина, ТаблицаНастройкиОтбора.Точность) = 1 тогда
				ТаблицаНастройкиОтбора.Значение = НовоеЗначение;
			КонецЕсли;
		Иначе
			Если ВвестиЗначение(НовоеЗначение, "Новое значение отбора", СокрЛП(ТаблицаНастройкиОтбора.ТипОбъекта) + "." + ТаблицаНастройкиОтбора.Объект) = 1 тогда
				ТаблицаНастройкиОтбора.Значение = НовоеЗначение;
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура СохранитьНастройкиОтбора()
	Если ПустоеЗначение(КодПВДДляНастройкиОтбора) <> 1 Тогда
		НомерСтроки = 0;
		Если мТаблицаПравилВыгрузки.НайтиЗначение(КодПВДДляНастройкиОтбора, НомерСтроки, "Код") = 1 Тогда
			мТаблицаПравилВыгрузки.ПолучитьСтрокуПоНомеру(НомерСтроки);
			Если ТипЗначенияСтр(мТаблицаПравилВыгрузки.Отбор) <> "ТаблицаЗначений" Тогда
				мТаблицаПравилВыгрузки.Отбор = СоздатьОбъект("ТаблицаЗначений");
			КонецЕсли;                        
			ТаблицаНастройкиОтбора.Выгрузить(мТаблицаПравилВыгрузки.Отбор);   
			НомерВСписке    = ПравилаВыгрузкиСписок.НайтиЗначение(КодПВДДляНастройкиОтбора);
			НаименованиеПВД = "";
			Зн              = ПравилаВыгрузкиСписок.ПолучитьЗначение(НомерВСписке,НаименованиеПВД);
			ЕстьПометка     = ПравилаВыгрузкиСписок.Пометка(НомерВСписке);
			НаименованиеПВД = СтрЗаменить(НаименованиеПВД, " [ОТБОР]", "");
			Если ТаблицаНастройкиОтбора.КоличествоСтрок() <> 0 Тогда
			    ПравилаВыгрузкиСписок.УстановитьЗначение(НомерВСписке, Зн, НаименованиеПВД + " [ОТБОР]");
				Если ЕстьПометка = 1 Тогда
				     ПравилаВыгрузкиСписок.Пометка(НомерВСписке, ЕстьПометка);
				КонецЕсли; 
		    Иначе
			    ПравилаВыгрузкиСписок.УстановитьЗначение(НомерВСписке, Зн, НаименованиеПВД);
				Если ЕстьПометка = 1 Тогда
				     ПравилаВыгрузкиСписок.Пометка(НомерВСписке, ЕстьПометка);
				КонецЕсли; 

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    

КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УстановитьПВДДляНастройкиОтбора()    

	Если ПравилаВыгрузкиСписок.ТекущаяСтрока() = 0 Тогда
		Возврат
	КонецЕсли;	
	               
	СохранитьНастройкиОтбора();
	
	Если ПравилаВыгрузкиСписок.ТекущаяСтрока() = 0 Тогда
		Возврат
	КонецЕсли;	
	                                                                            
	НомерСтроки = 0;
	Если мТаблицаПравилВыгрузки.НайтиЗначение(ПравилаВыгрузкиСписок.ПолучитьЗначение(ПравилаВыгрузкиСписок.ТекущаяСтрока()), НомерСтроки, "Код") = 1 Тогда
		
		мТаблицаПравилВыгрузки.ПолучитьСтрокуПоНомеру(НомерСтроки);
		Если мТаблицаПравилВыгрузки.ЭтоГруппа = 1 Тогда
			Возврат;
		КонецЕсли;
		Если мТаблицаПравилВыгрузки.СпособОтбораДанных <> "СтандартнаяВыборка" Тогда
			Возврат;
		КонецЕсли;                                 
		Если Найти(мТаблицаПравилВыгрузки.ОбъектВыборки, "СправочникСсылка.") = 1 Тогда 
			ТипОбъектаДляНастройкиОтбора = "Справочник";
			ОбъектДляНастройкиОтбора = Сред(мТаблицаПравилВыгрузки.ОбъектВыборки, СтрДлина("СправочникСсылка.")+1);  
			ИмяПВДДляНастройкиОтбора = мТаблицаПравилВыгрузки.Наименование; 
			КодПВДДляНастройкиОтбора = мТаблицаПравилВыгрузки.Код;
			
		ИначеЕсли Найти(мТаблицаПравилВыгрузки.ОбъектВыборки, "ДокументСсылка.") = 1 Тогда
			ТипОбъектаДляНастройкиОтбора = "Документ";
			ОбъектДляНастройкиОтбора = Сред(мТаблицаПравилВыгрузки.ОбъектВыборки, СтрДлина("ДокументСсылка.")+1);  
			ИмяПВДДляНастройкиОтбора = мТаблицаПравилВыгрузки.Наименование; 
			КодПВДДляНастройкиОтбора = мТаблицаПравилВыгрузки.Код;
		Иначе
			Возврат;
		    
		КонецЕсли;

		Если ТипЗначенияСтр(мТаблицаПравилВыгрузки.Отбор) = "ТаблицаЗначений" Тогда
			мТаблицаПравилВыгрузки.Отбор.Выгрузить(ТаблицаНастройкиОтбора);	
			ТаблицаНастройкиОтбора.ВыводитьПиктограммы("Использовать");    
			ТаблицаНастройкиОтбора.ВидимостьКолонки("ТипОбъекта", 0);  
			ТаблицаНастройкиОтбора.ВидимостьКолонки("Объект", 0);  
			ТаблицаНастройкиОтбора.ВидимостьКолонки("Длина", 0);  
			ТаблицаНастройкиОтбора.ВидимостьКолонки("Точность", 0); 
			ТаблицаНастройкиОтбора.ТекущаяСтрока(1);
		Иначе	
			ТаблицаНастройкиОтбора.УдалитьСтроки();       
		КонецЕсли;                        
		
		
	КонецЕсли;	
	
КонецПроцедуры               
                            
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция СоздатьЗапрос(ОбъектВыборки, ТабОтбор)  
	
	ПрефиксЗапроса    = "Обрабатывать Все; "; 
	ПрефиксЗапросаДок = "ОбрабатыватьДокументы Все; ";
	      
	
	Если Найти(ОбъектВыборки, "Справочник.") = 1 Тогда 
		стрТекущий = ".ТекущийЭлемент";  
	Иначе                                
		стрТекущий = ".ТекущийДокумент";  
	КонецЕсли;
	
	ТекстЗапроса = "ПеремОбъект = " +  ОбъектВыборки +  стрТекущий + ";";

	ТабОтбор.ВыбратьСтроки();		   
	Пока ТабОтбор.ПолучитьСтроку() = 1 Цикл   
		Если (ТабОтбор.ПолеОтбора = "ТекущийЭлемент") ИЛИ (ТабОтбор.ПолеОтбора = "ТекущийДокумент") Тогда
			Продолжить;
		КонецЕсли;
		Если (ТабОтбор.Использовать = 1) ИЛИ (ПустаяСтрока(ТабОтбор.ПолеОтбора) = 1) Тогда
			Продолжить;
		КонецЕсли;
                                                   
		Если (ТабОтбор.Объект = "ПометкаУдаления") Тогда
			Если ТабОтбор.Значение = 0 Тогда
				ПрефиксЗапроса = "Обрабатывать НеПомеченныеНаУдаление; ";
			Иначе	                                                          
				ПрефиксЗапроса = "Обрабатывать ПомеченныеНаУдаление; ";
			КонецЕсли;   
			Продолжить;
		КонецЕсли;

		Если (ТабОтбор.Объект = "Проведен") Тогда
			Если ТабОтбор.Значение = 0 Тогда
				ПрефиксЗапросаДок = "ОбрабатыватьДокументы Непроведенные; ";
			Иначе	                                                          
				ПрефиксЗапросаДок = "ОбрабатыватьДокументы Проведенные; ";
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + " Перем" + ТабОтбор.НомерСтроки +" = " +  ОбъектВыборки + "." + ТабОтбор.ПолеОтбора + ";";//" Группировка ПеремОбъект; Без Итогов;";
	КонецЦикла;

	ТекстЗапроса = ТекстЗапроса + " Группировка ПеремОбъект;";    
	
	ТабОтбор.ВыбратьСтроки();		   
	Пока ТабОтбор.ПолучитьСтроку() = 1 Цикл
		ЗначенияДляОтбора[ТабОтбор.НомерСтроки] = ТабОтбор.Значение; 
		Если (ТабОтбор.Использовать = 1) ИЛИ (ПустаяСтрока(ТабОтбор.ПолеОтбора) = 1) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТабОтбор.ПолеОтбора = "ТекущийЭлемент") ИЛИ (ТабОтбор.ПолеОтбора = "ТекущийДокумент") Тогда
			ИмяПеременной = "ПеремОбъект";   
		ИначеЕсли (ТабОтбор.Объект = "ПометкаУдаления") ИЛИ (ТабОтбор.Объект = "Проведен") Тогда	
			Продолжить;
		Иначе	                          
			ИмяПеременной = "Перем" + ТабОтбор.НомерСтроки;
		КонецЕсли;                                                 
		Если ТабОтбор.Условие = "НЕ В" Тогда                                                                                                   
			ТекстЗапроса = ТекстЗапроса + "Условие (НЕ (" + ИмяПеременной + " В  ЗначенияДляОтбора[" + ТабОтбор.НомерСтроки + "]));";
		Иначе    
			ТекстЗапроса = ТекстЗапроса + "Условие (" + ИмяПеременной + " "+ ТабОтбор.Условие + " ЗначенияДляОтбора[" + ТабОтбор.НомерСтроки + "]);";
		КонецЕсли;
	КонецЦикла;                 
	                     
	Если Найти(ОбъектВыборки, "Документ.") = 1 Тогда 
		ТекстЗапроса = ПрефиксЗапроса + ПрефиксЗапросаДок + ТекстЗапроса;  
	Иначе                                
		ТекстЗапроса = ПрефиксЗапроса + ТекстЗапроса;  
	КонецЕсли;
                              
	Возврат ТекстЗапроса;
	
КонецФункции
                
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВключитьПометкиТаблицыОтбора(Режим)
	                                   
	ТаблицаНастройкиОтбора.ВыбратьСтроки();
	Пока ТаблицаНастройкиОтбора.ПолучитьСтроку() = 1 Цикл
		ТаблицаНастройкиОтбора.Использовать = Режим;
	КонецЦикла;
	
КонецПроцедуры // ВключитьПометки()
 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
////////////////////////////////////////////////////////////////////////////////

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ПриОткрытии()
	
	ИмяКоманды = "";
	
	СписокПараметров = Форма.Параметр;
	
	Если ПустоеЗначение(СписокПараметров) = 0 Тогда
		
		ИмяФайлаПравил                  = СписокПараметров.Получить("ИмяФайлаПравил");
		ИмяФайлаДанных                  = СписокПараметров.Получить("ИмяФайлаДанных");
		ДатаНачала                      = СписокПараметров.Получить("ДатаНачала");
		ДатаОкончания                   = СписокПараметров.Получить("ДатаОкончания");
		ИмяКоманды                      = СписокПараметров.Получить("ИмяКоманды");
		ЗнТаблицаНастройкиПараметров    = СписокПараметров.Получить("ТаблицаНастройкиПараметров");
		КомментироватьВыгрузкуОбъектов  = СписокПараметров.Получить("КомментироватьВыгрузкуОбъектов");
		мИспользуемыеПравилаВыгрузки    = СписокПараметров.Получить("ИспользуемыеПравилаВыгрузки");
		ИмяАлгоритма                    = СписокПараметров.Получить("ИмяАлгоритма");
		
	КонецЕсли;

	
	// Обрабатываем закладки
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Правила выгрузки");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	
	Форма.Закладки.ТекущаяСтрока(1);

	Форма.ИспользоватьСлой("Основной,ПравилаВыгрузки");
	
	Попытка
		FSO = СоздатьОбъект("Scripting.FileSystemObject");
	Исключение КонецПопытки;
	
	Компоненты = СоздатьОбъект("ТаблицаЗначений");
	Компоненты.НоваяКолонка("Путь");
	Компоненты.НоваяКолонка("МожноЗагружать");
	
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогПрограммы() + "v7plus.dll";
	Компоненты.МожноЗагружать	= 0;
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогИБ() + "v7plus.dll";
	Компоненты.МожноЗагружать	= 0;
	Компоненты.НоваяСтрока();
	Компоненты.Путь				= КаталогИБ() + "ExtForms\" + "v7plus.dll";
	Компоненты.МожноЗагружать	= 0;
	
	МожноПроверятьВерсию = Найти(ТипЗначенияСтр(FSO), "OLE.IFileSystem");
	
	Компоненты.ВыбратьСтроки();
	Пока Компоненты.ПолучитьСтроку() = 1 Цикл
		Если МожноПроверятьВерсию = 1 Тогда
			Если FSO.FileExists(Компоненты.Путь) <> 0 Тогда
				Если FSO.GetFileVersion(Компоненты.Путь) = "7.70.0.11" Тогда
					Компоненты.МожноЗагружать = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Компоненты.МожноЗагружать = ФС.СуществуетФайл(Компоненты.Путь);
		КонецЕсли;
	КонецЦикла;
	
	Если Компоненты.Итог("МожноЗагружать") = 0 Тогда
		ТекстОшибки = "Компонента v7plus.dll версии 7.70.0.11 не найдена!";
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение(ТекстОшибки, 60);
		Иначе
			Сообщить(ТекстОшибки);
			
			Если ПустаяСтрока(ИмяКоманды) = 0 Тогда
				ЗафиксироватьОшибку(ТекстОшибки);
				Форма.Параметр = СписокОшибок;
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	КомпонентаУспешноЗагружена = 0;
	Компоненты.ВыбратьСтроки();
	Пока Компоненты.ПолучитьСтроку() = 1 Цикл
		Если Компоненты.МожноЗагружать = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КомпонентаУспешноЗагружена = ЗагрузитьВнешнююКомпоненту(Компоненты.Путь);
		
		Если КомпонентаУспешноЗагружена = 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КомпонентаУспешноЗагружена = 0 Тогда
		ТекстОшибки = "Компонента v7plus.dll не найдена!";
		
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение(ТекстОшибки, 60);
		Иначе
			Сообщить(ТекстОшибки);
			
			Если ПустаяСтрока(ИмяКоманды) = 0 Тогда
				ЗафиксироватьОшибку(ТекстОшибки);
				Форма.Параметр = СписокОшибок;
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	мXMLАнализатор = СоздатьОбъект("AddIn.XMLParser");
	
	мЧтениеXML = мXMLАнализатор.СоздатьПоследовательноСчитываемыйДокумент();
	
	// Инициализация правил
	ИнициализацияПравилВыгрузки();
	ИнициализацияПравилКонвертацииОбъектов();
	
	// Инициализация таблицы настройки параметров
	ИнициализацияТаблицыНастройкиПараметров();
	
	Если ПустоеЗначение(СписокПараметров) = 0 Тогда
		
		ЗагрузитьПравилаОбмена();
		
		// Если в правилах нет ни одного параметра, который необходимо настраивать,
		// то в обработку могли ничего и не передать
		
		Если ПустоеЗначение(ЗнТаблицаНастройкиПараметров) = 0 Тогда
			ПредставлениеЗначения = "";
			Для НомерСтрокиСписка = 1 По ЗнТаблицаНастройкиПараметров.РазмерСписка() Цикл
				ЗнТаблицаНастройкиПараметров.ПолучитьЗначение(НомерСтрокиСписка, ПредставлениеЗначения);
				СтрокаТаблицы = "";
				Если ТаблицаНастройкиПараметров.НайтиЗначение(ПредставлениеЗначения,СтрокаТаблицы,1) = 1 Тогда
					ТаблицаНастройкиПараметров.ПолучитьСтрокуПоНомеру(СтрокаТаблицы);
					ТаблицаНастройкиПараметров.Значение = ЗнТаблицаНастройкиПараметров.Получить(ПредставлениеЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ИмяКоманды = "Выгрузить" Тогда
			Выгрузить();
			СтатусВозврата(0);
			Возврат;
			
		ИначеЕсли ИмяКоманды = "ВыполнитьАлгоритм" Тогда
			// Выполним алгоритм правил обмена и вернем результат в параметр формы
			Форма.Параметр = ЗначениеИзСтрокиВнутр(Шаблон("[" + ИмяАлгоритма + "()]"));
			СтатусВозврата(0);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)  
	
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Основной, ПравилаВыгрузки");
	ИначеЕсли НомерЗакладки = 2 Тогда                      
		Форма.ИспользоватьСлой("Основной, Параметры");
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()


//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УправлениеПометками(Пометка, КодПравила)
	
	Для Индекс = 1 По мТаблицаПравилВыгрузки.КоличествоСтрок() Цикл
	
		Если мТаблицаПравилВыгрузки.ПолучитьЗначение(Индекс, "Родитель") = КодПравила Тогда
			
			ПравилаВыгрузкиСписок.Пометка(ПравилаВыгрузкиСписок.НайтиЗначение(мТаблицаПравилВыгрузки.ПолучитьЗначение(Индекс, "Код")), Пометка);
			
			УправлениеПометками(Пометка, мТаблицаПравилВыгрузки.ПолучитьЗначение(Индекс, "Код"));
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // УправлениеПометками()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Функция УправлениеПометкамиПравилаВыгрузкиСписок()
	
	ТекущаяСтрокаПравилаВыгрузкиСписок = ПравилаВыгрузкиСписок.ТекущаяСтрока();
	
	Если ТекущаяСтрокаПравилаВыгрузкиСписок = 0 Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	НомерСтроки = 0;
	
	Если мТаблицаПравилВыгрузки.НайтиЗначение(ПравилаВыгрузкиСписок.ПолучитьЗначение(ТекущаяСтрокаПравилаВыгрузкиСписок, ""), НомерСтроки, "Код") = 1 Тогда
		
		Если мТаблицаПравилВыгрузки.ЭтоГруппа = 0 Тогда
			
			Возврат "";
			
		КонецЕсли;
		
		Пометка = ПравилаВыгрузкиСписок.Пометка(ТекущаяСтрокаПравилаВыгрузкиСписок);
		КодПравила = мТаблицаПравилВыгрузки.ПолучитьЗначение(НомерСтроки, "Код");
		
		УправлениеПометками(Пометка, КодПравила);
		
	КонецЕсли;

КонецФункции // УправлениеПометкамиПравилаВыгрузкиСписок()

//******************************************************************************
// ВыборФайла(ИмяФайла, Фильтр = "xml")
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВыборФайла(ТипДиалога = 0, ИмяФайла, ИмяФильтра = "", Фильтр = "xml")
	
	Каталог = "";
	
	Стр = ИмяФильтра + " (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(ТипДиалога, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
		
	    ИмяФайла = Каталог + ИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры // ВыборФайла()

//******************************************************************************
// ОткрытьФайлДляПросмотра(ИмяФайла)
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Если Форма.МодальныйРежим() = 0 Тогда
			Предупреждение("Файл с таким именем не существует!");
		Иначе
			Сообщить("Файл с таким именем не существует!");
		КонецЕсли;
	КонецЕсли;    
	
КонецПроцедуры // ОткрытьФайлДляПросмотра(ИмяФайла)

//******************************************************************************
// ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
    
	Если ИдентЭлемДиалога = "ИмяФайлаПравил" Тогда
	         
		ВыборФайла(, ИмяФайлаПравил, "Файл правил");
	
	ИначеЕсли ИдентЭлемДиалога = "ИмяФайлаДанных" Тогда
	         
		ВыборФайла(1, ИмяФайлаДанных, "Файл данных");
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ВключитьПометки(Режим)
	
    Для Индекс = 1 По ПравилаВыгрузкиСписок.РазмерСписка() Цикл
		
    	ПравилаВыгрузкиСписок.Пометка(Индекс, Режим);
		
	КонецЦикла;
	
КонецПроцедуры // ВключитьПометки()
                                           
//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура УстановитьЗначенияПараметра()
	
	ТекПозиция	= ТаблицаНастройкиПараметров.ТекущаяСтрока();
	ТекКолонка	= ТаблицаНастройкиПараметров.ТекущаяКолонка();
	
	Если ТекПозиция = 0 Тогда 
		Возврат; 
	КонецЕсли;
	
	Если ТекКолонка <> "Значение" Тогда
		Возврат; 
	КонецЕсли;
	
	ТипЗнач = ТаблицаНастройкиПараметров.ТипЗначения;  
	ВидЗнач = ТаблицаНастройкиПараметров.ВидЗначения; 

        
	Значение = ТаблицаНастройкиПараметров.Значение;
	Если ТипЗнач = "Строка" Тогда 
		Если ВвестиЗначение(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование, "Строка", 100) = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	ИначеЕсли ТипЗнач = "Число" Тогда 	
		Если ВвестиЗначение(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование, "Число", 15) = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	ИначеЕсли ТипЗнач = "Дата" Тогда 	
		Если ВвестиЗначение(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование, "Дата") = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	ИначеЕсли ТипЗнач = "Перечисление" Тогда 	
		Если ВвестиПеречисление(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование) = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	ИначеЕсли ТипЗнач = "Справочник" Тогда 	
		Если ВвестиЗначение(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование, "Справочник."+ ТаблицаНастройкиПараметров.ВидЗначения) = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	ИначеЕсли ТипЗнач = "Документ" Тогда 	
		Если ВвестиЗначение(Значение,"Введите значение параметра " + ТаблицаНастройкиПараметров.Наименование, "Документ."+ ТаблицаНастройкиПараметров.ВидЗначения) = 1 Тогда
			ТаблицаНастройкиПараметров.Значение = Значение;
		КонецЕсли;                
		
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗагрузитьПравилаОбмена()

	ЗагрузитьПравила();
	
КонецПроцедуры // ЗагрузитьПравилаОбмена()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура Выгрузить()

	ВыполнитьВыгрузку();
	
	Если Форма.МодальныйРежим() = 0 Тогда
		Предупреждение("Выгрузка данных завершена.");
	Иначе
		Сообщить("Выгрузка данных завершена.");
	КонецЕсли;
	
	Форма.Параметр = СписокОшибок;
	
КонецПроцедуры // Выгрузить()

//******************************************************************************
//
//
// Параметры:
//
// Возвращаемое значение:
// 
// Описание:
//
Процедура ЗафиксироватьОшибку(ТекстОшибки)
	
	СписокОшибок.ДобавитьЗначение(ТекстОшибки);
	
КонецПроцедуры // ЗафиксироватьОшибку()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
////////////////////////////////////////////////////////////////////////////////

мНачалоНовогоЭлемента = 1;
мИнструкцияОбработки = 2;
мКонецУровня = 3;
мКонецДокумента = 4;

мКонвертацияПередВыгрузкойДанных = 0;
мКонвертацияПередВыгрузкойОбъекта = 0;
мКонвертацияПередКонвертациейОбъекта = 0;
мКонвертацияПослеВыгрузкиОбъекта = 0;
мКонвертацияПослеВыгрузкиДанных = 0;

мПустоеЗначение = ПолучитьПустоеЗначение();          

ТаблицаНастройкиПараметров.НоваяКолонка("Имя"); 
ТаблицаНастройкиПараметров.НоваяКолонка("Наименование",,,,"Наименование параметра"); 
ТаблицаНастройкиПараметров.НоваяКолонка("Значение",,,,"Значение параметра");   
ТаблицаНастройкиПараметров.НоваяКолонка("ТипЗначения");   
ТаблицаНастройкиПараметров.НоваяКолонка("ВидЗначения");   
ТаблицаНастройкиПараметров.ВидимостьКолонки("Имя",0,); 
ТаблицаНастройкиПараметров.ВидимостьКолонки("ТипЗначения",0,); 
ТаблицаНастройкиПараметров.ВидимостьКолонки("ВидЗначения",0,);
                            
ТаблицаПараметровДляЗагрузки = СоздатьОбъект("ТаблицаЗначений");
ТаблицаПараметровДляЗагрузки.НоваяКолонка("Имя");        
ТаблицаПараметровДляЗагрузки.НоваяКолонка("Наименование");           

ТаблицаНастройкиОтбора.НоваяКолонка("Использовать", "Число",,, "", 5);
ТаблицаНастройкиОтбора.НоваяКолонка("ПолеОтбора", "Строка",,,"Реквизит отбора");
ТаблицаНастройкиОтбора.НоваяКолонка("Условие", "Строка",,, "", 5); 
ТаблицаНастройкиОтбора.НоваяКолонка("Значение");     
ТаблицаНастройкиОтбора.НоваяКолонка("ТипОбъекта", "Строка");    
ТаблицаНастройкиОтбора.НоваяКолонка("Объект", "Строка");     
ТаблицаНастройкиОтбора.НоваяКолонка("Длина", "Число");     
ТаблицаНастройкиОтбора.НоваяКолонка("Точность", "Число");    
ТаблицаНастройкиОтбора.ВыводитьПиктограммы("Использовать");    
ТаблицаНастройкиОтбора.ВидимостьКолонки("ТипОбъекта", 0);  
ТаблицаНастройкиОтбора.ВидимостьКолонки("Объект", 0);  
ТаблицаНастройкиОтбора.ВидимостьКолонки("Длина", 0);  
ТаблицаНастройкиОтбора.ВидимостьКолонки("Точность", 0); 
                                 
ТипыУсловийДляСтрок = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляСтрок.ДобавитьЗначение("=");
ТипыУсловийДляСтрок.ДобавитьЗначение("<>");

ТипыУсловийДляЧисел = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляЧисел.ДобавитьЗначение("=");
ТипыУсловийДляЧисел.ДобавитьЗначение(">");
ТипыУсловийДляЧисел.ДобавитьЗначение("<");
ТипыУсловийДляЧисел.ДобавитьЗначение("<=");
ТипыУсловийДляЧисел.ДобавитьЗначение(">=");
ТипыУсловийДляЧисел.ДобавитьЗначение("<>");

ТипыУсловийДляСправочников = СоздатьОбъект("СписокЗначений");
ТипыУсловийДляСправочников.ДобавитьЗначение("="); 
ТипыУсловийДляСправочников.ДобавитьЗначение("<>");
ТипыУсловийДляСправочников.ДобавитьЗначение("В");          
ТипыУсловийДляСправочников.ДобавитьЗначение("НЕ В");

ТаблицаРеквизитов = СоздатьОбъект("ТаблицаЗначений");
ТаблицаРеквизитов.НоваяКолонка("Ид", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Наименование", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Тип", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Вид", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Длина", "Строка"); 
ТаблицаРеквизитов.НоваяКолонка("Точность", "Строка"); 

СписокОшибок = СоздатьОбъект("СписокЗначений");
